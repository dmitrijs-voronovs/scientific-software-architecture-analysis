id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/google/deepvariant/releases/tag/v1.6.1:8,deployability,releas,release,8,"In this release:. * We fixed a bug in `call_variants` that caused the step to freeze in cases where there were no examples. This bug was observed and reported in https://github.com/google/deepvariant/issues/764, https://github.com/google/deepvariant/issues/769, https://github.com/google/deepsomatic/issues/8. * Updated `libssw` library from 1.2.4 to 1.2.5. . * The same model files are used for v1.6.0 and v1.6.1 for all technologies.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.1
https://github.com/google/deepvariant/releases/tag/v1.6.1:137,deployability,observ,observed,137,"In this release:. * We fixed a bug in `call_variants` that caused the step to freeze in cases where there were no examples. This bug was observed and reported in https://github.com/google/deepvariant/issues/764, https://github.com/google/deepvariant/issues/769, https://github.com/google/deepsomatic/issues/8. * Updated `libssw` library from 1.2.4 to 1.2.5. . * The same model files are used for v1.6.0 and v1.6.1 for all technologies.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.1
https://github.com/google/deepvariant/releases/tag/v1.6.1:312,deployability,Updat,Updated,312,"In this release:. * We fixed a bug in `call_variants` that caused the step to freeze in cases where there were no examples. This bug was observed and reported in https://github.com/google/deepvariant/issues/764, https://github.com/google/deepvariant/issues/769, https://github.com/google/deepsomatic/issues/8. * Updated `libssw` library from 1.2.4 to 1.2.5. . * The same model files are used for v1.6.0 and v1.6.1 for all technologies.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.1
https://github.com/google/deepvariant/releases/tag/v1.6.1:371,energy efficiency,model,model,371,"In this release:. * We fixed a bug in `call_variants` that caused the step to freeze in cases where there were no examples. This bug was observed and reported in https://github.com/google/deepvariant/issues/764, https://github.com/google/deepvariant/issues/769, https://github.com/google/deepsomatic/issues/8. * Updated `libssw` library from 1.2.4 to 1.2.5. . * The same model files are used for v1.6.0 and v1.6.1 for all technologies.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.1
https://github.com/google/deepvariant/releases/tag/v1.6.1:312,safety,Updat,Updated,312,"In this release:. * We fixed a bug in `call_variants` that caused the step to freeze in cases where there were no examples. This bug was observed and reported in https://github.com/google/deepvariant/issues/764, https://github.com/google/deepvariant/issues/769, https://github.com/google/deepsomatic/issues/8. * Updated `libssw` library from 1.2.4 to 1.2.5. . * The same model files are used for v1.6.0 and v1.6.1 for all technologies.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.1
https://github.com/google/deepvariant/releases/tag/v1.6.1:312,security,Updat,Updated,312,"In this release:. * We fixed a bug in `call_variants` that caused the step to freeze in cases where there were no examples. This bug was observed and reported in https://github.com/google/deepvariant/issues/764, https://github.com/google/deepvariant/issues/769, https://github.com/google/deepsomatic/issues/8. * Updated `libssw` library from 1.2.4 to 1.2.5. . * The same model files are used for v1.6.0 and v1.6.1 for all technologies.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.1
https://github.com/google/deepvariant/releases/tag/v1.6.1:371,security,model,model,371,"In this release:. * We fixed a bug in `call_variants` that caused the step to freeze in cases where there were no examples. This bug was observed and reported in https://github.com/google/deepvariant/issues/764, https://github.com/google/deepvariant/issues/769, https://github.com/google/deepsomatic/issues/8. * Updated `libssw` library from 1.2.4 to 1.2.5. . * The same model files are used for v1.6.0 and v1.6.1 for all technologies.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.1
https://github.com/google/deepvariant/releases/tag/v1.6.1:137,testability,observ,observed,137,"In this release:. * We fixed a bug in `call_variants` that caused the step to freeze in cases where there were no examples. This bug was observed and reported in https://github.com/google/deepvariant/issues/764, https://github.com/google/deepvariant/issues/769, https://github.com/google/deepsomatic/issues/8. * Updated `libssw` library from 1.2.4 to 1.2.5. . * The same model files are used for v1.6.0 and v1.6.1 for all technologies.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.1
https://github.com/google/deepvariant/releases/tag/v1.6.0:1067,availability,Sli,Slim,1067,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1130,availability,avail,available,1130,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1418,availability,Echo,Echols,1418,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:102,deployability,Updat,Updated,102,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:611,energy efficiency,reduc,reduced,611,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:667,energy efficiency,reduc,reduced,667,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:762,energy efficiency,reduc,reduces,762,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:874,energy efficiency,model,models,874,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1000,energy efficiency,model,model,1000,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:452,integrability,Sub,Substantial,452,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:64,interoperability,specif,specify,64,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:509,interoperability,specif,specifically,509,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1053,interoperability,platform,platform,1053,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:846,modifiability,Pac,PacBio,846,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1367,modifiability,Pac,PacBio,1367,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1067,reliability,Sli,Slim,1067,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1130,reliability,availab,available,1130,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:102,safety,Updat,Updated,102,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:894,safety,Compl,Complete,894,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1130,safety,avail,available,1130,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1448,safety,test,testing,1448,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:102,security,Updat,Updated,102,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:874,security,model,models,874,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:894,security,Compl,Complete,894,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1000,security,model,model,1000,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1130,security,availab,available,1130,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1448,testability,test,testing,1448,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:11,usability,support,support,11,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:54,usability,User,Users,54,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:257,usability,workflow,workflow,257,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1221,usability,help,helping,1221,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1435,usability,feedback,feedback,1435,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.6.0:1580,usability,feedback,feedback,1580,"* Improved support for haploid regions, chrX and chY. Users can specify haploid regions with a flag. [Updated case studies](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-xy-calling-case-study.md) show usage and metrics. * Added pangenome workflow (FASTQ-to-VCF mapping with VG and DeepVariant calling). [Case study](https://github.com/google/deepvariant/blob/r1.6/docs/deepvariant-vg-case-study.md) demonstrates improved accuracy. * Substantial improvements to DeepTrio de novo accuracy by specifically training DeepTrio for this use case (for chr20 at 30x HG002-HG003-HG004, false negatives reduced from 8 to 0 with DeepTrio v1.4, false positives reduced from 5 to 0). * We have added multi-processing ability in `postprocess_variants` which reduces 48 minutes to 30 minutes for Illumina WGS and 56 minutes to 33 minutes with PacBio. * We have added new models trained with Complete genomics data, and added case studies. * We have added NovaSeqX to the training data for the WGS model. * We have migrated our training and inference platform from Slim to Keras. * Force calling with approximate phasing is now available. We are sincerely grateful to . * @wkwan and @paulinesho for the contribution to helping in Keras move. * @lucasbrambrink for enabling multiprocessing in `postprocess_variants`. * @msamman, @akiraly1 for their contributions. * PacBio: William Rowell (@williamrowell), Nathaniel Echols for their feedback and testing. * UCSC: Benedict Paten(@benedictpaten), Shloka Negi (@shlokanegi), Jimin Park (@jimin001), Mobin Asri (@mobinasri) for the feedback.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.6.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:182,deployability,continu,continue,182,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:900,deployability,observ,observed,900,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1270,deployability,log,logic,1270,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1628,deployability,infrastructur,infrastructure,1628,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1672,deployability,Updat,Updated,1672,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1691,deployability,version,version,1691,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1710,deployability,Updat,Updated,1710,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1725,deployability,version,version,1725,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:6,energy efficiency,model,model,6,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:332,energy efficiency,model,model,332,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:370,energy efficiency,model,model,370,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:532,energy efficiency,model,models,532,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:594,energy efficiency,model,model,594,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:748,energy efficiency,model,model,748,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:923,energy efficiency,model,model,923,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1022,energy efficiency,model,model,1022,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1691,integrability,version,version,1691,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1725,integrability,version,version,1725,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:283,modifiability,Pac,PacBio,283,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:325,modifiability,Pac,PacBio,325,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1691,modifiability,version,version,1691,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1725,modifiability,version,version,1725,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:376,performance,perform,performs,376,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1270,safety,log,logic,1270,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1672,safety,Updat,Updated,1672,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1710,safety,Updat,Updated,1710,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:6,security,model,model,6,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:332,security,model,model,332,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:370,security,model,model,370,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:532,security,model,models,532,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:594,security,model,model,594,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:748,security,model,model,748,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:923,security,model,model,923,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1022,security,model,model,1022,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1270,security,log,logic,1270,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1672,security,Updat,Updated,1672,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1710,security,Updat,Updated,1710,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:123,testability,simpl,simplex,123,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:900,testability,observ,observed,900,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1270,testability,log,logic,1270,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:104,usability,support,supports,104,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:123,usability,simpl,simplex,123,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:376,usability,perform,performs,376,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.5.0:1066,usability,user,user-reported,1066,"* New model datatype: `--model_type ONT_R104` is a new option. Starting from v1.5, DeepVariant natively supports ONT R10.4 simplex and duplex data. * For older ONT chemistry, please continue to use [PEPPER-Margin-DeepVariant](https://github.com/kishwarshafin/pepper). * Incorporated PacBio Revio training data in DeepVariant PacBio model. In our evaluations this single model performs well on both Sequel II and Revio datatypes. Please use DeepVariant v1.5 and later for Revio data. . * Incorporated Element Biosciences data in WGS models. We found that we could jointly train a short-read WGS model with both Illumina and Element data. Inclusion of Element data improves accuracy on Element without negative effect on Illumina. Please use the WGS model for best results on either Illumina or Element data. * Added vg/Giraffe-mapped BAMs to DeepVariant WGS training data (alongside existing BWA). We observed that a single model can be trained for strong results with both BWA and vg/Giraffe. . * Improved DeepVariant WES model for 100bps exome sequencing thanks to user-reported issues (including https://github.com/google/deepvariant/issues/586 and https://github.com/google/deepvariant/issues/592). * Thanks to Tong Zhu from Nvidia for his suggestion to [improve the logic for shuffling reads](https://github.com/google/deepvariant/commit/249e318470395fcc55fd5377f77a67e988288021). * Thanks to Doron Shem-Tov (@doron-st) and Ilya Soifer (@ilyasoifer) from Ultima Genomics for adding new functionalities enabled by flags `--enable_joint_realignment` and `--p_error`. * Thanks to Dennis Yelizarov for improving Google-internal infrastructure for running make_examples. * Updated TensorFlow version to 2.11.0. Updated htslib version to 1.13.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.5.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:424,availability,error,errors,424,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:980,deployability,releas,released,980,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:1006,deployability,build,build,1006,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:1107,deployability,releas,released,1107,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:273,energy efficiency,model,model-case-study,273,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:416,energy efficiency,reduc,reduces,416,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:469,energy efficiency,model,model,469,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:532,energy efficiency,Reduc,Reduced,532,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:626,energy efficiency,optim,optimizing,626,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:708,energy efficiency,model,model,708,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:1136,energy efficiency,model,model,1136,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:714,interoperability,architectur,architecture,714,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:25,modifiability,Pac,PacBio,25,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:88,modifiability,Pac,PacBio,88,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:182,modifiability,Pac,PacBio,182,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:266,modifiability,pac,pacbio-model-case-study,266,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:424,performance,error,errors,424,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:626,performance,optimiz,optimizing,626,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:424,safety,error,errors,424,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:273,security,model,model-case-study,273,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:469,security,model,model,469,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:708,security,model,model,708,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:1136,security,model,model,1136,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:2,testability,Simpl,Simplified,2,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:2,usability,Simpl,Simplified,2,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:95,usability,user,users,95,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:424,usability,error,errors,424,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.4.0:990,usability,User,Users,990,"* Simplified DeepVariant PacBio by introducing **approximate haplotagging**. This means PacBio users who run DeepVariant no longer need to run DeepVariant+WhatsHap+DeepVariant. See [PacBio case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-pacbio-model-case-study.md) for more information. * For Illumina WGS and WES, we add an additional feature of read insert size (`insert_size`) . This reduces errors by **4-10%** for Illumina WGS and WES model. Thanks @lucasbrambrink for implementing this feature. * Reduced the runtime of the `postprocess_variants` step by **10-30%**. Thanks @moshewagner for optimizing the code. * Included experimental code which explores use of Keras for model architecture. This is not used in production methods, but may be informative to developers seeking examples of Keras applied to similar problems. Thanks @wkwan and @paulinesho for their contributions. * We did not include OpenVINO by default in the Docker images we released. Users can still build their own Docker images with the option turned on as needed. * __Updated 2022-10-17__: We have released an Illumina RNA-seq model and added an [RNA-seq case study](https://github.com/google/deepvariant/blob/r1.4/docs/deepvariant-rnaseq-case-study.md).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.4.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:1450,deployability,log,logging,1450,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:31,energy efficiency,model,models,31,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:165,energy efficiency,model,models,165,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:207,energy efficiency,reduc,reducing,207,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:527,energy efficiency,reduc,reduce,527,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:763,energy efficiency,current,currently,763,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:995,energy efficiency,Current,Currently,995,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:1229,energy efficiency,current,currently,1229,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:1250,energy efficiency,reduc,reduces,1250,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:1425,energy efficiency,Reduc,Reduced,1425,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:1437,energy efficiency,frequenc,frequency,1437,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:24,modifiability,Pac,PacBio,24,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:41,modifiability,Pac,PacBio,41,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:158,modifiability,Pac,PacBio,158,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:379,modifiability,Pac,PacBio,379,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:1258,performance,memor,memory,1258,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:1273,safety,input,input,1273,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:1450,safety,log,logging,1450,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:31,security,model,models,31,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:165,security,model,models,165,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:1450,security,log,logging,1450,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:1450,testability,log,logging,1450,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:1258,usability,memor,memory,1258,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.3.0:1273,usability,input,input,1273,"* Improved the DeepTrio PacBio models on PacBio Sequel II Chemistry v2.2 by including this data in the training dataset. * Improved `call_variants` speed for PacBio models (both DeepVariant and DeepTrio) by reducing the default window width from 221 to 199, without tradeoff on accuracy. Thanks to @lucasbrambrink for conducting the experiments to find a better window width for PacBio. * Introduced a new flag `--normalize_reads` in `make_examples`, which normalizes Indel candidates at the reads level.This flag is useful to reduce rare cases where an indel variant is not left-normalized. This feature is mainly relevant to joint calling of large cohorts for joint calling, or cases where read mappings have been surjected from one reference to another. It is currently set to False by default. To enable it, add `--normalize_reads=true` directly to the `make_examples` binary. If you’re using the `run_deepvariant` one-step approach, add `--make_examples_extra_args=""normalize_reads=true""`. Currently we don’t recommend turning this flag on for long reads due to potential runtime increase. * Added an `--aux_fields_to_keep` flag to the `make_examples` step, and set the default to only the auxiliary fields that DeepVariant currently uses. This reduces memory use for input BAM files that have large auxiliary fields that aren’t used in variant calling. Thanks to @williamrowell and @rhallPB for reporting this issue. * Reduced the frequency of logging in `make_examples` as well as `call_variants` to address the issue reported in https://github.com/google/deepvariant/issues/491.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.3.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:1781,availability,robust,robustness,1781," computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtoo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:2373,availability,operat,operations,2373," idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Ind",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:21,deployability,releas,release,21,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:29,deployability,contain,contains,29,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:124,deployability,modul,modularizes,124,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:641,deployability,updat,updated,641,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:657,deployability,depend,dependencies,657,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:678,deployability,version,version,678,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:705,deployability,version,version,705,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:739,deployability,version,version,739,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:821,deployability,depend,dependencies,821,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:3276,deployability,log,logic,3276,"(https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). * New `--dry_run` flag is now added for printing out all commands to be executed, without running them. This is mentioned in the [Quick Start section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-quick-start.md#run-deepvariant-with-one-command).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:331,energy efficiency,model,model,331,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:500,energy efficiency,model,model,500,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:727,energy efficiency,GPU,GPU,727,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:888,energy efficiency,model,model,888,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:1276,energy efficiency,model,models,1276,"d_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. *",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:1698,energy efficiency,model,model,1698,"low version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagn",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:1773,energy efficiency,model,model,1773,"he greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to r",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:3413,energy efficiency,model,models,3413,"(https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). * New `--dry_run` flag is now added for printing out all commands to be executed, without running them. This is mentioned in the [Quick Start section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-quick-start.md#run-deepvariant-with-one-command).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:124,integrability,modular,modularizes,124,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:143,integrability,compon,components,143,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:510,integrability,sub,substantially,510,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:657,integrability,depend,dependencies,657,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:678,integrability,version,version,678,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:705,integrability,version,version,705,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:739,integrability,version,version,739,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:821,integrability,depend,dependencies,821,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:2457,integrability,filter,filtered,2457,"tani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:143,interoperability,compon,components,143,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:2027,interoperability,share,shared,2027,"sue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enab",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:88,modifiability,refact,refactor,88,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:124,modifiability,modul,modularizes,124,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:143,modifiability,compon,components,143,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:245,modifiability,inherit,inherit,245,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:324,modifiability,Pac,PacBio,324,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:458,modifiability,Pac,PacBio,458,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:493,modifiability,Pac,PacBio,493,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:546,modifiability,Pac,PacBio,546,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:657,modifiability,depend,dependencies,657,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:678,modifiability,version,version,678,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:705,modifiability,version,version,705,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:739,modifiability,version,version,739,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:821,modifiability,depend,dependencies,821,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:1955,modifiability,refact,refactoring,1955,"ant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:3041,modifiability,refact,refactoring,3041,"ariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). * New `--dry_run` flag is now added for printing out all commands to be executed, without running them. This is mentioned in the [Quick Start section](https://githu",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:3406,modifiability,Pac,PacBio,3406,"(https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). * New `--dry_run` flag is now added for printing out all commands to be executed, without running them. This is mentioned in the [Quick Start section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-quick-start.md#run-deepvariant-with-one-command).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:88,performance,refactor,refactor,88,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:727,performance,GPU,GPU,727,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:1955,performance,refactor,refactoring,1955,"ant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:3041,performance,refactor,refactoring,3041,"ariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). * New `--dry_run` flag is now added for printing out all commands to be executed, without running them. This is mentioned in the [Quick Start section](https://githu",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:1781,reliability,robust,robustness,1781," computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtoo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:2628,reliability,doe,does-it-work,2628,"or training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more deta",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:124,safety,modul,modularizes,124,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:641,safety,updat,updated,641,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:657,safety,depend,dependencies,657,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:821,safety,depend,dependencies,821,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:1781,safety,robust,robustness,1781," computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtoo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:3276,safety,log,logic,3276,"(https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). * New `--dry_run` flag is now added for printing out all commands to be executed, without running them. This is mentioned in the [Quick Start section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-quick-start.md#run-deepvariant-with-one-command).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:331,security,model,model,331,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:500,security,model,model,500,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:641,security,updat,updated,641,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:888,security,model,model,888,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:1276,security,model,models,1276,"d_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. *",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:1365,security,team,teams,1365,"gle.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP c",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:1698,security,model,model,1698,"low version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagn",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:1773,security,model,model,1773,"he greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to r",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:3276,security,log,logic,3276,"(https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). * New `--dry_run` flag is now added for printing out all commands to be executed, without running them. This is mentioned in the [Quick Start section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-quick-start.md#run-deepvariant-with-one-command).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:3413,security,model,models,3413,"(https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). * New `--dry_run` flag is now added for printing out all commands to be executed, without running them. This is mentioned in the [Quick Start section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-quick-start.md#run-deepvariant-with-one-command).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:124,testability,modula,modularizes,124,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:657,testability,depend,dependencies,657,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:821,testability,depend,dependencies,821,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:3276,testability,log,logic,3276,"(https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). * New `--dry_run` flag is now added for printing out all commands to be executed, without running them. This is mentioned in the [Quick Start section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-quick-start.md#run-deepvariant-with-one-command).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:731,usability,support,support,731,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:801,usability,efficien,efficiency,801,"The DeepVariant v1.2 release contains the following major improvements:. * A major code refactor for `make_examples` better modularizes common components between DeepVariant, DeepTrio, and potential future applications. This enables DeepTrio to inherit improvements such as `--add_hp_channel` (introduced to the DeepVariant PacBio model in v1.1; see [blog](https://google.github.io/deepvariant/posts/2021-02-08-the-haplotype-channel/)), improving DeepTrio’s PacBio accuracy. * The DeepVariant PacBio model has substantially improved accuracy for PacBio Sequel II Chemistry v2.2, achieved by including this data in the training dataset. * We updated several dependencies: Python version to 3.8, TensorFlow version to 2.5.0, and GPU support version to CUDA 11.3 and cuDNN 8.2. The greater computational efficiency of these dependencies results in improvements to speed. * In the ""training"" model for make_examples, we committed (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such a",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:1923,usability,help,help,1923," (https://github.com/google/deepvariant/commit/4a11046de0ad86e36d2514af9f035c9cb34414bf) that fixed an issue introduced in an earlier commit (https://github.com/google/deepvariant/commit/a4a654769f1454ea487ebf0a32d45a9f8779617b) where make_examples might generate fewer REF (class0) examples than expected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - Th",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:2219,usability,support,support,2219,"xpected. * Improvements to accuracy for Illumina WGS models for various, shorter read lengths. Thanks to the following contributors and their teams for the idea:. - Dr. Masaru Koido (The University of Tokyo and RIKEN). - Dr. Yoichiro Kamatani (The University of Tokyo and RIKEN). - Mr. Kohei Tomizuka (RIKEN). - Dr. Chikashi Terao (RIKEN). Additional detail for improvements in DeepVariant v1.2:. Improvements for training:. * We augmented the training data for Illumina WGS model by adding BAMs with trimmed reads (125bps and 100bps) to improve our model’s robustness on different read lengths. Improvements for `make_examples`:. For more details on flags, run `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_example",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:2879,usability,prototyp,prototype,2879," `/opt/deepvariant/bin/make_examples --help` for more details. * Major refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). *",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:2947,usability,prototyp,prototype,2947,"or refactoring to ensure useful features (such as --add_hp_channel) can be shared between DeepVariant and DeepTrio make_examples. * Add MED_DP (median of DP) in the gVCF output. See [this section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). * New `--dry_run` flag is now added for printing out all commands to ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:3615,usability,help,help,3615,"(https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). * New `--dry_run` flag is now added for printing out all commands to be executed, without running them. This is mentioned in the [Quick Start section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-quick-start.md#run-deepvariant-with-one-command).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:3745,usability,user,users,3745,"(https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). * New `--dry_run` flag is now added for printing out all commands to be executed, without running them. This is mentioned in the [Quick Start section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-quick-start.md#run-deepvariant-with-one-command).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:3940,usability,command,commands,3940,"(https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). * New `--dry_run` flag is now added for printing out all commands to be executed, without running them. This is mentioned in the [Quick Start section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-quick-start.md#run-deepvariant-with-one-command).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.2.0:4139,usability,command,command,4139,"(https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-gvcf-support.md#new-option-to-include-med-dp) for more details. * New `--split_skip_reads` flag: if True, make_examples will split reads with large SKIP cigar operations into individual reads. Resulting read parts that are less than 15 bp are filtered out. * We now sort the realigned BAM output mentioned in [this section](https://github.com/google/deepvariant/blob/r1.2/docs/FAQ.md#what-is-the-realigner-and-how-does-it-work) when you use `--emit_realigned_reads=true --realigner_diagnostics=/output/realigned_reads` for make_examples. You will still need to run `samtools index` to get the index file, but no longer need to sort the BAM. * Added an experimental prototype for multi-sample make_examples. - This is an experimental prototype for working with multiple samples in DeepVariant, a proof of concept enabled by the refactoring to join together DeepVariant and DeepTrio, generalizing the functionality of make_examples to work with multiple samples. Usage information is in multisample_make_examples.py, but note that this is experimental. * Improved logic for read allele counts calculation for sites with low base quality indels, which resulted in Indel accuracy improvement for PacBio models. * Improvements to the realigner code to fix certain uncommon edge cases. Improvements for the one-step `run_deepvariant`:. For more details on flags, run `/opt/deepvariant/bin/run_deepvariant --help` for more details. * New `--runtime_report` which enables runtime report output to `--logging_dir`. This makes it easier for users to get the [runtime by region report for make_examples](https://github.com/google/deepvariant/blob/r1.2/docs/runtime-by-region.md). * New `--dry_run` flag is now added for printing out all commands to be executed, without running them. This is mentioned in the [Quick Start section](https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-quick-start.md#run-deepvariant-with-one-command).",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.2.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:213,availability,avail,available,213,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:392,availability,error,errors,392,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:9,deployability,releas,release,9,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:304,deployability,contain,contains,304,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:768,deployability,log,logs,768,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:961,deployability,continu,continue,961,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1227,deployability,stage,stage,1227,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:51,energy efficiency,model,model,51,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:202,energy efficiency,model,models,202,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:377,energy efficiency,reduc,reducing,377,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1084,energy efficiency,adapt,adapted,1084,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1249,energy efficiency,model,model,1249,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1267,energy efficiency,CPU,CPU,1267,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1084,integrability,adapt,adapted,1084,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:57,interoperability,specif,specifically,57,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:476,interoperability,specif,specifically,476,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1084,interoperability,adapt,adapted,1084,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:261,modifiability,Pac,PacBio,261,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:369,modifiability,Pac,PacBio,369,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:632,modifiability,Pac,PacBio,632,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1084,modifiability,adapt,adapted,1084,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1625,modifiability,extens,extensive,1625,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:392,performance,error,errors,392,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1267,performance,CPU,CPU,1267,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:213,reliability,availab,available,213,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:213,safety,avail,available,213,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:392,safety,error,errors,392,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:456,safety,input,input,456,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:768,safety,log,logs,768,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:51,security,model,model,51,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:202,security,model,models,202,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:213,security,availab,available,213,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:768,security,log,logs,768,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1066,security,team,team,1066,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1249,security,model,model,1249,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1364,security,ident,identical,1364,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1646,security,team,team,1646,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:768,testability,log,logs,768,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:392,usability,error,errors,392,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:456,usability,input,input,456,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:688,usability,efficien,efficient,688,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:836,usability,interact,interactive,836,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:848,usability,visual,visualization,848,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1124,usability,tool,toolkit,1124,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.1.0:1506,usability,command,command,1506,"The v1.1 release introduces DeepTrio, which uses a model specifically trained to call a mother-father-child trio or parent-child duo. DeepTrio has superior accuracy compared to DeepVariant. Pre-trained models are available for Illumina WGS, Illumina exome, and PacBio HiFi. In addition, DeepVariant v1.1 contains the following improvements:. * Accuracy improvements on PacBio, reducing Indel errors by ~21% on the case study. This is achieved by adding an input channel which specifically encodes haplotype information, as opposed to only sorting by haplotype in v1.0. The flag is `--add_hp_channel` which is enabled by default for PacBio. * Speed improvements for long read data by more efficient handling of long CIGAR strings. . * New functionality to add detailed logs for runtime of make_examples by genomic region, viewable in an interactive visualization. * We now fully withhold HG003 from all training, and report all accuracy evaluations on HG003. We continue to withhold chromosome20 from training in all samples. New optional flags to increase speed:. A team at Intel has adapted DeepVariant to use the OpenVINO toolkit, which further accelerates . TensorFlow applications. This further speeds up the call_variants stage by ~25% for any model when run in CPU mode on an Intel machine. DeepVariant runs of OpenVINO have the same accuracy and are nearly identical to runs without. Runs with OpenVINO are fully reproducible on OpenVINO. To use OpenVINO, add the following flag too the DeepVariant command:. `--call_variants_extra_args ""use_openvino=true""`. We thank Intel for their contribution, and acknowledge the extensive work their team put in, captured in (https://github.com/google/deepvariant/pull/363)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.1.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:192,availability,error,errors,192,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:213,availability,error,errors,213,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:239,availability,error,errors,239,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:17,deployability,releas,releases,17,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:110,deployability,version,version,110,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:2195,deployability,version,version,2195,"ant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed in https://github.com/google/deepvariant/commit/f101492). - Added `--sample_name` flag to postprocess_variant.py and applied it in run_deepvariant.py as well. (https://github.com/google/deepvariant/issues/334 fixed in https://github.com/google/deepvariant/commit/a81d629)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:172,energy efficiency,reduc,reduce,172,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:513,energy efficiency,model,model,513,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:592,energy efficiency,model,model-case-study,592,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1415,energy efficiency,model,models,1415,"t_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed in https://github.com/google/deepvariant/commit/f101492). - Added `--sample_name` flag to postprocess_variant.py and applied it in run_",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1486,energy efficiency,model,model,1486," for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed in https://github.com/google/deepvariant/commit/f101492). - Added `--sample_name` flag to postprocess_variant.py and applied it in run_deepvariant.py as well. (https://github.com/google/deepvariant/issues/3",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1872,energy efficiency,model,modelling,1872,"ant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed in https://github.com/google/deepvariant/commit/f101492). - Added `--sample_name` flag to postprocess_variant.py and applied it in run_deepvariant.py as well. (https://github.com/google/deepvariant/issues/334 fixed in https://github.com/google/deepvariant/commit/a81d629)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:78,integrability,sub,substantial,78,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:110,integrability,version,version,110,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:619,integrability,sub,substantially,619,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:926,integrability,sub,substantially,926,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:2195,integrability,version,version,2195,"ant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed in https://github.com/google/deepvariant/commit/f101492). - Added `--sample_name` flag to postprocess_variant.py and applied it in run_deepvariant.py as well. (https://github.com/google/deepvariant/issues/334 fixed in https://github.com/google/deepvariant/commit/a81d629)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:110,modifiability,version,version,110,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:232,modifiability,Pac,PacBio,232,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:506,modifiability,Pac,PacBio,506,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:585,modifiability,pac,pacbio-model-case-study,585,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:661,modifiability,Pac,PacBio,661,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:968,modifiability,Pac,PacBio,968,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:987,modifiability,Pac,PacBio,987,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1437,modifiability,PAC,PACBIO,1437,"alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed in https://github.com/google/deepvariant/commit/f101492). - Added `--sample_name` flag to postprocess_variant.py and applied it in run_deepvariant.py as well",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1479,modifiability,pac,pacbio,1479,"default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed in https://github.com/google/deepvariant/commit/f101492). - Added `--sample_name` flag to postprocess_variant.py and applied it in run_deepvariant.py as well. (https://github.com/google/deepvariant/i",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:2195,modifiability,version,version,2195,"ant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed in https://github.com/google/deepvariant/commit/f101492). - Added `--sample_name` flag to postprocess_variant.py and applied it in run_deepvariant.py as well. (https://github.com/google/deepvariant/issues/334 fixed in https://github.com/google/deepvariant/commit/a81d629)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:192,performance,error,errors,192,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:213,performance,error,errors,213,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:239,performance,error,errors,239,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1280,performance,time,time,1280," which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:192,safety,error,errors,192,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:213,safety,error,errors,213,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:239,safety,error,errors,239,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:308,safety,input,input,308,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:856,safety,input,input,856,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1148,safety,input,input,1148,"v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/goo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:390,security,control,controlled,390,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:513,security,model,model,513,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:592,security,model,model-case-study,592,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1415,security,model,models,1415,"t_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed in https://github.com/google/deepvariant/commit/f101492). - Added `--sample_name` flag to postprocess_variant.py and applied it in run_",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1486,security,model,model,1486," for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed in https://github.com/google/deepvariant/commit/f101492). - Added `--sample_name` flag to postprocess_variant.py and applied it in run_deepvariant.py as well. (https://github.com/google/deepvariant/issues/3",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1872,security,model,modelling,1872,"ant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed in https://github.com/google/deepvariant/commit/f101492). - Added `--sample_name` flag to postprocess_variant.py and applied it in run_deepvariant.py as well. (https://github.com/google/deepvariant/issues/334 fixed in https://github.com/google/deepvariant/commit/a81d629)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:390,testability,control,controlled,390,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:93,usability,indicat,indicate,93,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:192,usability,error,errors,192,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:213,usability,error,errors,213,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:239,usability,error,errors,239,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:308,usability,input,input,308,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:856,usability,input,input,856,"DeepVariant v1.0 releases new features and accuracy improvements sufficiently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1066,usability,user,users,1066,"iciently substantial to indicate a major version of v1.0. Compared to DeepVariant v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1148,usability,input,input,1148,"v0.10, these changes reduce Illumina WGS errors by 24%, exome errors by 19%, and PacBio errors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/goo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1239,usability,User,Users,1239,"ors by 52%. * Added ALT-aligned pileups, which creates additional input channels where reads are also aligned to the candidate ALT alleles. This is controlled by the flag `--alt_aligned_pileup`. `--alt_aligned_pileup=diff_channels` is now [default for DeepVariant PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1496,usability,document,documentation,1496,"nt PacBio model](https://github.com/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed in https://github.com/google/deepvariant/commit/f101492). - Added `--sample_name` flag to postprocess_variant.py and applied it in run_deepvariant.py as well. (https://github.com/google/deepvariant/issues/334 fixed in ht",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1536,usability,tool,tool,1536,"/google/deepvariant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed in https://github.com/google/deepvariant/commit/f101492). - Added `--sample_name` flag to postprocess_variant.py and applied it in run_deepvariant.py as well. (https://github.com/google/deepvariant/issues/334 fixed in https://github.com/google/deepvariant",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v1.0.0:1590,usability,document,documentation,1590,"ant/blob/r1.0/docs/deepvariant-pacbio-model-case-study.md). This substantially improves INDEL accuracy for PacBio data. . * Added new flag `--sort_by_haplotypes` to optionally allow creating pileup images with reads sorted by haplotype. Haplotype sorting is based on the HP tag that must be present in input BAM, and `--parse_sam_aux_fields` needs to be set as well. This substantially improves INDEL accuracy for PacBio data. * The PacBio case study now includes instructions for two-pass calling, which allows users to take advantage of the `--sort_by_haplotypes` by phasing variants and the input reads. Accuracy metrics for both single pass calling and two-pass calling are shown. Users may choose whether to run a second time for higher accuracy. * Default of `--min_mapping_quality` in make_examples.py changed from 10 to 5. This improves accuracy of all models (WGS, WES, and PACBIO). * Included a new hybrid illumina+pacbio model and documentation. * Added show_examples, a tool for showing examples as pileup image files, with documentation. * Cleaned up unused experimental flags: `--sequencing_type_image` and `--custom_pileup_image`. * Added `--only_keep_pass` flag to postprocess_variants.py to optionally only keep PASS calls in output VCF. * Addressed GitHub issues:. - Fixed the `binarize` function in modelling.py. (https://github.com/google/deepvariant/issues/286 fixed in https://github.com/google/deepvariant/commit/db87d77). - Fixed quoting issues for `--regions` when using run_deepvariant.py. (https://github.com/google/deepvariant/issues/305 fixed in https://github.com/google/deepvariant/commit/fbacd35). - Added `--version` to run_deepvariant.py. (https://github.com/google/deepvariant/issues/332 fixed in https://github.com/google/deepvariant/commit/f101492). - Added `--sample_name` flag to postprocess_variant.py and applied it in run_deepvariant.py as well. (https://github.com/google/deepvariant/issues/334 fixed in https://github.com/google/deepvariant/commit/a81d629)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v1.0.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:613,availability,consist,consistency,613,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:2,deployability,Updat,Update,2,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:464,deployability,releas,releases,464,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:102,energy efficiency,model,model,102,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:249,integrability,sub,substantial,249,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:204,interoperability,standard,standard,204,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:95,modifiability,Pac,PacBio,95,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:137,modifiability,Pac,PacBio,137,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:2,safety,Updat,Update,2,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:287,safety,detect,detection,287,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:2,security,Updat,Update,2,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:102,security,model,model,102,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:287,security,detect,detection,287,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:222,testability,coverag,coverages,222,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:613,usability,consist,consistency,613,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.10.0:715,usability,User,Users,715,"* Update to Python3 and TensorFlow2: We use Python3.6, and pin to TensorFlow 2.0.0. * Improved PacBio model for amplified libraries: the PacBio HiFi training data now includes amplified libraries at both standard and high coverages. This provides a substantial accuracy boost to variant detection from amplified HiFi data. * Turned off `ws_use_window_selector_model` by default: This flag was turned on by default in [v0.7.0](https://github.com/google/deepvariant/releases/tag/v0.7.0). After the discussion in [issue #272](https://github.com/google/deepvariant/issues/272), we decided to turn this off to improve consistency and accuracy, at the trade-off of a 7% increase in runtime of the `make_examples` step. . Users may add `--make_examples_extra_args ""ws_use_window_selector_model=true""` to save some runtime at the expense of accuracy.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.10.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:200,availability,error,error,200,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:1017,availability,avail,available,1017,"e, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:1583,availability,down,down,1583,"s:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some of the haplotypes (with not enough read support) are now discarded. This results in fewer reads needing to be realigned. Theoretically, this fix should improve FP rate. It also helps to resolve [a GitHub issue](https://github.com/google/deepvariant/issues/209). Changes to flags:. * Added `--sample_name` flag to run_deepvariant.py. . * Reduced default for `vsc_min_fraction_indels` to 0.06 for Illumina data (`WGS` and `WES` mode) which increases sensitivity. * Expanded the use of `--reads` to take multiple BAMs in a comma-separated list. * Use `--ref` for CR",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:16,deployability,releas,release,16,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:573,deployability,releas,release,573,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:206,energy efficiency,reduc,reduction,206,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:249,energy efficiency,reduc,reducing,249,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:319,energy efficiency,model,model,319,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:1259,energy efficiency,model,models,1259,"l candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some of the haplotypes (with not enough read support) are now discarded. This results in fewer reads needing to be realigned. Theoretically, this fix should improve FP rate. It also helps to resolve [a GitHub issue](https://github.com/google/de",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:2360,energy efficiency,Reduc,Reduced,2360,"GS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some of the haplotypes (with not enough read support) are now discarded. This results in fewer reads needing to be realigned. Theoretically, this fix should improve FP rate. It also helps to resolve [a GitHub issue](https://github.com/google/deepvariant/issues/209). Changes to flags:. * Added `--sample_name` flag to run_deepvariant.py. . * Reduced default for `vsc_min_fraction_indels` to 0.06 for Illumina data (`WGS` and `WES` mode) which increases sensitivity. * Expanded the use of `--reads` to take multiple BAMs in a comma-separated list. * Use `--ref` for CRAM by default. (Set `--use_ref_for_cram` to true by default). * Added support for BAM output for realigner debugging. See `--realigner_diagnostics` and `--emit_realigned_reads` flags in realigner.py.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:377,integrability,buffer,buffer,377,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:1453,integrability,buffer,buffer,1453," * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some of the haplotypes (with not enough read support) are now discarded. This results in fewer reads needing to be realigned. Theoretically, this fix should improve FP rate. It also helps to resolve [a GitHub issue](https://github.com/google/deepvariant/issues/209). Changes to flags:. * Added `--sample_name` flag to run_deepvariant.py. . * Reduced default for `vsc_min_fraction_indels` to 0.06 for Illumina data (`WGS` and `WES` mode) w",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:488,modifiability,Pac,PacBio,488,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:759,modifiability,paramet,parameters,759,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:1602,modifiability,PAC,PACBIO,1602,"n:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some of the haplotypes (with not enough read support) are now discarded. This results in fewer reads needing to be realigned. Theoretically, this fix should improve FP rate. It also helps to resolve [a GitHub issue](https://github.com/google/deepvariant/issues/209). Changes to flags:. * Added `--sample_name` flag to run_deepvariant.py. . * Reduced default for `vsc_min_fraction_indels` to 0.06 for Illumina data (`WGS` and `WES` mode) which increases sensitivity. * Expanded the use of `--reads` to take multiple BAMs in a comma-separated list. * Use `--ref` for CRAM by default. (Set ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:200,performance,error,error,200,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:459,performance,Improved perform,Improved performance,459,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:43,reliability,pra,practices,43,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:1017,reliability,availab,available,1017,"e, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:200,safety,error,error,200,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:1017,safety,avail,available,1017,"e, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:319,security,model,model,319,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:1017,security,availab,available,1017,"e, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:1259,security,model,models,1259,"l candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some of the haplotypes (with not enough read support) are now discarded. This results in fewer reads needing to be realigned. Theoretically, this fix should improve FP rate. It also helps to resolve [a GitHub issue](https://github.com/google/de",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:446,testability,coverag,coverages,446,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:1566,testability,coverag,coverage,1566,"ll release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some of the haplotypes (with not enough read support) are now discarded. This results in fewer reads needing to be realigned. Theoretically, this fix should improve FP rate. It also helps to resolve [a GitHub issue](https://github.com/google/deepvariant/issues/209). Changes to flags:. * Added `--sample_name` flag to run_deepvariant.py. . * Reduced default for `vsc_min_fraction_indels` to 0.06 for Illumina data (`WGS` and `WES` mode) which increases sensitivity. * Expanded the use of `--reads` to take multiple BAMs in a comma-separated list. * Use",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:94,usability,visual,visualizations,94,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:131,usability,visual,visual,131,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:200,usability,error,error,200,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:468,usability,perform,performance,468,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:593,usability,document,documentation,593,"* In the v0.9.0 release, we introduce best practices for merging DeepVariant samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:1070,usability,Visual,Visualization,1070,"samples. * Added visualizations of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some of the haplotypes (with not enough read support) are n",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:1102,usability,document,documentation,1102,"of variant output for visual QC and inspection. * Improved Indel accuracy for WGS and WES (error reduction of 36% on the WGS case study) by reducing Indel candidate generation threshold to 0.06. * Improved WES model accuracy by expanding training regions with a 100bp buffer around capture regions and additional training at lower exome coverages. * Improved performance for new PacBio Sequel II chemistry and CCS v4 algorithm by training on additional data. Full release notes:. New documentation:. * Added [a tutorial for merging WES trio](https://github.com/google/deepvariant/blob/r0.9/docs/trio-merge-case-study.md). * Added recommended GLnexus parameters for merging [WGS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some of the haplotypes (with not enough read support) are now discarded. This results in fe",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:2063,usability,support,support,2063,"GS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some of the haplotypes (with not enough read support) are now discarded. This results in fewer reads needing to be realigned. Theoretically, this fix should improve FP rate. It also helps to resolve [a GitHub issue](https://github.com/google/deepvariant/issues/209). Changes to flags:. * Added `--sample_name` flag to run_deepvariant.py. . * Reduced default for `vsc_min_fraction_indels` to 0.06 for Illumina data (`WGS` and `WES` mode) which increases sensitivity. * Expanded the use of `--reads` to take multiple BAMs in a comma-separated list. * Use `--ref` for CRAM by default. (Set `--use_ref_for_cram` to true by default). * Added support for BAM output for realigner debugging. See `--realigner_diagnostics` and `--emit_realigned_reads` flags in realigner.py.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:2200,usability,help,helps,2200,"GS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some of the haplotypes (with not enough read support) are now discarded. This results in fewer reads needing to be realigned. Theoretically, this fix should improve FP rate. It also helps to resolve [a GitHub issue](https://github.com/google/deepvariant/issues/209). Changes to flags:. * Added `--sample_name` flag to run_deepvariant.py. . * Reduced default for `vsc_min_fraction_indels` to 0.06 for Illumina data (`WGS` and `WES` mode) which increases sensitivity. * Expanded the use of `--reads` to take multiple BAMs in a comma-separated list. * Use `--ref` for CRAM by default. (Set `--use_ref_for_cram` to true by default). * Added support for BAM output for realigner debugging. See `--realigner_diagnostics` and `--emit_realigned_reads` flags in realigner.py.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.9.0:2655,usability,support,support,2655,"GS](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWGS_v1.yml) and [WES](https://github.com/google/deepvariant/blob/r0.9/deepvariant/cohort_best_practice/DeepVariantWES_v1.yml) data (also available as built-in presets in GLnexus v1.2.2+). * Visualization functionality and documentation: [VCF stats report](https://github.com/google/deepvariant/blob/r0.9/docs/deepvariant-vcf-stats-report.md). Changes to Docker images, code, and models:. * Docker images now live in Docker Hub [google/deepvariant](https://hub.docker.com/r/google/deepvariant) in addition to gcr.io/deepvariant-docker/deepvariant. . * For WES, added 100bps buffer to the capture regions when creating training examples. * For WES, increased training examples with lower coverage exomes, down to 30x. * For PACBIO, added training data for Sequel II v2 chemistry and samples processed with CCS v4 algorithm. * Loosened the restriction that the BAM files need to have exactly one sample_name. Now if there are multiple samples in the header, use the first one. If there was none, use a default. * Changes in realigner code. Realigner aligns reads to haplotypes first and then realigns them to the reference. With this change some of the haplotypes (with not enough read support) are now discarded. This results in fewer reads needing to be realigned. Theoretically, this fix should improve FP rate. It also helps to resolve [a GitHub issue](https://github.com/google/deepvariant/issues/209). Changes to flags:. * Added `--sample_name` flag to run_deepvariant.py. . * Reduced default for `vsc_min_fraction_indels` to 0.06 for Illumina data (`WGS` and `WES` mode) which increases sensitivity. * Expanded the use of `--reads` to take multiple BAMs in a comma-separated list. * Use `--ref` for CRAM by default. (Set `--use_ref_for_cram` to true by default). * Added support for BAM output for realigner debugging. See `--realigner_diagnostics` and `--emit_realigned_reads` flags in realigner.py.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.9.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:1015,availability,down,downsampled,1015,"se, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvaria",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2379,availability,sli,slightly,2379,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:16,deployability,releas,release,16,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:396,deployability,releas,release,396,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2282,deployability,stage,stage,2282,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2874,deployability,configurat,configuration,2874,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:56,energy efficiency,model,model,56,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:88,energy efficiency,model,model,88,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:152,energy efficiency,model,models,152,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:483,energy efficiency,model,models,483,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:1192,energy efficiency,reduc,reduce,1192,"pt](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2856,energy efficiency,estimat,estimator,2856,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2919,energy efficiency,CPU,CPU,2919,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2927,energy efficiency,GPU,GPU,2927,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2874,integrability,configur,configuration,2874,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2228,interoperability,Standard,Standard,2228,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2848,interoperability,specif,specify,2848,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:66,modifiability,Pac,PacBio,66,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:236,modifiability,Pac,PacBio,236,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:358,modifiability,pac,pacbio-ccs-with-deepvariant,358,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2874,modifiability,configur,configuration,2874,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:1395,performance,memor,memory,1395,"lease also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better acc",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2919,performance,CPU,CPU,2919,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2927,performance,GPU,GPU,2927,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2379,reliability,sli,slightly,2379,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:56,security,model,model,56,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:88,security,model,model,88,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:152,security,model,models,152,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:483,security,model,models,483,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2866,security,session,session,2866,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2874,security,configur,configuration,2874,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:3029,security,modif,modify,3029,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:948,testability,coverag,coverage,948,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:534,usability,user,users,534,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:563,usability,command,command,563,"With the v0.8.0 release, we introduce a new DeepVariant model for PacBio CCS data. This model can be run in the same manner as the Illumina WGS and WES models. For more details, see our [manuscript](https://doi.org/10.1101/519025) with PacBio and our [blog post](https://google.github.io/deepvariant/posts/2019-01-14-highly-accurate-snp-and-indel-calling-on-pacbio-ccs-with-deepvariant/). . This release also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blo",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:1395,usability,memor,memory,1395,"lease also includes general improvements to DeepVariant and the Illumina WGS and WES models. These include:. * New script that lets the users run DeepVariant in one command. See [Quick Start](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better acc",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:1601,usability,support,support,1601,"com/google/deepvariant/blob/r0.8/docs/deepvariant-quick-start.md). * Improved accuracy for NovaSeq samples, especially PCR-Free ones, achieved by adding NovaSeq samples to the training data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Improved accuracy for low coverage (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_qual",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:1950,usability,support,support,1950,"ge (30x and below), achieved by training on a broader mix of downsampled data. See [DeepVariant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribu",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2040,usability,support,support,2040,"riant training data](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details-training-data.md). * Overall speed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the numb",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2620,usability,user,users,2620,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2658,usability,minim,minimum,2658,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2720,usability,user,users,2720,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2758,usability,minim,minimum,2758,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:2839,usability,user,users,2839,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.8.0:3020,usability,user,users,3020,"ed improvements which reduce runtime by ~24% on WGS case study:. * Speed improvements in querying SAM files and doing calculations with Reads and Ranges. . * Fewer unnecessary copies when constructing DeBrujin graphs. * Less memory usage when writing BED, FASTQ, GFF, SAM, and VCF files. * Speed improvements in postprocess_variants when creating gVCFs - achieved by combining writing and merging for both VCF and gVCF. * Improved support for CRAM files, allowing the use of a provided reference file instead of the embedded reference. See the `use_ref_for_cram` flag below. New optional flags:. * `make_examples.py`. * `use_ref_for_cram`:. Default is False (using the embedded reference in the CRAM file). If set to True, `--ref` will be used as the reference instead. See [CRAM support](https://github.com/google/deepvariant/blob/r0.8/docs/deepvariant-details.md#cram-support) section for more details. * `parse_sam_aux_fields` and `use_original_quality_scores`:. Option to read base quality scores from OQ tag. To use this option, set both flags to true. Standard GATK process includes a score re-calibration stage where base quality scores are re-calibrated using special software. DeepVariant produces a slightly better accuracy when original scores are used. Usually original scores are stored in a BAM file under OQ optional tag. This feature will allow to read quality scores from OQ tag instead of QUAL field. * `min_base_quality`:. Allowed users to try different thresholds for minimum base quality score. * `min_mapping_quality`:. Allowed users to try different thresholds for minimum mapping quality score. * `call_variants.py`. * `config_string`:. Allowed users to specify estimator session configuration through a flag when running on CPU and GPU, thanks to the contribution of @A-Tsai from ATGENOMIX in #159. * `num_mappers`:. Allowed users to modify the number of dataset mappers through a flag, thanks to the contribution of @fo40225 from National Taiwan University Hospital in #152.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.8.0
https://github.com/google/deepvariant/releases/tag/v0.7.2:678,availability,down,downstream,678,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:1156,availability,avail,available,1156,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:1179,availability,failur,failure,1179,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:9,deployability,updat,updated,9,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:278,deployability,Upgrad,Upgrade,278,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:412,deployability,contain,container,412,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:1151,deployability,log,logs,1151,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:1179,deployability,fail,failure,1179,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:829,energy efficiency,model,models,829,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:962,energy efficiency,model,models,962,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:986,energy efficiency,Cloud,Cloud,986,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:585,integrability,configur,configurable,585,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:808,interoperability,specif,specific,808,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:941,interoperability,specif,specific-deepvariant-models,941,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:278,modifiability,Upgrad,Upgrade,278,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:585,modifiability,configur,configurable,585,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:704,performance,perform,performance,704,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:1179,performance,failur,failure,1179,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:1156,reliability,availab,available,1156,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:1179,reliability,fail,failure,1179,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:9,safety,updat,updated,9,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:1151,safety,log,logs,1151,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:1156,safety,avail,available,1156,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:9,security,updat,updated,9,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:585,security,configur,configurable,585,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:829,security,model,models,829,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:962,security,model,models,962,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:1151,security,log,logs,1151,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:1156,security,availab,available,1156,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:1151,testability,log,logs,1151,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:405,usability,guid,guides,405,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.2:704,usability,perform,performance,704,"* Htslib updated to v1.9, fixing an outstanding CRAM [issue](https://github.com/google/deepvariant/issues/38). * Fix for the [issue](https://github.com/google/deepvariant/issues/112) of non-deterministic output caused by changing number of shards in the make_example process. * Upgrade to TensorFlow v1.12. * Speed improvements in make_examples via the use of a [flat_hash_map](https://abseil.io/docs/cpp/guides/container). * Speed improvements in call_variants. . * The genotypes of low-quality (GQ < 20) homozygous reference calls are set to `./.` instead of `0/0`. The threshold is configurable via `--cnn_homref_call_min_gq` flag in `postprocess_variants.py`. This improves downstream cohort merging performance based on our internal investigation in a [""Improved non-human variant calling using species-specific DeepVariant models""](https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/) blog. * Google Cloud Runner:. - Localize BED region files (given via --region flag), fixing an outstanding [issue](https://github.com/google/deepvariant/issues/116). - Make worker logs available in case of a failure inside DeepVariant.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.2
https://github.com/google/deepvariant/releases/tag/v0.7.1:46,deployability,version,version,46,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:81,deployability,contain,contains,81,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:104,deployability,Updat,Update,104,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:126,deployability,version,version,126,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:134,deployability,depend,dependency,134,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:173,deployability,build,build,173,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:487,deployability,log,logs,487,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:328,energy efficiency,Cloud,Cloud,328,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:516,energy efficiency,Cloud,Cloud,516,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:660,energy efficiency,GPU,GPU,660,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:46,integrability,version,version,46,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:126,integrability,version,version,126,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:134,integrability,depend,dependency,134,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:46,modifiability,version,version,46,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:126,modifiability,version,version,126,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:134,modifiability,depend,dependency,134,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:629,performance,perform,performance,629,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:660,performance,GPU,GPU,660,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:104,safety,Updat,Update,104,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:134,safety,depend,dependency,134,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:487,safety,log,logs,487,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:104,security,Updat,Update,104,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:462,security,control,control,462,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:487,security,log,logs,487,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:134,testability,depend,dependency,134,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:462,testability,control,control,462,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:487,testability,log,logs,487,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:162,usability,support,support,162,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:198,usability,Document,Documentation,198,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:230,usability,command,commands,230,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:376,usability,user,users,376,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.1:629,usability,perform,performance,629,* Fix for postprocess_variants - the previous version crashes if the first shard contains no records. * Update the TensorFlow version dependency to 1.11. * Added support to build on Ubuntu 18.04. * Documentation changes: Move the commands in WGS and WES Case Studies into scripts under scripts/ to make it easy to run. * Google Cloud runner:. - Added `batch_size` in case the users need to change it for the call_variants step. - Added `logging_interval_sec` to control how often worker logs are written into Google Cloud Storage. - Improved the use of `call_variants`: only one `call_variants` is run on each machine for better performance. This improved the GPU cost and speed.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.1
https://github.com/google/deepvariant/releases/tag/v0.7.0:5,deployability,releas,release,5,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:158,deployability,releas,release,158,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:170,deployability,Updat,Update,170,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:188,deployability,version,version,188,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:74,energy efficiency,reduc,reduce,74,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:495,energy efficiency,Cloud,Cloud,495,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:519,energy efficiency,optim,optimizations,519,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:1016,energy efficiency,model,model,1016,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:1168,energy efficiency,optim,optimizations,1168,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:1383,energy efficiency,model,models,1383,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:188,integrability,version,version,188,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:416,integrability,compon,components,416,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:913,integrability,pub,pubs,913,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:416,interoperability,compon,components,416,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:188,modifiability,version,version,188,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:416,modifiability,compon,components,416,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:509,modifiability,Extens,Extensive,509,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:851,modifiability,paramet,parameters,851,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:31,performance,perform,performance,31,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:264,performance,perform,performance,264,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:519,performance,optimiz,optimizations,519,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:652,performance,time,times,652,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:865,performance,tune,tuned,865,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:952,performance,perform,performance,952,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:1168,performance,optimiz,optimizations,1168,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:1366,performance,tune,tune,1366,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:170,safety,Updat,Update,170,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:170,security,Updat,Update,170,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:568,security,sign,significant,568,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:1016,security,model,model,1016,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:1071,security,control,controlled,1071,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:1383,security,model,models,1383,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:1071,testability,control,controlled,1071,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:31,usability,perform,performance,31,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:264,usability,perform,performance,264,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:331,usability,support,support,331,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:952,usability,perform,performance,952,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:1400,usability,support,support,1400,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.7.0:1505,usability,support,support,1505,"This release includes numerous performance improvements that collectively reduce the runtime of DeepVariant by about 65%. . A few highlighted changes in this release:. * Update TensorFlow version to 1.9 built by default with [Intel MKL](https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel%C2%AE_mkl_dnn) support, speeding up `call_variants` runtime by more than 3x compared to v0.6. * The components that use TensorFlow (both inference and training) can now be run on Cloud TPUs. * Extensive optimizations in `make_examples` which result in significant runtime improvements. For example, `make_examples` now runs more than 3 times faster in the WGS case study than v0.6. * New realigner implementation ([fast_pass_aligner.cc](https://github.com/google/deepvariant/tree/r0.7/deepvariant/realigner/fast_pass_aligner.cc)) with parameters re-tuned using [Vizier](https://ai.google/research/pubs/pub46180) for better accuracy and performance. * Changed window selector to use a linear decision model for choosing realignment candidates. This can be controlled by a flag. `-ws_use_window_selector_model` which is now on by default. . * Many micro-optimizations throughout the codebase. * Added a new [training case study](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-tpu-training-case-study.md) showing how to train and fine-tune DeepVariant models. * Added [support for CRAM files](https://github.com/google/deepvariant/blob/r0.7/docs/deepvariant-details.md#cram-support)",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.7.0
https://github.com/google/deepvariant/releases/tag/v0.6.1:2,deployability,Updat,Update,2,* Update the build scripts and header files so that it builds successfully on Debian. * Include a script that demonstrates how to build the CLIF binary we released. * Update GCP runner's default #cores. * Small code fix: Fix the call_variants issue of crashing on empty shards.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.1
https://github.com/google/deepvariant/releases/tag/v0.6.1:13,deployability,build,build,13,* Update the build scripts and header files so that it builds successfully on Debian. * Include a script that demonstrates how to build the CLIF binary we released. * Update GCP runner's default #cores. * Small code fix: Fix the call_variants issue of crashing on empty shards.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.1
https://github.com/google/deepvariant/releases/tag/v0.6.1:55,deployability,build,builds,55,* Update the build scripts and header files so that it builds successfully on Debian. * Include a script that demonstrates how to build the CLIF binary we released. * Update GCP runner's default #cores. * Small code fix: Fix the call_variants issue of crashing on empty shards.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.1
https://github.com/google/deepvariant/releases/tag/v0.6.1:130,deployability,build,build,130,* Update the build scripts and header files so that it builds successfully on Debian. * Include a script that demonstrates how to build the CLIF binary we released. * Update GCP runner's default #cores. * Small code fix: Fix the call_variants issue of crashing on empty shards.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.1
https://github.com/google/deepvariant/releases/tag/v0.6.1:155,deployability,releas,released,155,* Update the build scripts and header files so that it builds successfully on Debian. * Include a script that demonstrates how to build the CLIF binary we released. * Update GCP runner's default #cores. * Small code fix: Fix the call_variants issue of crashing on empty shards.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.1
https://github.com/google/deepvariant/releases/tag/v0.6.1:167,deployability,Updat,Update,167,* Update the build scripts and header files so that it builds successfully on Debian. * Include a script that demonstrates how to build the CLIF binary we released. * Update GCP runner's default #cores. * Small code fix: Fix the call_variants issue of crashing on empty shards.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.1
https://github.com/google/deepvariant/releases/tag/v0.6.1:196,energy efficiency,core,cores,196,* Update the build scripts and header files so that it builds successfully on Debian. * Include a script that demonstrates how to build the CLIF binary we released. * Update GCP runner's default #cores. * Small code fix: Fix the call_variants issue of crashing on empty shards.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.1
https://github.com/google/deepvariant/releases/tag/v0.6.1:2,safety,Updat,Update,2,* Update the build scripts and header files so that it builds successfully on Debian. * Include a script that demonstrates how to build the CLIF binary we released. * Update GCP runner's default #cores. * Small code fix: Fix the call_variants issue of crashing on empty shards.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.1
https://github.com/google/deepvariant/releases/tag/v0.6.1:167,safety,Updat,Update,167,* Update the build scripts and header files so that it builds successfully on Debian. * Include a script that demonstrates how to build the CLIF binary we released. * Update GCP runner's default #cores. * Small code fix: Fix the call_variants issue of crashing on empty shards.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.1
https://github.com/google/deepvariant/releases/tag/v0.6.1:2,security,Updat,Update,2,* Update the build scripts and header files so that it builds successfully on Debian. * Include a script that demonstrates how to build the CLIF binary we released. * Update GCP runner's default #cores. * Small code fix: Fix the call_variants issue of crashing on empty shards.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.1
https://github.com/google/deepvariant/releases/tag/v0.6.1:167,security,Updat,Update,167,* Update the build scripts and header files so that it builds successfully on Debian. * Include a script that demonstrates how to build the CLIF binary we released. * Update GCP runner's default #cores. * Small code fix: Fix the call_variants issue of crashing on empty shards.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.1
https://github.com/google/deepvariant/releases/tag/v0.6.0:269,availability,replic,replicates,269,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:330,availability,replic,replicates,330,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:5,deployability,releas,release,5,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:91,deployability,releas,released,91,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:190,deployability,releas,release,190,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:27,energy efficiency,model,model,27,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:110,energy efficiency,model,model,110,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:244,energy efficiency,model,model,244,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:449,energy efficiency,model,model,449,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:739,energy efficiency,cloud,cloud,739,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:381,integrability,pub,public,381,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:479,performance,time,time,479,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:787,performance,I/O,I/O,787,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:719,safety,input,inputs,719,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:923,safety,Input,Inputs,923,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:1019,safety,input,inputs-and-outputs,1019,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:27,security,model,model,27,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:110,security,model,model,110,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:244,security,model,model,244,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:449,security,model,model,449,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:508,usability,help,help,508,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:719,usability,input,inputs,719,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:767,usability,support,support,767,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:923,usability,Input,Inputs,923,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:1019,usability,input,inputs-and-outputs,1019,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:1055,usability,user,user,1055,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.6.0:1060,usability,guid,guide,1060,"This release has a new WGS model that has major accuracy improvement on PCR+ data. We also released a new WES model that has some minor accuracy improvement. A few important changes in this release:. 1. Changes in the training data for the WGS model:. * Addition:. * 3 replicates of HG001 (PCR+, HiSeqX) provided by DNAnexus. * 2 replicates of HG001 (PCR+, NovaSeq) from BaseSpace public data. * Removal:. * WES data. (In v0.5.0, we trained our WGS model with WGS+WES data. This time we found that it didn’t help with WGS accuracy, so we removed them). 1. Improved training data labels. See [haplotype_labeler.py](https://github.com/google/deepvariant/tree/r0.6/deepvariant/labeler/haplotype_labeler.py). 1. For direct inputs/outputs from cloud storage, we no longer support direct file I/O (like gs://deepvariant) due to bugs in htslib. Instead we recommend using gcsfuse to read/write data directly on GCS buckets. See “[Inputs and Outputs](https://github.com/google/deepvariant/blob/r0.6/docs/deepvariant-details.md#inputs-and-outputs)” in DeepVariant user guide.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.6.0
https://github.com/google/deepvariant/releases/tag/v0.5.2:5,deployability,releas,release,5,This release is a bugfix release for gVCF creation. See https://github.com/google/deepvariant/issues/58 for details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.2
https://github.com/google/deepvariant/releases/tag/v0.5.2:25,deployability,releas,release,25,This release is a bugfix release for gVCF creation. See https://github.com/google/deepvariant/issues/58 for details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.2
https://github.com/google/deepvariant/releases/tag/v0.5.1:5,deployability,releas,release,5,This release fixes issue #27 and adds support for creating the MIN_DP field in gVCF records.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.1
https://github.com/google/deepvariant/releases/tag/v0.5.1:38,usability,support,support,38,This release fixes issue #27 and adds support for creating the MIN_DP field in gVCF records.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.1
https://github.com/google/deepvariant/releases/tag/v0.5.0:1004,availability,replic,replicates,1004,"e two separate models for calling genome and exome sequencing data. Significant improvement of Indel F1 on exome data. * On exome sequencing data (HG002):. - Indel F1 0.936959 --> 0.961724; SNP F1 0.998636 --> 0.998962. * On whole genome sequencing data (HG002):. - Indel F1 0.996632 --> 0.996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1345,availability,checkpoint,checkpoint,1345,"pability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1427,availability,down,downsample,1427,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1691,availability,operat,operation,1691,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1768,availability,robust,robust,1768,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:3,deployability,Releas,Release,3,"1. Release two separate models for calling genome and exome sequencing data. Significant improvement of Indel F1 on exome data. * On exome sequencing data (HG002):. - Indel F1 0.936959 --> 0.961724; SNP F1 0.998636 --> 0.998962. * On whole genome sequencing data (HG002):. - Indel F1 0.996632 --> 0.996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to elimi",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1365,deployability,continu,continue,1365," gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1597,deployability,Updat,Update,1597,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:24,energy efficiency,model,models,24,"1. Release two separate models for calling genome and exome sequencing data. Significant improvement of Indel F1 on exome data. * On exome sequencing data (HG002):. - Indel F1 0.936959 --> 0.961724; SNP F1 0.998636 --> 0.998962. * On whole genome sequencing data (HG002):. - Indel F1 0.996632 --> 0.996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to elimi",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:671,energy efficiency,model,models,671,"1. Release two separate models for calling genome and exome sequencing data. Significant improvement of Indel F1 on exome data. * On exome sequencing data (HG002):. - Indel F1 0.936959 --> 0.961724; SNP F1 0.998636 --> 0.998962. * On whole genome sequencing data (HG002):. - Indel F1 0.996632 --> 0.996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to elimi",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:858,energy efficiency,model,model,858,"1. Release two separate models for calling genome and exome sequencing data. Significant improvement of Indel F1 on exome data. * On exome sequencing data (HG002):. - Indel F1 0.936959 --> 0.961724; SNP F1 0.998636 --> 0.998962. * On whole genome sequencing data (HG002):. - Indel F1 0.996632 --> 0.996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to elimi",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1296,energy efficiency,model,model,1296,"996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now p",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1334,energy efficiency,model,model,1334,"1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1608,energy efficiency,model,model,1608,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1714,energy efficiency,model,model,1714,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1757,energy efficiency,model,model,1757,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:2353,energy efficiency,cloud,cloud,2353,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:2410,energy efficiency,GPU,GPUs,2410,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:710,interoperability,compatib,compatible,710,"1. Release two separate models for calling genome and exome sequencing data. Significant improvement of Indel F1 on exome data. * On exome sequencing data (HG002):. - Indel F1 0.936959 --> 0.961724; SNP F1 0.998636 --> 0.998962. * On whole genome sequencing data (HG002):. - Indel F1 0.996632 --> 0.996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to elimi",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:2410,performance,GPU,GPUs,2410,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1345,reliability,checkpoint,checkpoint,1345,"pability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1768,reliability,robust,robust,1768,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:527,safety,input,input,527,"1. Release two separate models for calling genome and exome sequencing data. Significant improvement of Indel F1 on exome data. * On exome sequencing data (HG002):. - Indel F1 0.936959 --> 0.961724; SNP F1 0.998636 --> 0.998962. * On whole genome sequencing data (HG002):. - Indel F1 0.996632 --> 0.996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to elimi",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1597,safety,Updat,Update,1597,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1614,safety,input,input,1614,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1736,safety,test,tests,1736,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1768,safety,robust,robust,1768,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1778,safety,input,input,1778,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:24,security,model,models,24,"1. Release two separate models for calling genome and exome sequencing data. Significant improvement of Indel F1 on exome data. * On exome sequencing data (HG002):. - Indel F1 0.936959 --> 0.961724; SNP F1 0.998636 --> 0.998962. * On whole genome sequencing data (HG002):. - Indel F1 0.996632 --> 0.996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to elimi",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:77,security,Sign,Significant,77,"1. Release two separate models for calling genome and exome sequencing data. Significant improvement of Indel F1 on exome data. * On exome sequencing data (HG002):. - Indel F1 0.936959 --> 0.961724; SNP F1 0.998636 --> 0.998962. * On whole genome sequencing data (HG002):. - Indel F1 0.996632 --> 0.996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to elimi",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:671,security,model,models,671,"1. Release two separate models for calling genome and exome sequencing data. Significant improvement of Indel F1 on exome data. * On exome sequencing data (HG002):. - Indel F1 0.936959 --> 0.961724; SNP F1 0.998636 --> 0.998962. * On whole genome sequencing data (HG002):. - Indel F1 0.996632 --> 0.996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to elimi",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:858,security,model,model,858,"1. Release two separate models for calling genome and exome sequencing data. Significant improvement of Indel F1 on exome data. * On exome sequencing data (HG002):. - Indel F1 0.936959 --> 0.961724; SNP F1 0.998636 --> 0.998962. * On whole genome sequencing data (HG002):. - Indel F1 0.996632 --> 0.996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to elimi",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1296,security,model,model,1296,"996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now p",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1334,security,model,model,1334,"1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows ",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1597,security,Updat,Update,1597,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1608,security,model,model,1608,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1714,security,model,model,1714,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1757,security,model,model,1757,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1736,testability,test,tests,1736,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:485,usability,support,support,485,"1. Release two separate models for calling genome and exome sequencing data. Significant improvement of Indel F1 on exome data. * On exome sequencing data (HG002):. - Indel F1 0.936959 --> 0.961724; SNP F1 0.998636 --> 0.998962. * On whole genome sequencing data (HG002):. - Indel F1 0.996632 --> 0.996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to elimi",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:527,usability,input,input,527,"1. Release two separate models for calling genome and exome sequencing data. Significant improvement of Indel F1 on exome data. * On exome sequencing data (HG002):. - Indel F1 0.936959 --> 0.961724; SNP F1 0.998636 --> 0.998962. * On whole genome sequencing data (HG002):. - Indel F1 0.996632 --> 0.996684; SNP F1 0.999495 --> 0.999542. 1. Provide capability to produce gVCF files as output from DeepVariant [[doc](https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to elimi",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1614,usability,input,input,1614,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1778,usability,input,input,1778,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:1841,usability,visual,visualizing,1841,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.5.0:2327,usability,workflow,workflows,2327,"https://github.com/google/deepvariant/blob/r0.5/docs/deepvariant-gvcf-support.md)]:. gVCF files are required as input for analyses that create a set of variants in a cohort of individuals, such as cohort merging or joint genotyping. 1. Training data:. All models are trained with a benchmarking-compatible strategy: That is, *we never train on any data from the HG002 sample, or from chromosome 20 from any sample.*. * Whole genome sequencing model:. We used training data from both genome sequencing data as well as exome sequencing data. - WGS data:. - HG001: 1 from PrecisionFDA, and 8 replicates from Verily. - HG005: 2 from Verily. - WES data:. - HG001: 11 HiSeq2500, 17 HiSeq4000, 50 NovaSeq. - HG005: 1 from Oslo University. In order to increase diversity of training data, we also used the `downsample_fraction` flag when making training examples. * Whole exome sequencing model:. We started from a trained WGS model as a checkpoint, then we continue to train only on WES data above. We also use various downsample fractions for the training data. 1. DeepVariant now provides deterministic output by rounding QUAL field to one digit past the decimal when writing to VCF. 1. Update the model input data representation from 7 channels to 6. * Removal of ""Op-Len"" (CIGAR operation length) as a model feature. In our tests this makes the model more robust to input that has different read lengths. * Added [an example for visualizing examples](https://github.com/google/deepvariant/blob/r0.5/docs/visualizing_examples.ipynb). 1. Add a post-processing step to variant calls to eliminate rare inconsistent haplotypes [[description](https://github.com/google/deepvariant/blob/r0.5/deepvariant/haplotypes.py#L29-L41)]. 1. Expand the excluded contigs list to include common problematic contigs on GRCh38 [[GitHub issue](https://github.com/google/deepvariant/issues/37)]. 1. It is now possible to run [DeepVariant workflows on GCP](https://cloud.google.com/genomics/deepvariant) with pre-emptible GPUs.",MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.5.0
https://github.com/google/deepvariant/releases/tag/v0.4.1:66,availability,unavail,unavailable,66,This fixes a problem with htslib_gcp_oauth when network access is unavailable.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.1
https://github.com/google/deepvariant/releases/tag/v0.4.1:48,performance,network,network,48,This fixes a problem with htslib_gcp_oauth when network access is unavailable.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.1
https://github.com/google/deepvariant/releases/tag/v0.4.1:48,security,network,network,48,This fixes a problem with htslib_gcp_oauth when network access is unavailable.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.1
https://github.com/google/deepvariant/releases/tag/v0.4.1:56,security,access,access,56,This fixes a problem with htslib_gcp_oauth when network access is unavailable.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.1
https://github.com/google/deepvariant/releases/tag/v0.4.0:100,availability,replic,replicates,100,### 0.4.0. This is the initial open source release of DeepVariant! It includes a model trained on 9 replicates of NA12878 / HG001 as well as copies each downsampled at 50% coverage. In our tests this additional training data means DeepVariant can generalize to a wider variety of input sequencing data. This produced approximately 100 million training examples. We use the truth set v.3.3.2 from Genome in a Bottle for training. The underlying model is Inception V3. See [historical release notes](https://github.com/google/deepvariant/blob/r0.4/docs/deepvariant-release-notes.md) for more details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.0
https://github.com/google/deepvariant/releases/tag/v0.4.0:153,availability,down,downsampled,153,### 0.4.0. This is the initial open source release of DeepVariant! It includes a model trained on 9 replicates of NA12878 / HG001 as well as copies each downsampled at 50% coverage. In our tests this additional training data means DeepVariant can generalize to a wider variety of input sequencing data. This produced approximately 100 million training examples. We use the truth set v.3.3.2 from Genome in a Bottle for training. The underlying model is Inception V3. See [historical release notes](https://github.com/google/deepvariant/blob/r0.4/docs/deepvariant-release-notes.md) for more details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.0
https://github.com/google/deepvariant/releases/tag/v0.4.0:43,deployability,releas,release,43,### 0.4.0. This is the initial open source release of DeepVariant! It includes a model trained on 9 replicates of NA12878 / HG001 as well as copies each downsampled at 50% coverage. In our tests this additional training data means DeepVariant can generalize to a wider variety of input sequencing data. This produced approximately 100 million training examples. We use the truth set v.3.3.2 from Genome in a Bottle for training. The underlying model is Inception V3. See [historical release notes](https://github.com/google/deepvariant/blob/r0.4/docs/deepvariant-release-notes.md) for more details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.0
https://github.com/google/deepvariant/releases/tag/v0.4.0:483,deployability,releas,release,483,### 0.4.0. This is the initial open source release of DeepVariant! It includes a model trained on 9 replicates of NA12878 / HG001 as well as copies each downsampled at 50% coverage. In our tests this additional training data means DeepVariant can generalize to a wider variety of input sequencing data. This produced approximately 100 million training examples. We use the truth set v.3.3.2 from Genome in a Bottle for training. The underlying model is Inception V3. See [historical release notes](https://github.com/google/deepvariant/blob/r0.4/docs/deepvariant-release-notes.md) for more details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.0
https://github.com/google/deepvariant/releases/tag/v0.4.0:563,deployability,releas,release-notes,563,### 0.4.0. This is the initial open source release of DeepVariant! It includes a model trained on 9 replicates of NA12878 / HG001 as well as copies each downsampled at 50% coverage. In our tests this additional training data means DeepVariant can generalize to a wider variety of input sequencing data. This produced approximately 100 million training examples. We use the truth set v.3.3.2 from Genome in a Bottle for training. The underlying model is Inception V3. See [historical release notes](https://github.com/google/deepvariant/blob/r0.4/docs/deepvariant-release-notes.md) for more details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.0
https://github.com/google/deepvariant/releases/tag/v0.4.0:81,energy efficiency,model,model,81,### 0.4.0. This is the initial open source release of DeepVariant! It includes a model trained on 9 replicates of NA12878 / HG001 as well as copies each downsampled at 50% coverage. In our tests this additional training data means DeepVariant can generalize to a wider variety of input sequencing data. This produced approximately 100 million training examples. We use the truth set v.3.3.2 from Genome in a Bottle for training. The underlying model is Inception V3. See [historical release notes](https://github.com/google/deepvariant/blob/r0.4/docs/deepvariant-release-notes.md) for more details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.0
https://github.com/google/deepvariant/releases/tag/v0.4.0:444,energy efficiency,model,model,444,### 0.4.0. This is the initial open source release of DeepVariant! It includes a model trained on 9 replicates of NA12878 / HG001 as well as copies each downsampled at 50% coverage. In our tests this additional training data means DeepVariant can generalize to a wider variety of input sequencing data. This produced approximately 100 million training examples. We use the truth set v.3.3.2 from Genome in a Bottle for training. The underlying model is Inception V3. See [historical release notes](https://github.com/google/deepvariant/blob/r0.4/docs/deepvariant-release-notes.md) for more details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.0
https://github.com/google/deepvariant/releases/tag/v0.4.0:189,safety,test,tests,189,### 0.4.0. This is the initial open source release of DeepVariant! It includes a model trained on 9 replicates of NA12878 / HG001 as well as copies each downsampled at 50% coverage. In our tests this additional training data means DeepVariant can generalize to a wider variety of input sequencing data. This produced approximately 100 million training examples. We use the truth set v.3.3.2 from Genome in a Bottle for training. The underlying model is Inception V3. See [historical release notes](https://github.com/google/deepvariant/blob/r0.4/docs/deepvariant-release-notes.md) for more details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.0
https://github.com/google/deepvariant/releases/tag/v0.4.0:280,safety,input,input,280,### 0.4.0. This is the initial open source release of DeepVariant! It includes a model trained on 9 replicates of NA12878 / HG001 as well as copies each downsampled at 50% coverage. In our tests this additional training data means DeepVariant can generalize to a wider variety of input sequencing data. This produced approximately 100 million training examples. We use the truth set v.3.3.2 from Genome in a Bottle for training. The underlying model is Inception V3. See [historical release notes](https://github.com/google/deepvariant/blob/r0.4/docs/deepvariant-release-notes.md) for more details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.0
https://github.com/google/deepvariant/releases/tag/v0.4.0:81,security,model,model,81,### 0.4.0. This is the initial open source release of DeepVariant! It includes a model trained on 9 replicates of NA12878 / HG001 as well as copies each downsampled at 50% coverage. In our tests this additional training data means DeepVariant can generalize to a wider variety of input sequencing data. This produced approximately 100 million training examples. We use the truth set v.3.3.2 from Genome in a Bottle for training. The underlying model is Inception V3. See [historical release notes](https://github.com/google/deepvariant/blob/r0.4/docs/deepvariant-release-notes.md) for more details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.0
https://github.com/google/deepvariant/releases/tag/v0.4.0:444,security,model,model,444,### 0.4.0. This is the initial open source release of DeepVariant! It includes a model trained on 9 replicates of NA12878 / HG001 as well as copies each downsampled at 50% coverage. In our tests this additional training data means DeepVariant can generalize to a wider variety of input sequencing data. This produced approximately 100 million training examples. We use the truth set v.3.3.2 from Genome in a Bottle for training. The underlying model is Inception V3. See [historical release notes](https://github.com/google/deepvariant/blob/r0.4/docs/deepvariant-release-notes.md) for more details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.0
https://github.com/google/deepvariant/releases/tag/v0.4.0:172,testability,coverag,coverage,172,### 0.4.0. This is the initial open source release of DeepVariant! It includes a model trained on 9 replicates of NA12878 / HG001 as well as copies each downsampled at 50% coverage. In our tests this additional training data means DeepVariant can generalize to a wider variety of input sequencing data. This produced approximately 100 million training examples. We use the truth set v.3.3.2 from Genome in a Bottle for training. The underlying model is Inception V3. See [historical release notes](https://github.com/google/deepvariant/blob/r0.4/docs/deepvariant-release-notes.md) for more details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.0
https://github.com/google/deepvariant/releases/tag/v0.4.0:189,testability,test,tests,189,### 0.4.0. This is the initial open source release of DeepVariant! It includes a model trained on 9 replicates of NA12878 / HG001 as well as copies each downsampled at 50% coverage. In our tests this additional training data means DeepVariant can generalize to a wider variety of input sequencing data. This produced approximately 100 million training examples. We use the truth set v.3.3.2 from Genome in a Bottle for training. The underlying model is Inception V3. See [historical release notes](https://github.com/google/deepvariant/blob/r0.4/docs/deepvariant-release-notes.md) for more details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.0
https://github.com/google/deepvariant/releases/tag/v0.4.0:280,usability,input,input,280,### 0.4.0. This is the initial open source release of DeepVariant! It includes a model trained on 9 replicates of NA12878 / HG001 as well as copies each downsampled at 50% coverage. In our tests this additional training data means DeepVariant can generalize to a wider variety of input sequencing data. This produced approximately 100 million training examples. We use the truth set v.3.3.2 from Genome in a Bottle for training. The underlying model is Inception V3. See [historical release notes](https://github.com/google/deepvariant/blob/r0.4/docs/deepvariant-release-notes.md) for more details.,MatchSource.RELEASES,google,deepvariant,v1.6.1,,https://github.com/google/deepvariant/releases/tag/v0.4.0
