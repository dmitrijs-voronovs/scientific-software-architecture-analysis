id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/issues/9792:2313,deployability,log,logger,2313,ger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2396,deployability,log,logger,2396,mva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2479,deployability,log,logger,2479,MVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2555,deployability,log,logger,2555,r. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2625,deployability,log,logger,2625,gger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLog,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2697,deployability,log,logger,2697,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2775,deployability,log,logger,2775,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2847,deployability,log,logger,2847,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2921,deployability,log,logger,2921,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3000,deployability,log,logger,3000,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3080,deployability,log,logger,3080,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3158,deployability,log,logger,3158,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3241,deployability,log,logger,3241,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3325,deployability,log,logger,3325,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3412,deployability,log,logger,3412,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3482,deployability,log,logger,3482,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3567,deployability,log,logger,3567,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3654,deployability,log,logger,3654,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:283,energy efficiency,current,current,283,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1486,energy efficiency,Optim,OptimizeConfigParameters,1486,mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TM,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:197,integrability,messag,message,197,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:381,integrability,messag,message,381,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:452,integrability,messag,message,452,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:482,integrability,Configur,Configurable,482,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:530,integrability,messag,message,530,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:612,integrability,messag,message,612,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:685,integrability,messag,message,685,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:757,integrability,messag,message,757,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:834,integrability,messag,message,834,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:906,integrability,messag,message,906,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:993,integrability,messag,message,993,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1068,integrability,messag,message,1068,"ppears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1149,integrability,messag,message,1149,"ent) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1231,integrability,messag,message,1231, ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. t,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1305,integrability,messag,message,1305,tent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! mess,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1373,integrability,messag,message,1373,//! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fL,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1389,integrability,servic,service,1389,er. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! messa,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1456,integrability,messag,message,1456,logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fL,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1545,integrability,messag,message,1545,a/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! me,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1618,integrability,messag,message,1618,gger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! messa,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1702,integrability,messag,message,1702,inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. t,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1785,integrability,messag,message,1785,taSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/i,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1854,integrability,messag,message,1854,/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmv,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1927,integrability,messag,message,1927,TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tm,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2001,integrability,messag,message,2001,er. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logge,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2074,integrability,messag,message,2074,gger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! messag,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2145,integrability,messag,message,2145,message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2218,integrability,messag,message,2218,gger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* f,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2305,integrability,messag,message,2305,age logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogg,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2388,integrability,messag,message,2388,vice. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* f,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2471,integrability,messag,message,2471,a/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // m,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2547,integrability,messag,message,2547,e logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogg,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2617,integrability,messag,message,2617,sage logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2689,integrability,messag,message,2689,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2767,integrability,messag,message,2767,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2839,integrability,messag,message,2839,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2913,integrability,messag,message,2913,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2992,integrability,messag,message,2992,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3072,integrability,messag,message,3072,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3150,integrability,messag,message,3150,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3233,integrability,messag,message,3233,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3317,integrability,messag,message,3317,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3347,integrability,Transform,TransformationHandler,3347,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3404,integrability,messag,message,3404,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3474,integrability,messag,message,3474,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3559,integrability,messag,message,3559,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3646,integrability,messag,message,3646,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:197,interoperability,messag,message,197,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:381,interoperability,messag,message,381,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:452,interoperability,messag,message,452,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:530,interoperability,messag,message,530,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:612,interoperability,messag,message,612,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:685,interoperability,messag,message,685,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:757,interoperability,messag,message,757,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:834,interoperability,messag,message,834,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:906,interoperability,messag,message,906,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:993,interoperability,messag,message,993,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1068,interoperability,messag,message,1068,"ppears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1149,interoperability,messag,message,1149,"ent) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1231,interoperability,messag,message,1231, ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. t,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1305,interoperability,messag,message,1305,tent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! mess,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1373,interoperability,messag,message,1373,//! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fL,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1456,interoperability,messag,message,1456,logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fL,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1545,interoperability,messag,message,1545,a/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! me,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1618,interoperability,messag,message,1618,gger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! messa,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1702,interoperability,messag,message,1702,inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. t,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1785,interoperability,messag,message,1785,taSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/i,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1854,interoperability,messag,message,1854,/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmv,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1927,interoperability,messag,message,1927,TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tm,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2001,interoperability,messag,message,2001,er. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logge,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2074,interoperability,messag,message,2074,gger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! messag,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2145,interoperability,messag,message,2145,message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2218,interoperability,messag,message,2218,gger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* f,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2305,interoperability,messag,message,2305,age logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogg,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2388,interoperability,messag,message,2388,vice. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* f,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2471,interoperability,messag,message,2471,a/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // m,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2547,interoperability,messag,message,2547,e logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogg,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2617,interoperability,messag,message,2617,sage logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2689,interoperability,messag,message,2689,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2767,interoperability,messag,message,2767,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2839,interoperability,messag,message,2839,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2913,interoperability,messag,message,2913,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2992,interoperability,messag,message,2992,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3072,interoperability,messag,message,3072,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3150,interoperability,messag,message,3150,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3233,interoperability,messag,message,3233,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3317,interoperability,messag,message,3317,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3347,interoperability,Transform,TransformationHandler,3347,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3404,interoperability,messag,message,3404,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3474,interoperability,messag,message,3474,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3559,interoperability,messag,message,3559,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3646,interoperability,messag,message,3646,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:482,modifiability,Configur,Configurable,482,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1389,modifiability,servic,service,1389,er. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! messa,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1412,modifiability,Modul,ModulekNN,1412,.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3589,modifiability,Variab,VariableTransformBase,3589,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1486,performance,Optimiz,OptimizeConfigParameters,1486,mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TM,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:193,safety,log,log,193,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:389,safety,log,logger,389,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:460,safety,log,logger,460,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:538,safety,log,logger,538,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:620,safety,log,logger,620,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:693,safety,log,logger,693,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:765,safety,log,logger,765,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:842,safety,log,logger,842,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:914,safety,log,logger,914,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1001,safety,log,logger,1001,"ld fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! mes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1076,safety,log,logger,1076,"in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! messa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1157,safety,log,logger,1157,"d sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1239,safety,log,logger,1239,t may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1313,safety,log,logger,1313, ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message log,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1381,safety,log,logging,1381,age logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; /,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1412,safety,Modul,ModulekNN,1412,.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1464,safety,log,logger,1464, tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1553,safety,log,logger,1553,MVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message l,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1626,safety,log,logger,1626,mva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logg,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1710,safety,log,logger,1710,A/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1793,safety,log,logger,1793,fo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1862,safety,log,logger,1862,ataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/T,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1935,safety,log,logger,1935,pectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2009,safety,log,logger,2009,a/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2082,safety,log,logger,2082,mva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logge,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2153,safety,log,logger,2153, logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! messag,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2226,safety,log,logger,2226,/ message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2313,safety,log,logger,2313,ger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2396,safety,log,logger,2396,mva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2479,safety,log,logger,2479,MVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2555,safety,log,logger,2555,r. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2625,safety,log,logger,2625,gger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLog,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2697,safety,log,logger,2697,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2775,safety,log,logger,2775,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2847,safety,log,logger,2847,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2921,safety,log,logger,2921,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3000,safety,log,logger,3000,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3080,safety,log,logger,3080,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3158,safety,log,logger,3158,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3241,safety,log,logger,3241,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3325,safety,log,logger,3325,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3412,safety,log,logger,3412,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3482,safety,log,logger,3482,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3567,safety,log,logger,3567,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3654,safety,log,logger,3654,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:193,security,log,log,193,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:389,security,log,logger,389,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:460,security,log,logger,460,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:482,security,Configur,Configurable,482,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:538,security,log,logger,538,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:620,security,log,logger,620,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:693,security,log,logger,693,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:765,security,log,logger,765,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:842,security,log,logger,842,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:914,security,log,logger,914,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1001,security,log,logger,1001,"ld fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! mes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1076,security,log,logger,1076,"in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! messa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1157,security,log,logger,1157,"d sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1239,security,log,logger,1239,t may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1313,security,log,logger,1313, ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message log,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1381,security,log,logging,1381,age logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; /,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1464,security,log,logger,1464, tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1553,security,log,logger,1553,MVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message l,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1626,security,log,logger,1626,mva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logg,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1710,security,log,logger,1710,A/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1793,security,log,logger,1793,fo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1862,security,log,logger,1862,ataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/T,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1935,security,log,logger,1935,pectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2009,security,log,logger,2009,a/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2082,security,log,logger,2082,mva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logge,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2153,security,log,logger,2153, logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! messag,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2226,security,log,logger,2226,/ message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2313,security,log,logger,2313,ger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2396,security,log,logger,2396,mva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2479,security,log,logger,2479,MVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2555,security,log,logger,2555,r. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2625,security,log,logger,2625,gger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLog,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2697,security,log,logger,2697,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2775,security,log,logger,2775,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2847,security,log,logger,2847,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2921,security,log,logger,2921,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3000,security,log,logger,3000,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3080,security,log,logger,3080,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3158,security,log,logger,3158,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3241,security,log,logger,3241,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3325,security,log,logger,3325,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3412,security,log,logger,3412,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3482,security,log,logger,3482,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3567,security,log,logger,3567,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3654,security,log,logger,3654,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:193,testability,log,log,193,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:389,testability,log,logger,389,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:460,testability,log,logger,460,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:538,testability,log,logger,538,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:620,testability,log,logger,620,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:693,testability,log,logger,693,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:765,testability,log,logger,765,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:842,testability,log,logger,842,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:914,testability,log,logger,914,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1001,testability,log,logger,1001,"ld fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! mes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1076,testability,log,logger,1076,"in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! messa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1157,testability,log,logger,1157,"d sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1239,testability,log,logger,1239,t may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1313,testability,log,logger,1313, ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message log,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1381,testability,log,logging,1381,age logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; /,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1464,testability,log,logger,1464, tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1553,testability,log,logger,1553,MVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message l,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1626,testability,log,logger,1626,mva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logg,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1710,testability,log,logger,1710,A/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1793,testability,log,logger,1793,fo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1862,testability,log,logger,1862,ataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/T,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:1935,testability,log,logger,1935,pectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2009,testability,log,logger,2009,a/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2082,testability,log,logger,2082,mva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logge,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2153,testability,log,logger,2153, logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! messag,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2226,testability,log,logger,2226,/ message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2313,testability,log,logger,2313,ger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2396,testability,log,logger,2396,mva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2479,testability,log,logger,2479,MVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2555,testability,log,logger,2555,r. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2625,testability,log,logger,2625,gger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLog,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2697,testability,log,logger,2697,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2775,testability,log,logger,2775,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2847,testability,log,logger,2847,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:2921,testability,log,logger,2921,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3000,testability,log,logger,3000,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3080,testability,log,logger,3080,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3158,testability,log,logger,3158,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3180,testability,Simul,SimulatedAnnealing,3180,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3241,testability,log,logger,3241,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3325,testability,log,logger,3325,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3412,testability,log,logger,3412,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3482,testability,log,logger,3482,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3567,testability,log,logger,3567,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:3654,testability,log,logger,3654,e.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger. tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9792:303,usability,consist,consistent,303,"should fLogger be persistant ?; In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: . ```. tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service. tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger. tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger. tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger. tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9792
https://github.com/root-project/root/issues/9793:181,availability,error,errors,181,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:208,availability,failur,failures,208,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:234,availability,servic,services,234,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:361,availability,error,error,361,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:37,deployability,build,building,37,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:102,deployability,build,build,102,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:167,deployability,build,build,167,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:208,deployability,fail,failures,208,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:234,deployability,servic,services,234,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:442,deployability,build,build,442,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:498,deployability,build,build,498,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:589,deployability,Version,Versions,589,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:750,deployability,Version,Versions,750,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:830,deployability,version,version,830,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:954,deployability,Version,Versions,954,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:404,energy efficiency,load,loadLibrary,404,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:556,energy efficiency,load,loaded,556,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:822,energy efficiency,current,current,822,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:984,energy efficiency,Load,Load,984,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:1058,energy efficiency,load,load,1058,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:234,integrability,servic,services,234,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:589,integrability,Version,Versions,589,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:750,integrability,Version,Versions,750,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:830,integrability,version,version,830,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:954,integrability,Version,Versions,954,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:234,modifiability,servic,services,234,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:589,modifiability,Version,Versions,589,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:750,modifiability,Version,Versions,750,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:830,modifiability,version,version,830,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:954,modifiability,Version,Versions,954,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:181,performance,error,errors,181,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:208,performance,failur,failures,208,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:361,performance,error,error,361,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:404,performance,load,loadLibrary,404,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:556,performance,load,loaded,556,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:784,performance,time,time,784,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:984,performance,Load,Load,984,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:1058,performance,load,load,1058,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:6,reliability,doe,does,6,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:208,reliability,fail,failures,208,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:1073,reliability,doe,doesn,1073,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:181,safety,error,errors,181,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:203,safety,test,test,203,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:361,safety,error,error,361,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:203,testability,test,test,203,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:181,usability,error,errors,181,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:361,usability,error,error,361,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:427,usability,User,Users,427,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:900,usability,Command,CommandLineTools,900,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/issues/9793:989,usability,command,command,989,"RPATH does not match linked lib when building ROOT with system Python3 on MacOS(11,12); An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. ```. According to:. ```. $ otool -l lib/libROOTTPython.so | grep -C2 Python3. cmd LC_LOAD_DYLIB. cmdsize 72. name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24). time stamp 2 Thu Jan 1 01:00:02 1970. current version 3.8.0. --. cmd LC_RPATH. cmdsize 104. path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12). Load command 20. cmd LC_FUNCTION_STARTS. ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9793
https://github.com/root-project/root/pull/9794:0,deployability,Modul,Modules,0,Modules: Add ROOT_INCLUDE_PATH for external vc; # This Pull request:. Supersedes #9765 and is for issue #9594. ## Changes or fixes:. Fixes the problem that the Vc include directory has to be added to ROOT_INCLUDE_PATH before building ROOT. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary): N/A. This PR fixes #9594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9794
https://github.com/root-project/root/pull/9794:225,deployability,build,building,225,Modules: Add ROOT_INCLUDE_PATH for external vc; # This Pull request:. Supersedes #9765 and is for issue #9594. ## Changes or fixes:. Fixes the problem that the Vc include directory has to be added to ROOT_INCLUDE_PATH before building ROOT. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary): N/A. This PR fixes #9594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9794
https://github.com/root-project/root/pull/9794:291,deployability,updat,updated,291,Modules: Add ROOT_INCLUDE_PATH for external vc; # This Pull request:. Supersedes #9765 and is for issue #9594. ## Changes or fixes:. Fixes the problem that the Vc include directory has to be added to ROOT_INCLUDE_PATH before building ROOT. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary): N/A. This PR fixes #9594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9794
https://github.com/root-project/root/pull/9794:0,modifiability,Modul,Modules,0,Modules: Add ROOT_INCLUDE_PATH for external vc; # This Pull request:. Supersedes #9765 and is for issue #9594. ## Changes or fixes:. Fixes the problem that the Vc include directory has to be added to ROOT_INCLUDE_PATH before building ROOT. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary): N/A. This PR fixes #9594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9794
https://github.com/root-project/root/pull/9794:0,safety,Modul,Modules,0,Modules: Add ROOT_INCLUDE_PATH for external vc; # This Pull request:. Supersedes #9765 and is for issue #9594. ## Changes or fixes:. Fixes the problem that the Vc include directory has to be added to ROOT_INCLUDE_PATH before building ROOT. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary): N/A. This PR fixes #9594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9794
https://github.com/root-project/root/pull/9794:261,safety,test,tested,261,Modules: Add ROOT_INCLUDE_PATH for external vc; # This Pull request:. Supersedes #9765 and is for issue #9594. ## Changes or fixes:. Fixes the problem that the Vc include directory has to be added to ROOT_INCLUDE_PATH before building ROOT. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary): N/A. This PR fixes #9594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9794
https://github.com/root-project/root/pull/9794:291,safety,updat,updated,291,Modules: Add ROOT_INCLUDE_PATH for external vc; # This Pull request:. Supersedes #9765 and is for issue #9594. ## Changes or fixes:. Fixes the problem that the Vc include directory has to be added to ROOT_INCLUDE_PATH before building ROOT. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary): N/A. This PR fixes #9594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9794
https://github.com/root-project/root/pull/9794:291,security,updat,updated,291,Modules: Add ROOT_INCLUDE_PATH for external vc; # This Pull request:. Supersedes #9765 and is for issue #9594. ## Changes or fixes:. Fixes the problem that the Vc include directory has to be added to ROOT_INCLUDE_PATH before building ROOT. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary): N/A. This PR fixes #9594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9794
https://github.com/root-project/root/pull/9794:261,testability,test,tested,261,Modules: Add ROOT_INCLUDE_PATH for external vc; # This Pull request:. Supersedes #9765 and is for issue #9594. ## Changes or fixes:. Fixes the problem that the Vc include directory has to be added to ROOT_INCLUDE_PATH before building ROOT. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary): N/A. This PR fixes #9594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9794
https://github.com/root-project/root/pull/9795:269,availability,error,error,269,"[RF] Add `rf613` tutorial about global observables in RooFit and fixes to bugs discovered when writing the tutorial; See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9795
https://github.com/root-project/root/pull/9795:39,deployability,observ,observables,39,"[RF] Add `rf613` tutorial about global observables in RooFit and fixes to bugs discovered when writing the tutorial; See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9795
https://github.com/root-project/root/pull/9795:79,integrability,discover,discovered,79,"[RF] Add `rf613` tutorial about global observables in RooFit and fixes to bugs discovered when writing the tutorial; See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9795
https://github.com/root-project/root/pull/9795:148,integrability,messag,messages,148,"[RF] Add `rf613` tutorial about global observables in RooFit and fixes to bugs discovered when writing the tutorial; See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9795
https://github.com/root-project/root/pull/9795:275,integrability,messag,message,275,"[RF] Add `rf613` tutorial about global observables in RooFit and fixes to bugs discovered when writing the tutorial; See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9795
https://github.com/root-project/root/pull/9795:79,interoperability,discover,discovered,79,"[RF] Add `rf613` tutorial about global observables in RooFit and fixes to bugs discovered when writing the tutorial; See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9795
https://github.com/root-project/root/pull/9795:148,interoperability,messag,messages,148,"[RF] Add `rf613` tutorial about global observables in RooFit and fixes to bugs discovered when writing the tutorial; See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9795
https://github.com/root-project/root/pull/9795:275,interoperability,messag,message,275,"[RF] Add `rf613` tutorial about global observables in RooFit and fixes to bugs discovered when writing the tutorial; See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9795
https://github.com/root-project/root/pull/9795:269,performance,error,error,269,"[RF] Add `rf613` tutorial about global observables in RooFit and fixes to bugs discovered when writing the tutorial; See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9795
https://github.com/root-project/root/pull/9795:269,safety,error,error,269,"[RF] Add `rf613` tutorial about global observables in RooFit and fixes to bugs discovered when writing the tutorial; See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9795
https://github.com/root-project/root/pull/9795:39,testability,observ,observables,39,"[RF] Add `rf613` tutorial about global observables in RooFit and fixes to bugs discovered when writing the tutorial; See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9795
https://github.com/root-project/root/pull/9795:79,usability,discov,discovered,79,"[RF] Add `rf613` tutorial about global observables in RooFit and fixes to bugs discovered when writing the tutorial; See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9795
https://github.com/root-project/root/pull/9795:269,usability,error,error,269,"[RF] Add `rf613` tutorial about global observables in RooFit and fixes to bugs discovered when writing the tutorial; See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9795
https://github.com/root-project/root/pull/9796:9,deployability,upgrad,upgrade,9,"[webgui] upgrade openui5 to 1.98.0; Need small adjustment in `RBrowser` - internal openui5 API changed. Adjust JSROOT code, use everywhere link to new openui5 version",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9796
https://github.com/root-project/root/pull/9796:91,deployability,API,API,91,"[webgui] upgrade openui5 to 1.98.0; Need small adjustment in `RBrowser` - internal openui5 API changed. Adjust JSROOT code, use everywhere link to new openui5 version",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9796
https://github.com/root-project/root/pull/9796:159,deployability,version,version,159,"[webgui] upgrade openui5 to 1.98.0; Need small adjustment in `RBrowser` - internal openui5 API changed. Adjust JSROOT code, use everywhere link to new openui5 version",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9796
https://github.com/root-project/root/pull/9796:91,integrability,API,API,91,"[webgui] upgrade openui5 to 1.98.0; Need small adjustment in `RBrowser` - internal openui5 API changed. Adjust JSROOT code, use everywhere link to new openui5 version",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9796
https://github.com/root-project/root/pull/9796:159,integrability,version,version,159,"[webgui] upgrade openui5 to 1.98.0; Need small adjustment in `RBrowser` - internal openui5 API changed. Adjust JSROOT code, use everywhere link to new openui5 version",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9796
https://github.com/root-project/root/pull/9796:91,interoperability,API,API,91,"[webgui] upgrade openui5 to 1.98.0; Need small adjustment in `RBrowser` - internal openui5 API changed. Adjust JSROOT code, use everywhere link to new openui5 version",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9796
https://github.com/root-project/root/pull/9796:9,modifiability,upgrad,upgrade,9,"[webgui] upgrade openui5 to 1.98.0; Need small adjustment in `RBrowser` - internal openui5 API changed. Adjust JSROOT code, use everywhere link to new openui5 version",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9796
https://github.com/root-project/root/pull/9796:159,modifiability,version,version,159,"[webgui] upgrade openui5 to 1.98.0; Need small adjustment in `RBrowser` - internal openui5 API changed. Adjust JSROOT code, use everywhere link to new openui5 version",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9796
https://github.com/root-project/root/pull/9797:5,interoperability,format,formatting,5,TMVA formatting; - spell check. - indentation. - comments in doxygen format. - remove trailing spaces.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9797
https://github.com/root-project/root/pull/9797:69,interoperability,format,format,69,TMVA formatting; - spell check. - indentation. - comments in doxygen format. - remove trailing spaces.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9797
https://github.com/root-project/root/pull/9798:425,deployability,configurat,configuration,425,"v626: Fix the fix to #7754 (schema evolution in nested collections incl. TClonesArray) ; TBranchElement: do not set fOnfileObject for collection parent (type 3 or 4). This assignment is both unnecessary and harmfull. It is unnecessary because the pushd and popd of the onfile object address. for those cases is already handle by the usage of PushDataCache and PopDataCache. action for the branches of type 3 and 4 (via their configuration). It is harmfull because the type of the used/seen in the sub-branches might. be completely different from the type of the collection content. For example, this code was crashing some CMS jobs because the sub-branches. that had a ""OnfileObject"" corresponded to a nested sub-object (of type. reco::ParticleState) and then this was (unconditionally) associated with. the head node of the collection, which contained reco::PFCandidate objects. (One of PFCandidate base class contains a reco::ParticleState sub-object). The assignment is triggered when visiting one of the child branch (type 31 or 41). of the collection parent branch. This is a fix for the main branch commit 875e8fb91418f9e520e5d9b22fb1d32f4a42faf0. which is fix for the issue #7754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9798
https://github.com/root-project/root/pull/9798:843,deployability,contain,contained,843,"v626: Fix the fix to #7754 (schema evolution in nested collections incl. TClonesArray) ; TBranchElement: do not set fOnfileObject for collection parent (type 3 or 4). This assignment is both unnecessary and harmfull. It is unnecessary because the pushd and popd of the onfile object address. for those cases is already handle by the usage of PushDataCache and PopDataCache. action for the branches of type 3 and 4 (via their configuration). It is harmfull because the type of the used/seen in the sub-branches might. be completely different from the type of the collection content. For example, this code was crashing some CMS jobs because the sub-branches. that had a ""OnfileObject"" corresponded to a nested sub-object (of type. reco::ParticleState) and then this was (unconditionally) associated with. the head node of the collection, which contained reco::PFCandidate objects. (One of PFCandidate base class contains a reco::ParticleState sub-object). The assignment is triggered when visiting one of the child branch (type 31 or 41). of the collection parent branch. This is a fix for the main branch commit 875e8fb91418f9e520e5d9b22fb1d32f4a42faf0. which is fix for the issue #7754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9798
https://github.com/root-project/root/pull/9798:911,deployability,contain,contains,911,"v626: Fix the fix to #7754 (schema evolution in nested collections incl. TClonesArray) ; TBranchElement: do not set fOnfileObject for collection parent (type 3 or 4). This assignment is both unnecessary and harmfull. It is unnecessary because the pushd and popd of the onfile object address. for those cases is already handle by the usage of PushDataCache and PopDataCache. action for the branches of type 3 and 4 (via their configuration). It is harmfull because the type of the used/seen in the sub-branches might. be completely different from the type of the collection content. For example, this code was crashing some CMS jobs because the sub-branches. that had a ""OnfileObject"" corresponded to a nested sub-object (of type. reco::ParticleState) and then this was (unconditionally) associated with. the head node of the collection, which contained reco::PFCandidate objects. (One of PFCandidate base class contains a reco::ParticleState sub-object). The assignment is triggered when visiting one of the child branch (type 31 or 41). of the collection parent branch. This is a fix for the main branch commit 875e8fb91418f9e520e5d9b22fb1d32f4a42faf0. which is fix for the issue #7754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9798
https://github.com/root-project/root/pull/9798:28,integrability,schema,schema,28,"v626: Fix the fix to #7754 (schema evolution in nested collections incl. TClonesArray) ; TBranchElement: do not set fOnfileObject for collection parent (type 3 or 4). This assignment is both unnecessary and harmfull. It is unnecessary because the pushd and popd of the onfile object address. for those cases is already handle by the usage of PushDataCache and PopDataCache. action for the branches of type 3 and 4 (via their configuration). It is harmfull because the type of the used/seen in the sub-branches might. be completely different from the type of the collection content. For example, this code was crashing some CMS jobs because the sub-branches. that had a ""OnfileObject"" corresponded to a nested sub-object (of type. reco::ParticleState) and then this was (unconditionally) associated with. the head node of the collection, which contained reco::PFCandidate objects. (One of PFCandidate base class contains a reco::ParticleState sub-object). The assignment is triggered when visiting one of the child branch (type 31 or 41). of the collection parent branch. This is a fix for the main branch commit 875e8fb91418f9e520e5d9b22fb1d32f4a42faf0. which is fix for the issue #7754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9798
https://github.com/root-project/root/pull/9798:425,integrability,configur,configuration,425,"v626: Fix the fix to #7754 (schema evolution in nested collections incl. TClonesArray) ; TBranchElement: do not set fOnfileObject for collection parent (type 3 or 4). This assignment is both unnecessary and harmfull. It is unnecessary because the pushd and popd of the onfile object address. for those cases is already handle by the usage of PushDataCache and PopDataCache. action for the branches of type 3 and 4 (via their configuration). It is harmfull because the type of the used/seen in the sub-branches might. be completely different from the type of the collection content. For example, this code was crashing some CMS jobs because the sub-branches. that had a ""OnfileObject"" corresponded to a nested sub-object (of type. reco::ParticleState) and then this was (unconditionally) associated with. the head node of the collection, which contained reco::PFCandidate objects. (One of PFCandidate base class contains a reco::ParticleState sub-object). The assignment is triggered when visiting one of the child branch (type 31 or 41). of the collection parent branch. This is a fix for the main branch commit 875e8fb91418f9e520e5d9b22fb1d32f4a42faf0. which is fix for the issue #7754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9798
https://github.com/root-project/root/pull/9798:497,integrability,sub,sub-branches,497,"v626: Fix the fix to #7754 (schema evolution in nested collections incl. TClonesArray) ; TBranchElement: do not set fOnfileObject for collection parent (type 3 or 4). This assignment is both unnecessary and harmfull. It is unnecessary because the pushd and popd of the onfile object address. for those cases is already handle by the usage of PushDataCache and PopDataCache. action for the branches of type 3 and 4 (via their configuration). It is harmfull because the type of the used/seen in the sub-branches might. be completely different from the type of the collection content. For example, this code was crashing some CMS jobs because the sub-branches. that had a ""OnfileObject"" corresponded to a nested sub-object (of type. reco::ParticleState) and then this was (unconditionally) associated with. the head node of the collection, which contained reco::PFCandidate objects. (One of PFCandidate base class contains a reco::ParticleState sub-object). The assignment is triggered when visiting one of the child branch (type 31 or 41). of the collection parent branch. This is a fix for the main branch commit 875e8fb91418f9e520e5d9b22fb1d32f4a42faf0. which is fix for the issue #7754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9798
https://github.com/root-project/root/pull/9798:644,integrability,sub,sub-branches,644,"v626: Fix the fix to #7754 (schema evolution in nested collections incl. TClonesArray) ; TBranchElement: do not set fOnfileObject for collection parent (type 3 or 4). This assignment is both unnecessary and harmfull. It is unnecessary because the pushd and popd of the onfile object address. for those cases is already handle by the usage of PushDataCache and PopDataCache. action for the branches of type 3 and 4 (via their configuration). It is harmfull because the type of the used/seen in the sub-branches might. be completely different from the type of the collection content. For example, this code was crashing some CMS jobs because the sub-branches. that had a ""OnfileObject"" corresponded to a nested sub-object (of type. reco::ParticleState) and then this was (unconditionally) associated with. the head node of the collection, which contained reco::PFCandidate objects. (One of PFCandidate base class contains a reco::ParticleState sub-object). The assignment is triggered when visiting one of the child branch (type 31 or 41). of the collection parent branch. This is a fix for the main branch commit 875e8fb91418f9e520e5d9b22fb1d32f4a42faf0. which is fix for the issue #7754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9798
https://github.com/root-project/root/pull/9798:709,integrability,sub,sub-object,709,"v626: Fix the fix to #7754 (schema evolution in nested collections incl. TClonesArray) ; TBranchElement: do not set fOnfileObject for collection parent (type 3 or 4). This assignment is both unnecessary and harmfull. It is unnecessary because the pushd and popd of the onfile object address. for those cases is already handle by the usage of PushDataCache and PopDataCache. action for the branches of type 3 and 4 (via their configuration). It is harmfull because the type of the used/seen in the sub-branches might. be completely different from the type of the collection content. For example, this code was crashing some CMS jobs because the sub-branches. that had a ""OnfileObject"" corresponded to a nested sub-object (of type. reco::ParticleState) and then this was (unconditionally) associated with. the head node of the collection, which contained reco::PFCandidate objects. (One of PFCandidate base class contains a reco::ParticleState sub-object). The assignment is triggered when visiting one of the child branch (type 31 or 41). of the collection parent branch. This is a fix for the main branch commit 875e8fb91418f9e520e5d9b22fb1d32f4a42faf0. which is fix for the issue #7754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9798
https://github.com/root-project/root/pull/9798:942,integrability,sub,sub-object,942,"v626: Fix the fix to #7754 (schema evolution in nested collections incl. TClonesArray) ; TBranchElement: do not set fOnfileObject for collection parent (type 3 or 4). This assignment is both unnecessary and harmfull. It is unnecessary because the pushd and popd of the onfile object address. for those cases is already handle by the usage of PushDataCache and PopDataCache. action for the branches of type 3 and 4 (via their configuration). It is harmfull because the type of the used/seen in the sub-branches might. be completely different from the type of the collection content. For example, this code was crashing some CMS jobs because the sub-branches. that had a ""OnfileObject"" corresponded to a nested sub-object (of type. reco::ParticleState) and then this was (unconditionally) associated with. the head node of the collection, which contained reco::PFCandidate objects. (One of PFCandidate base class contains a reco::ParticleState sub-object). The assignment is triggered when visiting one of the child branch (type 31 or 41). of the collection parent branch. This is a fix for the main branch commit 875e8fb91418f9e520e5d9b22fb1d32f4a42faf0. which is fix for the issue #7754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9798
https://github.com/root-project/root/pull/9798:425,modifiability,configur,configuration,425,"v626: Fix the fix to #7754 (schema evolution in nested collections incl. TClonesArray) ; TBranchElement: do not set fOnfileObject for collection parent (type 3 or 4). This assignment is both unnecessary and harmfull. It is unnecessary because the pushd and popd of the onfile object address. for those cases is already handle by the usage of PushDataCache and PopDataCache. action for the branches of type 3 and 4 (via their configuration). It is harmfull because the type of the used/seen in the sub-branches might. be completely different from the type of the collection content. For example, this code was crashing some CMS jobs because the sub-branches. that had a ""OnfileObject"" corresponded to a nested sub-object (of type. reco::ParticleState) and then this was (unconditionally) associated with. the head node of the collection, which contained reco::PFCandidate objects. (One of PFCandidate base class contains a reco::ParticleState sub-object). The assignment is triggered when visiting one of the child branch (type 31 or 41). of the collection parent branch. This is a fix for the main branch commit 875e8fb91418f9e520e5d9b22fb1d32f4a42faf0. which is fix for the issue #7754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9798
https://github.com/root-project/root/pull/9798:573,performance,content,content,573,"v626: Fix the fix to #7754 (schema evolution in nested collections incl. TClonesArray) ; TBranchElement: do not set fOnfileObject for collection parent (type 3 or 4). This assignment is both unnecessary and harmfull. It is unnecessary because the pushd and popd of the onfile object address. for those cases is already handle by the usage of PushDataCache and PopDataCache. action for the branches of type 3 and 4 (via their configuration). It is harmfull because the type of the used/seen in the sub-branches might. be completely different from the type of the collection content. For example, this code was crashing some CMS jobs because the sub-branches. that had a ""OnfileObject"" corresponded to a nested sub-object (of type. reco::ParticleState) and then this was (unconditionally) associated with. the head node of the collection, which contained reco::PFCandidate objects. (One of PFCandidate base class contains a reco::ParticleState sub-object). The assignment is triggered when visiting one of the child branch (type 31 or 41). of the collection parent branch. This is a fix for the main branch commit 875e8fb91418f9e520e5d9b22fb1d32f4a42faf0. which is fix for the issue #7754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9798
https://github.com/root-project/root/pull/9798:520,safety,compl,completely,520,"v626: Fix the fix to #7754 (schema evolution in nested collections incl. TClonesArray) ; TBranchElement: do not set fOnfileObject for collection parent (type 3 or 4). This assignment is both unnecessary and harmfull. It is unnecessary because the pushd and popd of the onfile object address. for those cases is already handle by the usage of PushDataCache and PopDataCache. action for the branches of type 3 and 4 (via their configuration). It is harmfull because the type of the used/seen in the sub-branches might. be completely different from the type of the collection content. For example, this code was crashing some CMS jobs because the sub-branches. that had a ""OnfileObject"" corresponded to a nested sub-object (of type. reco::ParticleState) and then this was (unconditionally) associated with. the head node of the collection, which contained reco::PFCandidate objects. (One of PFCandidate base class contains a reco::ParticleState sub-object). The assignment is triggered when visiting one of the child branch (type 31 or 41). of the collection parent branch. This is a fix for the main branch commit 875e8fb91418f9e520e5d9b22fb1d32f4a42faf0. which is fix for the issue #7754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9798
https://github.com/root-project/root/pull/9798:425,security,configur,configuration,425,"v626: Fix the fix to #7754 (schema evolution in nested collections incl. TClonesArray) ; TBranchElement: do not set fOnfileObject for collection parent (type 3 or 4). This assignment is both unnecessary and harmfull. It is unnecessary because the pushd and popd of the onfile object address. for those cases is already handle by the usage of PushDataCache and PopDataCache. action for the branches of type 3 and 4 (via their configuration). It is harmfull because the type of the used/seen in the sub-branches might. be completely different from the type of the collection content. For example, this code was crashing some CMS jobs because the sub-branches. that had a ""OnfileObject"" corresponded to a nested sub-object (of type. reco::ParticleState) and then this was (unconditionally) associated with. the head node of the collection, which contained reco::PFCandidate objects. (One of PFCandidate base class contains a reco::ParticleState sub-object). The assignment is triggered when visiting one of the child branch (type 31 or 41). of the collection parent branch. This is a fix for the main branch commit 875e8fb91418f9e520e5d9b22fb1d32f4a42faf0. which is fix for the issue #7754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9798
https://github.com/root-project/root/pull/9798:520,security,compl,completely,520,"v626: Fix the fix to #7754 (schema evolution in nested collections incl. TClonesArray) ; TBranchElement: do not set fOnfileObject for collection parent (type 3 or 4). This assignment is both unnecessary and harmfull. It is unnecessary because the pushd and popd of the onfile object address. for those cases is already handle by the usage of PushDataCache and PopDataCache. action for the branches of type 3 and 4 (via their configuration). It is harmfull because the type of the used/seen in the sub-branches might. be completely different from the type of the collection content. For example, this code was crashing some CMS jobs because the sub-branches. that had a ""OnfileObject"" corresponded to a nested sub-object (of type. reco::ParticleState) and then this was (unconditionally) associated with. the head node of the collection, which contained reco::PFCandidate objects. (One of PFCandidate base class contains a reco::ParticleState sub-object). The assignment is triggered when visiting one of the child branch (type 31 or 41). of the collection parent branch. This is a fix for the main branch commit 875e8fb91418f9e520e5d9b22fb1d32f4a42faf0. which is fix for the issue #7754.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9798
https://github.com/root-project/root/pull/9799:28,deployability,releas,release,28,[RF][RelNotes] Final RooFit release notes and documentation changes for v626 release; More details in the commit descriptions. Closes https://github.com/root-project/root/issues/9508.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9799
https://github.com/root-project/root/pull/9799:77,deployability,releas,release,77,[RF][RelNotes] Final RooFit release notes and documentation changes for v626 release; More details in the commit descriptions. Closes https://github.com/root-project/root/issues/9508.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9799
https://github.com/root-project/root/pull/9799:46,usability,document,documentation,46,[RF][RelNotes] Final RooFit release notes and documentation changes for v626 release; More details in the commit descriptions. Closes https://github.com/root-project/root/issues/9508.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9799
https://github.com/root-project/root/pull/9799:127,usability,Close,Closes,127,[RF][RelNotes] Final RooFit release notes and documentation changes for v626 release; More details in the commit descriptions. Closes https://github.com/root-project/root/issues/9508.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9799
https://github.com/root-project/root/pull/9800:48,deployability,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 6; This is a backport of all the RooFit PRs that were merged to `master` edit to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9721. 2. https://github.com/root-project/root/pull/9795. 3. https://github.com/root-project/root/pull/9767. 4. https://github.com/root-project/root/pull/9799",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9800
https://github.com/root-project/root/pull/9800:154,deployability,patch,patches,154,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 6; This is a backport of all the RooFit PRs that were merged to `master` edit to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9721. 2. https://github.com/root-project/root/pull/9795. 3. https://github.com/root-project/root/pull/9767. 4. https://github.com/root-project/root/pull/9799",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9800
https://github.com/root-project/root/pull/9800:48,safety,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 6; This is a backport of all the RooFit PRs that were merged to `master` edit to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9721. 2. https://github.com/root-project/root/pull/9795. 3. https://github.com/root-project/root/pull/9767. 4. https://github.com/root-project/root/pull/9799",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9800
https://github.com/root-project/root/pull/9800:154,safety,patch,patches,154,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 6; This is a backport of all the RooFit PRs that were merged to `master` edit to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9721. 2. https://github.com/root-project/root/pull/9795. 3. https://github.com/root-project/root/pull/9767. 4. https://github.com/root-project/root/pull/9799",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9800
https://github.com/root-project/root/pull/9800:48,security,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 6; This is a backport of all the RooFit PRs that were merged to `master` edit to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9721. 2. https://github.com/root-project/root/pull/9795. 3. https://github.com/root-project/root/pull/9767. 4. https://github.com/root-project/root/pull/9799",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9800
https://github.com/root-project/root/pull/9800:154,security,patch,patches,154,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 6; This is a backport of all the RooFit PRs that were merged to `master` edit to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9721. 2. https://github.com/root-project/root/pull/9795. 3. https://github.com/root-project/root/pull/9767. 4. https://github.com/root-project/root/pull/9799",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9800
https://github.com/root-project/root/pull/9801:300,deployability,Updat,Update,300,"[http] solve windows files problem, disable directory listing by default; With latest `civetweb` special windows files names not working. Also disable by default directory listing, can be enabled with URL arguments. Let change custom HTTP server settings for web widgets via special `gEnv` variable. Update documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9801
https://github.com/root-project/root/pull/9801:290,modifiability,variab,variable,290,"[http] solve windows files problem, disable directory listing by default; With latest `civetweb` special windows files names not working. Also disable by default directory listing, can be enabled with URL arguments. Let change custom HTTP server settings for web widgets via special `gEnv` variable. Update documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9801
https://github.com/root-project/root/pull/9801:300,safety,Updat,Update,300,"[http] solve windows files problem, disable directory listing by default; With latest `civetweb` special windows files names not working. Also disable by default directory listing, can be enabled with URL arguments. Let change custom HTTP server settings for web widgets via special `gEnv` variable. Update documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9801
https://github.com/root-project/root/pull/9801:300,security,Updat,Update,300,"[http] solve windows files problem, disable directory listing by default; With latest `civetweb` special windows files names not working. Also disable by default directory listing, can be enabled with URL arguments. Let change custom HTTP server settings for web widgets via special `gEnv` variable. Update documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9801
https://github.com/root-project/root/pull/9801:227,usability,custom,custom,227,"[http] solve windows files problem, disable directory listing by default; With latest `civetweb` special windows files names not working. Also disable by default directory listing, can be enabled with URL arguments. Let change custom HTTP server settings for web widgets via special `gEnv` variable. Update documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9801
https://github.com/root-project/root/pull/9801:263,usability,widget,widgets,263,"[http] solve windows files problem, disable directory listing by default; With latest `civetweb` special windows files names not working. Also disable by default directory listing, can be enabled with URL arguments. Let change custom HTTP server settings for web widgets via special `gEnv` variable. Update documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9801
https://github.com/root-project/root/pull/9801:307,usability,document,documentation,307,"[http] solve windows files problem, disable directory listing by default; With latest `civetweb` special windows files names not working. Also disable by default directory listing, can be enabled with URL arguments. Let change custom HTTP server settings for web widgets via special `gEnv` variable. Update documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9801
https://github.com/root-project/root/pull/9802:376,availability,error,error,376,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9802:506,deployability,build,build,506,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9802:598,deployability,Version,Versions,598,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9802:395,energy efficiency,load,loading,395,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9802:449,energy efficiency,load,loadLibrary,449,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9802:565,energy efficiency,load,loaded,565,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9802:598,integrability,Version,Versions,598,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9802:147,interoperability,specif,specify,147,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9802:598,modifiability,Version,Versions,598,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9802:376,performance,error,error,376,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9802:395,performance,load,loading,395,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9802:449,performance,load,loadLibrary,449,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9802:565,performance,load,loaded,565,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9802:376,safety,error,error,376,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9802:376,usability,error,error,376,"[CMake][9793] Fix RPATH when linking with XCode Python on MacOS; As found here:. https://gitlab.kitware.com/cmake/cmake/-/issues/21947. we need to specify:. target_link_options(target-name PRIVATE ${Python3_LINK_OPTIONS}). so that libROOTTPython and libPyMVA are linked with the right. RPATH, when linking against the XCode Python(3) on MacOS(11,12). Otherwise, the following error appears when loading the libraries:. cling::DynamicLibraryManager::loadLibrary():. dlopen(.../mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009):. Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3. Fixes #9793 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9802
https://github.com/root-project/root/pull/9804:71,deployability,build,builds,71,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:127,deployability,build,builds,127,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:451,deployability,log,logic,451,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:473,deployability,build,build,473,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:498,deployability,build,builds,498,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:555,deployability,build,build,555,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:950,deployability,build,builds,950,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:1158,deployability,build,builds,1158," `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial3.C. [ 56%] Generating tutorials/fit/vectorizedFit.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial1.C. [ 56%] Generating tutorials/fitsio/FI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:95,energy efficiency,current,current,95,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:135,energy efficiency,Current,Currently,135,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:215,energy efficiency,current,current,215,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:1070,energy efficiency,Draw,Drawback,1070,"lds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial3.C. [ 56%] Generating tutorials/fit/vectorizedFit.C. [ 5",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:375,integrability,repositor,repository,375,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:1192,integrability,messag,messages,1192,"e> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial3.C. [ 56%] Generating tutorials/fit/vectorizedFit.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial1.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial2.C. [ 56%] Generating t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:375,interoperability,repositor,repository,375,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:436,interoperability,conflict,conflicts,436,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:1192,interoperability,messag,messages,1192,"e> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial3.C. [ 56%] Generating tutorials/fit/vectorizedFit.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial1.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial2.C. [ 56%] Generating t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:223,performance,time,time,223,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:401,performance,time,time,401,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:622,performance,time,timestamps,622,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:735,performance,time,time,735,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:983,performance,time,timestamp,983,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:1285,performance,time,time,1285,"le modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial3.C. [ 56%] Generating tutorials/fit/vectorizedFit.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial1.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial2.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial5.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial4.C. [ 56",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:1042,reliability,doe,does,1042,", js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial3.C. [ 56%] Generating tuto",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:451,safety,log,logic,451,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:290,security,modif,modification,290,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:414,security,modif,modification,414,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:451,security,log,logic,451,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:451,testability,log,logic,451,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:145,usability,command,command,145,"[cmake] correctly copy misc files (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/pull/9804:1025,usability,command,command,1025,"iles (like etc/, js/, ...) in incremental builds; Main problem of current approach is incremental builds. Currently command is used: `cmake -E copy_if_different <source> <dest>`. It set current time when file is copied. Fine if changing done locally - new file modification will trigger. file copy. But problem appears when changes checkout from repository. Git preserves time of last modification and this conflicts with logic. of incremental build. Example: . If one builds ROOT today, all files stamp will be from today in build directory. If somebody commit changes already yesterday, all timestamps for that. changes will be from yesterday. If one checkout these commits, checked out . files will get time stamps from yesterday. And when running cmake - it will do nothing. This is typical case with `js/` and `ui5/` folders with many files inside. Very often changes in JSROOT and openui5 are missed by incremental builds. The only way to preserve timestamp in cmake - use `file(COPY ...)` command. This PR does exactly this. . BUT!!! Drawback - cmake always run rule if source and target file stamps. matches. Incremental builds will be always filled with messages (even when nothing is changed). I did not found way to convince cmake do nothing if time stamp matches. Probably, there is somewhere the option. Maybe one can apply such brutal-force. approach for `ui5/` and `js/` folders, where main problems appears for me. ```. [ 56%] Generating tutorials/fit/graph2dfit.C. [ 56%] Generating tutorials/fit/langaus.C. [ 56%] Generating tutorials/fit/line3Dfit.C. [ 56%] Generating tutorials/fit/minuit2FitBench.C. [ 56%] Generating tutorials/fit/minuit2GausFit.C. [ 56%] Generating tutorials/fit/minuit2FitBench2D.C. [ 56%] Generating tutorials/fit/multifit.py. [ 56%] Generating tutorials/fit/myfit.C. [ 56%] Generating tutorials/fit/multifit.C. [ 56%] Generating tutorials/fit/multidimfit.C. [ 56%] Generating tutorials/fit/qa2.C. [ 56%] Generating tutorials/fitsio/FITS_tutorial3.C. [ 56%] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9804
https://github.com/root-project/root/issues/9805:385,integrability,queue,queue,385,"Add env variable to limit number of threads used by ROOT; Hi,. ATLAS would like to request the addition of a mechanism to control the number of threads used by ROOT with implicit multi-threading enabled, ideally via an environment variable (e.g. `ROOT_MAX_THREADS`). The primary motivation for this is to give GRID sites an easier way to limit the number of threads to match that of a queue. Thanks! Ed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9805
https://github.com/root-project/root/issues/9805:8,modifiability,variab,variable,8,"Add env variable to limit number of threads used by ROOT; Hi,. ATLAS would like to request the addition of a mechanism to control the number of threads used by ROOT with implicit multi-threading enabled, ideally via an environment variable (e.g. `ROOT_MAX_THREADS`). The primary motivation for this is to give GRID sites an easier way to limit the number of threads to match that of a queue. Thanks! Ed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9805
https://github.com/root-project/root/issues/9805:231,modifiability,variab,variable,231,"Add env variable to limit number of threads used by ROOT; Hi,. ATLAS would like to request the addition of a mechanism to control the number of threads used by ROOT with implicit multi-threading enabled, ideally via an environment variable (e.g. `ROOT_MAX_THREADS`). The primary motivation for this is to give GRID sites an easier way to limit the number of threads to match that of a queue. Thanks! Ed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9805
https://github.com/root-project/root/issues/9805:179,performance,multi-thread,multi-threading,179,"Add env variable to limit number of threads used by ROOT; Hi,. ATLAS would like to request the addition of a mechanism to control the number of threads used by ROOT with implicit multi-threading enabled, ideally via an environment variable (e.g. `ROOT_MAX_THREADS`). The primary motivation for this is to give GRID sites an easier way to limit the number of threads to match that of a queue. Thanks! Ed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9805
https://github.com/root-project/root/issues/9805:385,performance,queue,queue,385,"Add env variable to limit number of threads used by ROOT; Hi,. ATLAS would like to request the addition of a mechanism to control the number of threads used by ROOT with implicit multi-threading enabled, ideally via an environment variable (e.g. `ROOT_MAX_THREADS`). The primary motivation for this is to give GRID sites an easier way to limit the number of threads to match that of a queue. Thanks! Ed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9805
https://github.com/root-project/root/issues/9805:122,security,control,control,122,"Add env variable to limit number of threads used by ROOT; Hi,. ATLAS would like to request the addition of a mechanism to control the number of threads used by ROOT with implicit multi-threading enabled, ideally via an environment variable (e.g. `ROOT_MAX_THREADS`). The primary motivation for this is to give GRID sites an easier way to limit the number of threads to match that of a queue. Thanks! Ed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9805
https://github.com/root-project/root/issues/9805:122,testability,control,control,122,"Add env variable to limit number of threads used by ROOT; Hi,. ATLAS would like to request the addition of a mechanism to control the number of threads used by ROOT with implicit multi-threading enabled, ideally via an environment variable (e.g. `ROOT_MAX_THREADS`). The primary motivation for this is to give GRID sites an easier way to limit the number of threads to match that of a queue. Thanks! Ed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9805
https://github.com/root-project/root/pull/9806:137,deployability,releas,release,137,Back-port some TMVA fixes for the 6.26 branch; This PR back ports fixes from these PR's:. - #9499. - #9513 . - #9718 (in Math). - #9776 (release notes).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9806
https://github.com/root-project/root/pull/9808:310,deployability,pipelin,pipeline,310,"[RF] Add missing `override` specifiers in RooFit; For RooFit developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDef",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:453,deployability,automat,automatically,453,"[RF] Add missing `override` specifiers in RooFit; For RooFit developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDef",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:666,deployability,build,build,666,"[RF] Add missing `override` specifiers in RooFit; For RooFit developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDef",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:310,integrability,pipelin,pipeline,310,"[RF] Add missing `override` specifiers in RooFit; For RooFit developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDef",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:559,integrability,sub,subprocess,559,"[RF] Add missing `override` specifiers in RooFit; For RooFit developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDef",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:1394,integrability,sub,subprocess,1394," sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find roofit -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:1815,integrability,sub,subprocess,1815," sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find roofit -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:1843,integrability,sub,subprocess,1843," sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find roofit -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:1870,integrability,sub,subprocess,1870," sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find roofit -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:28,interoperability,specif,specifiers,28,"[RF] Add missing `override` specifiers in RooFit; For RooFit developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDef",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:112,interoperability,specif,specifier,112,"[RF] Add missing `override` specifiers in RooFit; For RooFit developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDef",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:381,interoperability,specif,specifiers,381,"[RF] Add missing `override` specifiers in RooFit; For RooFit developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDef",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:1253,interoperability,specif,specifies,1253," sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find roofit -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:780,modifiability,extens,extensions,780,"[RF] Add missing `override` specifiers in RooFit; For RooFit developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDef",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:817,modifiability,extens,extensions,817,"[RF] Add missing `override` specifiers in RooFit; For RooFit developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDef",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:945,modifiability,extens,extensions,945,"[RF] Add missing `override` specifiers in RooFit; For RooFit developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDef",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:1085,modifiability,extens,extensions,1085,"t that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find roofit -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:1147,modifiability,extens,extensions,1147,"s overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find roofit -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:1272,modifiability,extens,extensions,1272," sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find roofit -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:1369,modifiability,extens,extensions,1369," sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find roofit -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:1455,modifiability,deco,decode,1455," sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find roofit -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:345,performance,time,time,345,"[RF] Add missing `override` specifiers in RooFit; For RooFit developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDef",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/pull/9808:453,testability,automat,automatically,453,"[RF] Add missing `override` specifiers in RooFit; For RooFit developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in RooFit. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in RooFit. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""roofit"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDef",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9808
https://github.com/root-project/root/issues/9809:34,modifiability,variab,variable,34,"[cling,win32] Read-after-write of variable of type `double` does not yield the correct result; Typing in ROOT prompt one gets:. ```. root [1] double z = 1234;. root [2] z = 1. (double) 1.00000. root [3] z. (double) 1234.0000. ```. Last line is wrong - expected of course `1.0000`. . Works ok on Linux and on Win64 (according to @bellenot)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9809
https://github.com/root-project/root/issues/9809:60,reliability,doe,does,60,"[cling,win32] Read-after-write of variable of type `double` does not yield the correct result; Typing in ROOT prompt one gets:. ```. root [1] double z = 1234;. root [2] z = 1. (double) 1.00000. root [3] z. (double) 1234.0000. ```. Last line is wrong - expected of course `1.0000`. . Works ok on Linux and on Win64 (according to @bellenot)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9809
https://github.com/root-project/root/pull/9810:50,safety,test,tests,50,[RF] Enable again the RooJSONFactoryWSTool Python tests on Mac; More details in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9810
https://github.com/root-project/root/pull/9810:50,testability,test,tests,50,[RF] Enable again the RooJSONFactoryWSTool Python tests on Mac; More details in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9810
https://github.com/root-project/root/pull/9811:382,availability,avail,available,382,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:784,availability,down,down,784,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1930,availability,cluster,cluster,1930,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:2049,availability,cluster,cluster,2049,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:2245,availability,cluster,cluster,2245,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1,deployability,Build,Build,1,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:355,deployability,fail,fail,355,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:720,deployability,version,version,720,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1187,deployability,Instal,Installing,1187,"The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done lo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1306,deployability,version,version,1306,"o work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.sa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1537,deployability,version,versions,1537,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1930,deployability,cluster,cluster,1930,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:2049,deployability,cluster,cluster,2049,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:2245,deployability,cluster,cluster,2245,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1126,energy efficiency,reduc,reduce,1126,"og/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:720,integrability,version,version,720,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1306,integrability,version,version,1306,"o work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.sa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1537,integrability,version,versions,1537,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:754,interoperability,specif,specific,754,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1832,interoperability,distribut,distributed,1832,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:2037,interoperability,distribut,distributed,2037,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:2131,interoperability,distribut,distributed,2131,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:720,modifiability,version,version,720,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1306,modifiability,version,version,1306,"o work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.sa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1394,modifiability,variab,variable,1394,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1537,modifiability,version,versions,1537,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:329,performance,time,time,329,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1095,performance,parallel,parallelize,1095,"://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very sma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:355,reliability,fail,fail,355,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:382,reliability,availab,available,382,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1248,reliability,doe,doesn,1248,"ave changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:382,safety,avail,available,382,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1460,safety,test,test,1460,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:382,security,availab,available,382,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1607,security,modif,modify,1607,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:2257,security,auth,authored-by,2257,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:797,testability,simpl,simple,797,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1460,testability,test,test,1460,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1925,testability,mock,mock,1925,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:797,usability,simpl,simple,797,"[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork iss…; ...ue in pyspark. From:. http://www.sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html. > The rules for using Objective-C between fork() and exec() have changed. in macOS 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1266,usability,behavi,behaviour,1266,"S 10.13. Incorrect code that happened to work most of the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: E",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1471,usability,effectiv,effectively,1471,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1499,usability,behavi,behaviour,1499,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9811:1800,usability,user,user,1800,"the time in. the past may now fail. Some workarounds are available. This led to issues within the Python language, tracked at. https://bugs.python.org/issue33725. Any application that makes use of. e.g. multiprocessing (or in any way ends up calling MacOS system `fork`. or `exec`) is affected. According to the Python bug tracker, this issue. has been fixed in Python 3.8. The XCode Python 3.8 version begs to differ. In a very specific usecase,. that boils down to this simple reproducer:. ```python. import pyspark. sparkconf = pyspark.SparkConf().setAll(. {""spark.app.name"": ""distrdf001_spark_connection"",. ""spark.master"": ""local[4]"", }.items()). sparkcontext = pyspark.SparkContext(conf=sparkconf). def imp(partition):. import cppyy. return 1. count = sparkcontext.parallelize(range(1)).map(imp).reduce(lambda x,y:. x+y). ```. the issue is still triggered. Installing any other 3.8+ Python. executable on a MacOS node doesn't show this behaviour, with the exact. same pyspark version (3.2.1). It is possible to workaround this problem, by setting the environment. variable OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES before running a test. This effectively brings back the behaviour of MacOS10.12 and previous. versions. This commit uses this workaround, since we cannot directly. modify how the system XCode Python on MacOS works. To give an idea of the impact of this issue (and therefore the changes. in this commit), the situation where this occurs is as follows:. 1. A user wants to run RDataFrame in distributed mode. 2. Their environment is MacOS 10.13+. 3. The application creates a pyspark mock cluster on the local Mac machine and. the computations happen strictly in the single local node, not in a. distributed cluster. Thus, it probably interests only a very small fraction of use cases for. distributed RDataFrame, mainly regarding quick checks done locally before. actually sending the computations to a cluster. Co-authored-by: Enric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9811
https://github.com/root-project/root/pull/9812:124,availability,operat,operation,124,"Fix Windows warning in RVec; ROOT/RVec.hxx(2062,16):. warning C4805: '==': unsafe mix of type 'const T' and type 'bool'. in operation [C:\Soft\root_64\math\vecops\test\vecops_rvec.vcxproj]. with. [. T=int. ].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9812
https://github.com/root-project/root/pull/9812:75,safety,unsaf,unsafe,75,"Fix Windows warning in RVec; ROOT/RVec.hxx(2062,16):. warning C4805: '==': unsafe mix of type 'const T' and type 'bool'. in operation [C:\Soft\root_64\math\vecops\test\vecops_rvec.vcxproj]. with. [. T=int. ].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9812
https://github.com/root-project/root/pull/9812:163,safety,test,test,163,"Fix Windows warning in RVec; ROOT/RVec.hxx(2062,16):. warning C4805: '==': unsafe mix of type 'const T' and type 'bool'. in operation [C:\Soft\root_64\math\vecops\test\vecops_rvec.vcxproj]. with. [. T=int. ].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9812
https://github.com/root-project/root/pull/9812:163,testability,test,test,163,"Fix Windows warning in RVec; ROOT/RVec.hxx(2062,16):. warning C4805: '==': unsafe mix of type 'const T' and type 'bool'. in operation [C:\Soft\root_64\math\vecops\test\vecops_rvec.vcxproj]. with. [. T=int. ].",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9812
https://github.com/root-project/root/pull/9813:175,availability,error,error,175,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:330,availability,error,error,330,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:22,deployability,fail,failing,22,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:816,deployability,FAIL,FAILED,816,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:12,integrability,coupl,couple,12,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:378,integrability,sub,substring,378,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:12,modifiability,coupl,couple,12,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:175,performance,error,error,175,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:330,performance,error,error,330,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:22,reliability,fail,failing,22,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:816,reliability,FAIL,FAILED,816,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:30,safety,test,tests,30,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:79,safety,test,test-stressmathmore-interpreted,79,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:156,safety,test,test-ntuple-types,156,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:175,safety,error,error,175,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:303,safety,test,test,303,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:330,safety,error,error,330,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:12,testability,coupl,couple,12,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:30,testability,test,tests,30,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:79,testability,test,test-stressmathmore-interpreted,79,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:156,testability,test,test-ntuple-types,156,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:303,testability,test,test,303,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:175,usability,error,error,175,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:262,usability,User,Users,262,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:330,usability,error,error,330,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:417,usability,support,supported,417,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:487,usability,support,supported,487,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/pull/9813:713,usability,User,Users,713,"[win] Fix a couple of failing tests on Windows with VS 2022; Fix a crash with `test-stressmathmore-interpreted` and fix the following `gtest-tree-ntuple-v7-test-ntuple-types` error on Windows with VS 2022:. ```. 361: [ RUN ] RNTuple.UnsupportedStdTypes. 361: C:\Users\sftnight\git\master\tree\ntuple\v7\test\ntuple_types.cxx(68): error: Value of: err.what(). 361: Expected: has substring ""std::pair<int,float> is not supported"". 361: Actual: 0E870D50 pointing to ""pair<int,float> is not supported\nAt:\n __thiscall ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >,class std::basic_string_view<char,struct std::char_traits<char> >,class TClass *) [C:\\Users\\sftnight\\git\\master\\tree\\ntuple\\v7\\src\\RField.cxx:773]\n"" (of type char const *). 361: [ FAILED ] RNTuple.UnsupportedStdTypes (3 ms). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9813
https://github.com/root-project/root/issues/9815:369,deployability,configurat,configurations,369,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/issues/9815:1038,deployability,version,version,1038,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/issues/9815:138,integrability,configur,configured,138,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/issues/9815:369,integrability,configur,configurations,369,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/issues/9815:1038,integrability,version,version,1038,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/issues/9815:138,modifiability,configur,configured,138,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/issues/9815:369,modifiability,configur,configurations,369,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/issues/9815:1038,modifiability,version,version,1038,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/issues/9815:138,security,configur,configured,138,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/issues/9815:369,security,configur,configurations,369,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/issues/9815:1209,testability,context,context,1209,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/issues/9815:290,usability,behavi,behavior,290,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/issues/9815:394,usability,behavi,behaviour,394,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/issues/9815:414,usability,document,documented,414,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/issues/9815:430,usability,clear,clear,430,"Deprecation Warnings not shown in Cling when `runtime_cxxmodules` unset; - [X] Checked for duplicates. ### Describe the bug. When ROOT is configured with `-Druntime_cxxmodules:BOOL=OFF`, then deprecation warnings (from `[[deprecated]]`) are not shown in the Cling interpreter. ### Expected behavior. * Either warnings should be shown in `-Druntime_cxxmodules:BOOL=OFF` configurations. * Or the behaviour should be documented in a clear and concise way. ### To Reproduce. With `-Druntime_cxxmodules:BOOL=OFF`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root -q -l foo.C. Processing foo.C... $. ```. With `-Druntime_cxxmodules:BOOL=ON`:. ```console. $ cat foo.C. [[deprecated]] void foo() { }. $ root.exe -q -l foo.C. Processing foo.C... input_line_9:2:2: warning: 'foo' is deprecated [-Wdeprecated-declarations]. foo() /* '.x' tries to invoke a function with the same name as the macro */. ^. /tmp/foo.C:1:3: note: 'foo' has been explicitly marked deprecated here. [[deprecated]] void foo() { }. ^. ```. ### Setup. 1. ROOT version: 6.22.08 and 6.24.06. 2. Linux (Debian-10 for me, other OS for others). 3. Built from source using private spack rules, built straight from source. ### Additional context. See discussion on the ""Cling"" Channel in Mattermost. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9815
https://github.com/root-project/root/pull/9818:230,availability,error,error,230,"[span] Fix span constructor for const vector; Change the cv qualification of the const vector passed to `span`. Previously, the constructor `span(std::vector<typename. std::remove_cv<T>::type> const& v) noexcept` was producing an error for invalid conversion from `const long int*` to `std::__ROOT::span<long int>::pointer` {aka `long int*`} [-fpermissive]. Corresponding test added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9818
https://github.com/root-project/root/pull/9818:248,interoperability,convers,conversion,248,"[span] Fix span constructor for const vector; Change the cv qualification of the const vector passed to `span`. Previously, the constructor `span(std::vector<typename. std::remove_cv<T>::type> const& v) noexcept` was producing an error for invalid conversion from `const long int*` to `std::__ROOT::span<long int>::pointer` {aka `long int*`} [-fpermissive]. Corresponding test added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9818
https://github.com/root-project/root/pull/9818:230,performance,error,error,230,"[span] Fix span constructor for const vector; Change the cv qualification of the const vector passed to `span`. Previously, the constructor `span(std::vector<typename. std::remove_cv<T>::type> const& v) noexcept` was producing an error for invalid conversion from `const long int*` to `std::__ROOT::span<long int>::pointer` {aka `long int*`} [-fpermissive]. Corresponding test added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9818
https://github.com/root-project/root/pull/9818:230,safety,error,error,230,"[span] Fix span constructor for const vector; Change the cv qualification of the const vector passed to `span`. Previously, the constructor `span(std::vector<typename. std::remove_cv<T>::type> const& v) noexcept` was producing an error for invalid conversion from `const long int*` to `std::__ROOT::span<long int>::pointer` {aka `long int*`} [-fpermissive]. Corresponding test added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9818
https://github.com/root-project/root/pull/9818:372,safety,test,test,372,"[span] Fix span constructor for const vector; Change the cv qualification of the const vector passed to `span`. Previously, the constructor `span(std::vector<typename. std::remove_cv<T>::type> const& v) noexcept` was producing an error for invalid conversion from `const long int*` to `std::__ROOT::span<long int>::pointer` {aka `long int*`} [-fpermissive]. Corresponding test added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9818
https://github.com/root-project/root/pull/9818:372,testability,test,test,372,"[span] Fix span constructor for const vector; Change the cv qualification of the const vector passed to `span`. Previously, the constructor `span(std::vector<typename. std::remove_cv<T>::type> const& v) noexcept` was producing an error for invalid conversion from `const long int*` to `std::__ROOT::span<long int>::pointer` {aka `long int*`} [-fpermissive]. Corresponding test added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9818
https://github.com/root-project/root/pull/9818:230,usability,error,error,230,"[span] Fix span constructor for const vector; Change the cv qualification of the const vector passed to `span`. Previously, the constructor `span(std::vector<typename. std::remove_cv<T>::type> const& v) noexcept` was producing an error for invalid conversion from `const long int*` to `std::__ROOT::span<long int>::pointer` {aka `long int*`} [-fpermissive]. Corresponding test added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9818
https://github.com/root-project/root/pull/9819:135,energy efficiency,model,model,135,[Math] Fix Kolmogorov-Smirnov 1 sample test (in ROOT::Math::GoFTest); As reported in #9636 the line computing the distance between the model cdf and. the empirical distribution was not correct. It is now fixed as in the original implementation. This PR fixes # 9636.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9819
https://github.com/root-project/root/pull/9819:164,interoperability,distribut,distribution,164,[Math] Fix Kolmogorov-Smirnov 1 sample test (in ROOT::Math::GoFTest); As reported in #9636 the line computing the distance between the model cdf and. the empirical distribution was not correct. It is now fixed as in the original implementation. This PR fixes # 9636.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9819
https://github.com/root-project/root/pull/9819:39,safety,test,test,39,[Math] Fix Kolmogorov-Smirnov 1 sample test (in ROOT::Math::GoFTest); As reported in #9636 the line computing the distance between the model cdf and. the empirical distribution was not correct. It is now fixed as in the original implementation. This PR fixes # 9636.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9819
https://github.com/root-project/root/pull/9819:135,security,model,model,135,[Math] Fix Kolmogorov-Smirnov 1 sample test (in ROOT::Math::GoFTest); As reported in #9636 the line computing the distance between the model cdf and. the empirical distribution was not correct. It is now fixed as in the original implementation. This PR fixes # 9636.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9819
https://github.com/root-project/root/pull/9819:39,testability,test,test,39,[Math] Fix Kolmogorov-Smirnov 1 sample test (in ROOT::Math::GoFTest); As reported in #9636 the line computing the distance between the model cdf and. the empirical distribution was not correct. It is now fixed as in the original implementation. This PR fixes # 9636.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9819
https://github.com/root-project/root/pull/9823:56,safety,test,tests,56,[v626][RF] Enable again the RooJSONFactoryWSTool Python tests on Mac; Backport of https://github.com/root-project/root/pull/9810.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9823
https://github.com/root-project/root/pull/9823:56,testability,test,tests,56,[v626][RF] Enable again the RooJSONFactoryWSTool Python tests on Mac; Backport of https://github.com/root-project/root/pull/9810.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9823
https://github.com/root-project/root/pull/9826:18,interoperability,convers,conversion,18,"[http] use proper conversion from string to unsigned long; Connection id can be arbitrary unsigned integer. Making problem with lonpoll engine, where id produced as hash value",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9826
https://github.com/root-project/root/pull/9826:165,security,hash,hash,165,"[http] use proper conversion from string to unsigned long; Connection id can be arbitrary unsigned integer. Making problem with lonpoll engine, where id produced as hash value",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9826
https://github.com/root-project/root/pull/9827:18,interoperability,convers,conversion,18,[http] use proper conversion from string to unsigned long (6.26); Connection id can be arbitrary unsigned integer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9827
https://github.com/root-project/root/pull/9828:18,interoperability,convers,conversion,18,[http] use proper conversion from string to unsigned long (6.24); Connection id can be arbitrary unsigned integer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9828
https://github.com/root-project/root/pull/9830:163,interoperability,format,formatting,163,Remove trailing spaces and tabs in roofit; The PR only removes tabs and trailing spaces from roofit. TAbs are replaced by 3 spaces. A next PR will fix the doxygen formatting and spelling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9830
https://github.com/root-project/root/pull/9831:185,deployability,updat,updated,185,[skip-ci][relnotes] Reintroduce accidentally deleted paragraph about RNTuple; Sorry Javi! # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9831
https://github.com/root-project/root/pull/9831:32,safety,accid,accidentally,32,[skip-ci][relnotes] Reintroduce accidentally deleted paragraph about RNTuple; Sorry Javi! # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9831
https://github.com/root-project/root/pull/9831:155,safety,test,tested,155,[skip-ci][relnotes] Reintroduce accidentally deleted paragraph about RNTuple; Sorry Javi! # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9831
https://github.com/root-project/root/pull/9831:185,safety,updat,updated,185,[skip-ci][relnotes] Reintroduce accidentally deleted paragraph about RNTuple; Sorry Javi! # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9831
https://github.com/root-project/root/pull/9831:185,security,updat,updated,185,[skip-ci][relnotes] Reintroduce accidentally deleted paragraph about RNTuple; Sorry Javi! # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9831
https://github.com/root-project/root/pull/9831:155,testability,test,tested,155,[skip-ci][relnotes] Reintroduce accidentally deleted paragraph about RNTuple; Sorry Javi! # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9831
https://github.com/root-project/root/pull/9832:193,deployability,updat,updated,193,[skip-ci][relnotes] Reintroduce accidentally deleted paragraph about RNTuple (v6.26); Sorry Javi! # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9832
https://github.com/root-project/root/pull/9832:32,safety,accid,accidentally,32,[skip-ci][relnotes] Reintroduce accidentally deleted paragraph about RNTuple (v6.26); Sorry Javi! # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9832
https://github.com/root-project/root/pull/9832:163,safety,test,tested,163,[skip-ci][relnotes] Reintroduce accidentally deleted paragraph about RNTuple (v6.26); Sorry Javi! # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9832
https://github.com/root-project/root/pull/9832:193,safety,updat,updated,193,[skip-ci][relnotes] Reintroduce accidentally deleted paragraph about RNTuple (v6.26); Sorry Javi! # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9832
https://github.com/root-project/root/pull/9832:193,security,updat,updated,193,[skip-ci][relnotes] Reintroduce accidentally deleted paragraph about RNTuple (v6.26); Sorry Javi! # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9832
https://github.com/root-project/root/pull/9832:163,testability,test,tested,163,[skip-ci][relnotes] Reintroduce accidentally deleted paragraph about RNTuple (v6.26); Sorry Javi! # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9832
https://github.com/root-project/root/pull/9833:231,availability,error,errors,231,[RF][RelNotes] Mention removal of `const char*` to RooCmdArg conversion; RooFit got more strict and forbids the implicit construction of. meaningless RooCmdArgs from strings. Our users should be warned about. possible new compiler errors if they make this mistake. Needs to be backported to the 6.26 branch (CMS already encountered such compiler errors in CMSSW). This is a followup to https://github.com/root-project/root/pull/9747.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9833
https://github.com/root-project/root/pull/9833:346,availability,error,errors,346,[RF][RelNotes] Mention removal of `const char*` to RooCmdArg conversion; RooFit got more strict and forbids the implicit construction of. meaningless RooCmdArgs from strings. Our users should be warned about. possible new compiler errors if they make this mistake. Needs to be backported to the 6.26 branch (CMS already encountered such compiler errors in CMSSW). This is a followup to https://github.com/root-project/root/pull/9747.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9833
https://github.com/root-project/root/pull/9833:61,interoperability,convers,conversion,61,[RF][RelNotes] Mention removal of `const char*` to RooCmdArg conversion; RooFit got more strict and forbids the implicit construction of. meaningless RooCmdArgs from strings. Our users should be warned about. possible new compiler errors if they make this mistake. Needs to be backported to the 6.26 branch (CMS already encountered such compiler errors in CMSSW). This is a followup to https://github.com/root-project/root/pull/9747.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9833
https://github.com/root-project/root/pull/9833:231,performance,error,errors,231,[RF][RelNotes] Mention removal of `const char*` to RooCmdArg conversion; RooFit got more strict and forbids the implicit construction of. meaningless RooCmdArgs from strings. Our users should be warned about. possible new compiler errors if they make this mistake. Needs to be backported to the 6.26 branch (CMS already encountered such compiler errors in CMSSW). This is a followup to https://github.com/root-project/root/pull/9747.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9833
https://github.com/root-project/root/pull/9833:346,performance,error,errors,346,[RF][RelNotes] Mention removal of `const char*` to RooCmdArg conversion; RooFit got more strict and forbids the implicit construction of. meaningless RooCmdArgs from strings. Our users should be warned about. possible new compiler errors if they make this mistake. Needs to be backported to the 6.26 branch (CMS already encountered such compiler errors in CMSSW). This is a followup to https://github.com/root-project/root/pull/9747.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9833
https://github.com/root-project/root/pull/9833:231,safety,error,errors,231,[RF][RelNotes] Mention removal of `const char*` to RooCmdArg conversion; RooFit got more strict and forbids the implicit construction of. meaningless RooCmdArgs from strings. Our users should be warned about. possible new compiler errors if they make this mistake. Needs to be backported to the 6.26 branch (CMS already encountered such compiler errors in CMSSW). This is a followup to https://github.com/root-project/root/pull/9747.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9833
https://github.com/root-project/root/pull/9833:346,safety,error,errors,346,[RF][RelNotes] Mention removal of `const char*` to RooCmdArg conversion; RooFit got more strict and forbids the implicit construction of. meaningless RooCmdArgs from strings. Our users should be warned about. possible new compiler errors if they make this mistake. Needs to be backported to the 6.26 branch (CMS already encountered such compiler errors in CMSSW). This is a followup to https://github.com/root-project/root/pull/9747.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9833
https://github.com/root-project/root/pull/9833:179,usability,user,users,179,[RF][RelNotes] Mention removal of `const char*` to RooCmdArg conversion; RooFit got more strict and forbids the implicit construction of. meaningless RooCmdArgs from strings. Our users should be warned about. possible new compiler errors if they make this mistake. Needs to be backported to the 6.26 branch (CMS already encountered such compiler errors in CMSSW). This is a followup to https://github.com/root-project/root/pull/9747.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9833
https://github.com/root-project/root/pull/9833:231,usability,error,errors,231,[RF][RelNotes] Mention removal of `const char*` to RooCmdArg conversion; RooFit got more strict and forbids the implicit construction of. meaningless RooCmdArgs from strings. Our users should be warned about. possible new compiler errors if they make this mistake. Needs to be backported to the 6.26 branch (CMS already encountered such compiler errors in CMSSW). This is a followup to https://github.com/root-project/root/pull/9747.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9833
https://github.com/root-project/root/pull/9833:346,usability,error,errors,346,[RF][RelNotes] Mention removal of `const char*` to RooCmdArg conversion; RooFit got more strict and forbids the implicit construction of. meaningless RooCmdArgs from strings. Our users should be warned about. possible new compiler errors if they make this mistake. Needs to be backported to the 6.26 branch (CMS already encountered such compiler errors in CMSSW). This is a followup to https://github.com/root-project/root/pull/9747.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9833
https://github.com/root-project/root/pull/9834:43,deployability,build,build,43,"[cmake] simplify copies of misc files into build directory; Instead of handling each individual file from `tutorials/` or `etc/` or `js/` subdirectory, . just invoke `cmake -E copy_directory <src> <dst>` command. . It ignores all files diffs and just copy them. . Necessary to correctly handle incremental builds. Significantly reduce number of `cmake` invocations - compared with #9804.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9834
https://github.com/root-project/root/pull/9834:306,deployability,build,builds,306,"[cmake] simplify copies of misc files into build directory; Instead of handling each individual file from `tutorials/` or `etc/` or `js/` subdirectory, . just invoke `cmake -E copy_directory <src> <dst>` command. . It ignores all files diffs and just copy them. . Necessary to correctly handle incremental builds. Significantly reduce number of `cmake` invocations - compared with #9804.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9834
https://github.com/root-project/root/pull/9834:328,energy efficiency,reduc,reduce,328,"[cmake] simplify copies of misc files into build directory; Instead of handling each individual file from `tutorials/` or `etc/` or `js/` subdirectory, . just invoke `cmake -E copy_directory <src> <dst>` command. . It ignores all files diffs and just copy them. . Necessary to correctly handle incremental builds. Significantly reduce number of `cmake` invocations - compared with #9804.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9834
https://github.com/root-project/root/pull/9834:138,integrability,sub,subdirectory,138,"[cmake] simplify copies of misc files into build directory; Instead of handling each individual file from `tutorials/` or `etc/` or `js/` subdirectory, . just invoke `cmake -E copy_directory <src> <dst>` command. . It ignores all files diffs and just copy them. . Necessary to correctly handle incremental builds. Significantly reduce number of `cmake` invocations - compared with #9804.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9834
https://github.com/root-project/root/pull/9834:314,security,Sign,Significantly,314,"[cmake] simplify copies of misc files into build directory; Instead of handling each individual file from `tutorials/` or `etc/` or `js/` subdirectory, . just invoke `cmake -E copy_directory <src> <dst>` command. . It ignores all files diffs and just copy them. . Necessary to correctly handle incremental builds. Significantly reduce number of `cmake` invocations - compared with #9804.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9834
https://github.com/root-project/root/pull/9834:8,testability,simpl,simplify,8,"[cmake] simplify copies of misc files into build directory; Instead of handling each individual file from `tutorials/` or `etc/` or `js/` subdirectory, . just invoke `cmake -E copy_directory <src> <dst>` command. . It ignores all files diffs and just copy them. . Necessary to correctly handle incremental builds. Significantly reduce number of `cmake` invocations - compared with #9804.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9834
https://github.com/root-project/root/pull/9834:8,usability,simpl,simplify,8,"[cmake] simplify copies of misc files into build directory; Instead of handling each individual file from `tutorials/` or `etc/` or `js/` subdirectory, . just invoke `cmake -E copy_directory <src> <dst>` command. . It ignores all files diffs and just copy them. . Necessary to correctly handle incremental builds. Significantly reduce number of `cmake` invocations - compared with #9804.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9834
https://github.com/root-project/root/pull/9834:204,usability,command,command,204,"[cmake] simplify copies of misc files into build directory; Instead of handling each individual file from `tutorials/` or `etc/` or `js/` subdirectory, . just invoke `cmake -E copy_directory <src> <dst>` command. . It ignores all files diffs and just copy them. . Necessary to correctly handle incremental builds. Significantly reduce number of `cmake` invocations - compared with #9804.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9834
https://github.com/root-project/root/pull/9835:67,interoperability,convers,conversion,67,[v626][RF][RelNotes] Mention removal of `const char*` to RooCmdArg conversion; Backport of https://github.com/root-project/root/pull/9833.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9835
https://github.com/root-project/root/pull/9836:61,deployability,build,building,61,Fix R bindings for MacOS; This PR fixes a problem found when building and using the R bindings on MacOS. - First we make sure that ROOT is not using the old RConfig.h but ROOT/RConfig.hxx. This avoids a conflict with the R file Rconfig.h. The first commit remove the usage of the old Rconfig.h when generating the dictionary for libCore . - The second commit fixes a conflicting definition of a macro between system macOS and R headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9836
https://github.com/root-project/root/pull/9836:6,interoperability,bind,bindings,6,Fix R bindings for MacOS; This PR fixes a problem found when building and using the R bindings on MacOS. - First we make sure that ROOT is not using the old RConfig.h but ROOT/RConfig.hxx. This avoids a conflict with the R file Rconfig.h. The first commit remove the usage of the old Rconfig.h when generating the dictionary for libCore . - The second commit fixes a conflicting definition of a macro between system macOS and R headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9836
https://github.com/root-project/root/pull/9836:86,interoperability,bind,bindings,86,Fix R bindings for MacOS; This PR fixes a problem found when building and using the R bindings on MacOS. - First we make sure that ROOT is not using the old RConfig.h but ROOT/RConfig.hxx. This avoids a conflict with the R file Rconfig.h. The first commit remove the usage of the old Rconfig.h when generating the dictionary for libCore . - The second commit fixes a conflicting definition of a macro between system macOS and R headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9836
https://github.com/root-project/root/pull/9836:203,interoperability,conflict,conflict,203,Fix R bindings for MacOS; This PR fixes a problem found when building and using the R bindings on MacOS. - First we make sure that ROOT is not using the old RConfig.h but ROOT/RConfig.hxx. This avoids a conflict with the R file Rconfig.h. The first commit remove the usage of the old Rconfig.h when generating the dictionary for libCore . - The second commit fixes a conflicting definition of a macro between system macOS and R headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9836
https://github.com/root-project/root/pull/9836:367,interoperability,conflict,conflicting,367,Fix R bindings for MacOS; This PR fixes a problem found when building and using the R bindings on MacOS. - First we make sure that ROOT is not using the old RConfig.h but ROOT/RConfig.hxx. This avoids a conflict with the R file Rconfig.h. The first commit remove the usage of the old Rconfig.h when generating the dictionary for libCore . - The second commit fixes a conflicting definition of a macro between system macOS and R headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9836
https://github.com/root-project/root/pull/9836:6,modifiability,bind,bindings,6,Fix R bindings for MacOS; This PR fixes a problem found when building and using the R bindings on MacOS. - First we make sure that ROOT is not using the old RConfig.h but ROOT/RConfig.hxx. This avoids a conflict with the R file Rconfig.h. The first commit remove the usage of the old Rconfig.h when generating the dictionary for libCore . - The second commit fixes a conflicting definition of a macro between system macOS and R headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9836
https://github.com/root-project/root/pull/9836:86,modifiability,bind,bindings,86,Fix R bindings for MacOS; This PR fixes a problem found when building and using the R bindings on MacOS. - First we make sure that ROOT is not using the old RConfig.h but ROOT/RConfig.hxx. This avoids a conflict with the R file Rconfig.h. The first commit remove the usage of the old Rconfig.h when generating the dictionary for libCore . - The second commit fixes a conflicting definition of a macro between system macOS and R headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9836
https://github.com/root-project/root/pull/9836:194,safety,avoid,avoids,194,Fix R bindings for MacOS; This PR fixes a problem found when building and using the R bindings on MacOS. - First we make sure that ROOT is not using the old RConfig.h but ROOT/RConfig.hxx. This avoids a conflict with the R file Rconfig.h. The first commit remove the usage of the old Rconfig.h when generating the dictionary for libCore . - The second commit fixes a conflicting definition of a macro between system macOS and R headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9836
https://github.com/root-project/root/issues/9838:3014,availability,Operat,Operating,3014,"st << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:3089,availability,down,download,3089,"t -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at the violated boundary instead of the shifted value might resolve this issu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:3908,availability,down,downwards,3908,"David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at the violated boundary instead of the shifted value might resolve this issue. Otherwise warning the user that this is occurring, and recommending increasing the precision used when calling `plotOn()` to prevent this scenario from occurring to begin with.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:540,deployability,integr,integral,540,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:1154,deployability,build,build,1154,"cription of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout << i << "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:2524,deployability,integr,integrator,2524,"0);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout << i << "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:3002,deployability,version,version,3002," "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolate",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:3071,deployability,instal,install,3071,"```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at the violated boundary instead of the shifted value might",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:3133,deployability,Version,Version,3133,"gher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at the violated boundary instead of the shifted value might resolve this issue. Otherwise warning the user that this is o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:3205,deployability,Instal,Installed,3205,"leMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at the violated boundary instead of the shifted value might resolve this issue. Otherwise warning the user that this is occurring, and recommending increasing the precision used when calling `pl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:315,integrability,sub,subsequent,315,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:540,integrability,integr,integral,540,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:575,integrability,sub,subsequently,575,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:2524,integrability,integr,integrator,2524,"0);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout << i << "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:3002,integrability,version,version,3002," "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolate",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:3133,integrability,Version,Version,3133,"gher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at the violated boundary instead of the shifted value might resolve this issue. Otherwise warning the user that this is o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:58,interoperability,standard,standard,58,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:243,interoperability,standard,standard,243,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:540,interoperability,integr,integral,540,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:2524,interoperability,integr,integrator,2524,"0);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout << i << "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:540,modifiability,integr,integral,540,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:2524,modifiability,integr,integrator,2524,"0);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout << i << "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:3002,modifiability,version,version,3002," "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolate",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:3133,modifiability,Version,Version,3133,"gher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at the violated boundary instead of the shifted value might resolve this issue. Otherwise warning the user that this is o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:4234,modifiability,scenario,scenario,4234,"David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at the violated boundary instead of the shifted value might resolve this issue. Otherwise warning the user that this is occurring, and recommending increasing the precision used when calling `plotOn()` to prevent this scenario from occurring to begin with.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:540,reliability,integr,integral,540,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:2524,reliability,integr,integrator,2524,"0);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout << i << "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:1108,safety,input,input,1108,"escribe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout << i << "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:1561,safety,Test,Test,1561,"ging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout << i << "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:4221,safety,prevent,prevent,4221,"David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at the violated boundary instead of the shifted value might resolve this issue. Otherwise warning the user that this is occurring, and recommending increasing the precision used when calling `plotOn()` to prevent this scenario from occurring to begin with.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:540,security,integr,integral,540,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:2524,security,integr,integrator,2524,"0);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout << i << "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:4221,security,preven,prevent,4221,"David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at the violated boundary instead of the shifted value might resolve this issue. Otherwise warning the user that this is occurring, and recommending increasing the precision used when calling `plotOn()` to prevent this scenario from occurring to begin with.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:540,testability,integr,integral,540,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:1561,testability,Test,Test,1561,"ging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout << i << "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:2524,testability,integr,integrator,2524,"0);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout << i << "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:3264,testability,context,context,3264,"and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at the violated boundary instead of the shifted value might resolve this issue. Otherwise warning the user that this is occurring, and recommending increasing the precision used when calling `plotOn()` to prevent this scenario from occurring to begin w",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:3293,testability,context,context,3293,"David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at the violated boundary instead of the shifted value might resolve this issue. Otherwise warning the user that this is occurring, and recommending increasing the precision used when calling `plotOn()` to prevent this scenario from occurring to begin with.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:136,usability,clear,clear,136,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:184,usability,behavi,behavior,184,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:711,usability,behavi,behavior,711,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:729,usability,clear,clear,729,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:963,usability,behavi,behavior,963,"[RF] RooCurve::Average() overestimating average values of standard precision curves on small intervals; . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:1108,usability,input,input,1108,"escribe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When averaging a RooCurve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout << i << "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:1220,usability,behavi,behaviour,1220,"ve generated with standard precision over intervals smaller than the distance between two subsequent points, the procedure for moving the `xFirstPt` and `xLastPt` back inside the interval `[xFirst,xLast]`, can move `xFirstPt` and `xLastPt` outside of the requested interval. This leads to an increased value of the integral used for averaging, and a subsequently higher average than can be expected based on the interpolated values of the curve at the interval boundaries. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooCurve::average(Double_t xFirst, Double_t xLast)` returing the average value of the curve in the requested interval. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Example code where this behaviour occurs:. [ExampleMacro.zip](https://github.com/root-project/root/files/8025465/ExampleMacro.zip). ```c++. #include <iostream>. #include <RooAbsReal.h>. #include <RooRealVar.h>. #include <RooPlot.h>. #include <RooCmdArg.h>. #include <RooGenericPdf.h>. void ExampleMacro(). {. RooRealVar x(""x"",""x"",0,50);. RooGenericPdf func(""func"",""Test Function"",""x"",x);. RooPlot* xframe = x.frame();. func.plotOn(xframe, RooFit::Name(""funcCurve""));. RooCurve* funcCurve = xframe->getCurve(""funcCurve"");. Double_t xFirst, xLast;. std::cout << ""\ni, f(i), f(i+0.1), avg[i,i+0.1]\n"" << std::endl;. for (Double_t i = 10; i < 11; i += 0.1). {. Double_t avg = funcCurve->average(i,i+0.1);. xFirst = funcCurve->interpolate(i, 1e-10);. xLast = funcCurve->interpolate(i+0.1, 1e-10);. std::cout << i << "", "" << xFirst << "", "" << xLast << "", "" << avg << std::endl;. }. }. ```. Run with `root -l ExampleMacro.C`. Output, marking the higher than expected averages with `<--`:. ```. root [0] . Processing ExampleMacro.C... Ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:3355,usability,behavi,behaviour,3355,"David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at the violated boundary instead of the shifted value might resolve this issue. Otherwise warning the user that this is occurring, and recommending increasing the precision used when calling `plotOn()` to prevent this scenario from occurring to begin with.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/issues/9838:4118,usability,user,user,4118,"David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#1] INFO:NumericIntegration -- RooRealIntegral::init(func_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x). i, f(i), f(i+0.1), avg[i,i+0.1]. 10, 0.004, 0.00404, 0.00402. 10.1, 0.00404, 0.00408, 0.02456 <--. 10.2, 0.00408, 0.00412, 0.0041. 10.3, 0.00412, 0.00416, 0.02464 <--. 10.4, 0.00416, 0.0042, 0.00418. 10.5, 0.0042, 0.00424, 0.00422. 10.6, 0.00424, 0.00428, 0.02576 <--. 10.7, 0.00428, 0.00432, 0.0043. 10.8, 0.00432, 0.00436, 0.02584 <--. 10.9, 0.00436, 0.0044, 0.00438. 11, 0.0044, 0.00444, 0.00442. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT Version: 6.24/06. Built for linuxx8664gcc. From tags/v6-24-06@v6-24-06. Installed manually within WSL Ubuntu 20.04. ### Additional context. <!--. Add any other context about the problem here. -->. I first encountered this behaviour when calculating the chi^2 between a fitted RooCurve and data, where the data had bin sizes of 0.1, and the RooCurve was taking steps of 1. The chi^2 value of the RooCurve far exceeded what could be expected based on the fit residuals with respect to the data. Increasing the amount of curve points by increasing the precision of the `plotOn()` call resolved this issue. A potential fix for this bug could be to check to see if the `xFirstPt` and `xLastPt` used for averaging remain within the averaging interval when shifting them upwards or downwards, leading to inversion of the averaging boundaries. If this occurs taking the interpolated y-value at the violated boundary instead of the shifted value might resolve this issue. Otherwise warning the user that this is occurring, and recommending increasing the precision used when calling `plotOn()` to prevent this scenario from occurring to begin with.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9838
https://github.com/root-project/root/pull/9839:1,deployability,Build,Build,1,[Build System] Workaround MacOS 10.13+ and XCode Python 3.8+ fork issue; Backport of #9811,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9839
https://github.com/root-project/root/pull/9840:215,performance,I/O,I/O,215,"[RF] Avoid uninitialized RooListProxies in RooLagrangianMorphFunc; A `RooListProxy` should always be constructed with the constructor that. takes the owner as an argument. The default constructor is only meant. for I/O, and any object created with it is invalid because a RooAbsProxy. is meaningless without an owner. With this commit, the RooListProxy member functions of. RooLagrangianMorphFunc are correctly initialized. The commit also avoids. templated helper functions where the type should always be the same, and. adds some TODOs to suspicious parts of the RooLagrangianMorphFunc code. that were spotted when this commit was created. FYI, @rahulgrit . This bug was uncovered now because it caused a nullpointer dereferencing in another PR: https://github.com/root-project/root/pull/8728. I also opened an issue with more **RooLagrangianMorphFunc** problems that I spotted while creating this PR: https://github.com/root-project/root/issues/9845",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9840
https://github.com/root-project/root/pull/9840:5,safety,Avoid,Avoid,5,"[RF] Avoid uninitialized RooListProxies in RooLagrangianMorphFunc; A `RooListProxy` should always be constructed with the constructor that. takes the owner as an argument. The default constructor is only meant. for I/O, and any object created with it is invalid because a RooAbsProxy. is meaningless without an owner. With this commit, the RooListProxy member functions of. RooLagrangianMorphFunc are correctly initialized. The commit also avoids. templated helper functions where the type should always be the same, and. adds some TODOs to suspicious parts of the RooLagrangianMorphFunc code. that were spotted when this commit was created. FYI, @rahulgrit . This bug was uncovered now because it caused a nullpointer dereferencing in another PR: https://github.com/root-project/root/pull/8728. I also opened an issue with more **RooLagrangianMorphFunc** problems that I spotted while creating this PR: https://github.com/root-project/root/issues/9845",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9840
https://github.com/root-project/root/pull/9840:440,safety,avoid,avoids,440,"[RF] Avoid uninitialized RooListProxies in RooLagrangianMorphFunc; A `RooListProxy` should always be constructed with the constructor that. takes the owner as an argument. The default constructor is only meant. for I/O, and any object created with it is invalid because a RooAbsProxy. is meaningless without an owner. With this commit, the RooListProxy member functions of. RooLagrangianMorphFunc are correctly initialized. The commit also avoids. templated helper functions where the type should always be the same, and. adds some TODOs to suspicious parts of the RooLagrangianMorphFunc code. that were spotted when this commit was created. FYI, @rahulgrit . This bug was uncovered now because it caused a nullpointer dereferencing in another PR: https://github.com/root-project/root/pull/8728. I also opened an issue with more **RooLagrangianMorphFunc** problems that I spotted while creating this PR: https://github.com/root-project/root/issues/9845",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9840
https://github.com/root-project/root/pull/9840:458,usability,help,helper,458,"[RF] Avoid uninitialized RooListProxies in RooLagrangianMorphFunc; A `RooListProxy` should always be constructed with the constructor that. takes the owner as an argument. The default constructor is only meant. for I/O, and any object created with it is invalid because a RooAbsProxy. is meaningless without an owner. With this commit, the RooListProxy member functions of. RooLagrangianMorphFunc are correctly initialized. The commit also avoids. templated helper functions where the type should always be the same, and. adds some TODOs to suspicious parts of the RooLagrangianMorphFunc code. that were spotted when this commit was created. FYI, @rahulgrit . This bug was uncovered now because it caused a nullpointer dereferencing in another PR: https://github.com/root-project/root/pull/8728. I also opened an issue with more **RooLagrangianMorphFunc** problems that I spotted while creating this PR: https://github.com/root-project/root/issues/9845",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9840
https://github.com/root-project/root/pull/9842:112,interoperability,specif,specifically,112,[DF] Do not jit in GraphAsymmErrors tests unless we mean to; This makes the tests run a bit faster. A test case specifically. on jitting has been added. This should also solve a problem with exceptions thrown from. jitted code on M1.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9842
https://github.com/root-project/root/pull/9842:36,safety,test,tests,36,[DF] Do not jit in GraphAsymmErrors tests unless we mean to; This makes the tests run a bit faster. A test case specifically. on jitting has been added. This should also solve a problem with exceptions thrown from. jitted code on M1.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9842
https://github.com/root-project/root/pull/9842:76,safety,test,tests,76,[DF] Do not jit in GraphAsymmErrors tests unless we mean to; This makes the tests run a bit faster. A test case specifically. on jitting has been added. This should also solve a problem with exceptions thrown from. jitted code on M1.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9842
https://github.com/root-project/root/pull/9842:102,safety,test,test,102,[DF] Do not jit in GraphAsymmErrors tests unless we mean to; This makes the tests run a bit faster. A test case specifically. on jitting has been added. This should also solve a problem with exceptions thrown from. jitted code on M1.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9842
https://github.com/root-project/root/pull/9842:191,safety,except,exceptions,191,[DF] Do not jit in GraphAsymmErrors tests unless we mean to; This makes the tests run a bit faster. A test case specifically. on jitting has been added. This should also solve a problem with exceptions thrown from. jitted code on M1.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9842
https://github.com/root-project/root/pull/9842:36,testability,test,tests,36,[DF] Do not jit in GraphAsymmErrors tests unless we mean to; This makes the tests run a bit faster. A test case specifically. on jitting has been added. This should also solve a problem with exceptions thrown from. jitted code on M1.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9842
https://github.com/root-project/root/pull/9842:76,testability,test,tests,76,[DF] Do not jit in GraphAsymmErrors tests unless we mean to; This makes the tests run a bit faster. A test case specifically. on jitting has been added. This should also solve a problem with exceptions thrown from. jitted code on M1.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9842
https://github.com/root-project/root/pull/9842:102,testability,test,test,102,[DF] Do not jit in GraphAsymmErrors tests unless we mean to; This makes the tests run a bit faster. A test case specifically. on jitting has been added. This should also solve a problem with exceptions thrown from. jitted code on M1.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9842
https://github.com/root-project/root/pull/9843:46,energy efficiency,draw,drawings,46,"[webgeom] enable REveGeoPainter, support TGeo drawings in TCanvas; Required to display geometry in web mode with normal macros. like root --web tutorials/geom/south_gate.C.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9843
https://github.com/root-project/root/pull/9843:33,usability,support,support,33,"[webgeom] enable REveGeoPainter, support TGeo drawings in TCanvas; Required to display geometry in web mode with normal macros. like root --web tutorials/geom/south_gate.C.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9843
https://github.com/root-project/root/pull/9844:46,energy efficiency,draw,drawing,46,"[webgeom] enable REveGeoPainter, support TGeo drawing in TCanvas (6.26); Required to display geometry in web mode with normal macros. like root --web tutorials/geom/south_gate.C.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9844
https://github.com/root-project/root/pull/9844:33,usability,support,support,33,"[webgeom] enable REveGeoPainter, support TGeo drawing in TCanvas (6.26); Required to display geometry in web mode with normal macros. like root --web tutorials/geom/south_gate.C.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9844
https://github.com/root-project/root/issues/9845:1868,deployability,contain,container,1868,"e `diagrams.size() > 0` check will never be true and the if-block can be removed, no? - [x] The [`_nonInterferig`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/inc/RooLagrangianMorphFunc.h#L266) data member is used in a few member functions, but it is never filled so always an empty vector. How meaningful is that? Can `_nonInterfering` be removed? . - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:3249,deployability,configurat,configuration,3249,"ss a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStringVar` is used in the configuration of the class. We should investigate if it's not possible to simply use `std::string` here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:553,integrability,pub,public,553,"[RF] Various flaws in the RooLagrangianMorphFunc; While preparing another PR, I noticed various flaws with the RooLagrangianMorphFunc that need to be fixed by someone who is more familiar with this class, like @rahulgrit:. - [x] There are [unused free functions](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L645) only in the `.cxx` source (e.g. `get()`, the other overload of `get()`, and `addCouplings()`). If they are unused in the remaining file and not part of the public interface, why not remove them? - [x] There is an [unreachable code branch here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L1905). The `setup()` function is called in the class constructor when `_diagrams` is still empty. So the `diagrams.size() > 0` check will never be true and the if-block can be removed, no? - [x] The [`_nonInterferig`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/inc/RooLagrangianMorphFunc.h#L266) data member is used in a few member functions, but it is never filled so always an empty vector. How meaningful is that? Can `_nonInterfering` be removed? . - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:560,integrability,interfac,interface,560,"[RF] Various flaws in the RooLagrangianMorphFunc; While preparing another PR, I noticed various flaws with the RooLagrangianMorphFunc that need to be fixed by someone who is more familiar with this class, like @rahulgrit:. - [x] There are [unused free functions](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L645) only in the `.cxx` source (e.g. `get()`, the other overload of `get()`, and `addCouplings()`). If they are unused in the remaining file and not part of the public interface, why not remove them? - [x] There is an [unreachable code branch here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L1905). The `setup()` function is called in the class constructor when `_diagrams` is still empty. So the `diagrams.size() > 0` check will never be true and the if-block can be removed, no? - [x] The [`_nonInterferig`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/inc/RooLagrangianMorphFunc.h#L266) data member is used in a few member functions, but it is never filled so always an empty vector. How meaningful is that? Can `_nonInterfering` be removed? . - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:2221,integrability,interfac,interface,2221,"ngful is that? Can `_nonInterfering` be removed? . - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:3249,integrability,configur,configuration,3249,"ss a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStringVar` is used in the configuration of the class. We should investigate if it's not possible to simply use `std::string` here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:560,interoperability,interfac,interface,560,"[RF] Various flaws in the RooLagrangianMorphFunc; While preparing another PR, I noticed various flaws with the RooLagrangianMorphFunc that need to be fixed by someone who is more familiar with this class, like @rahulgrit:. - [x] There are [unused free functions](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L645) only in the `.cxx` source (e.g. `get()`, the other overload of `get()`, and `addCouplings()`). If they are unused in the remaining file and not part of the public interface, why not remove them? - [x] There is an [unreachable code branch here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L1905). The `setup()` function is called in the class constructor when `_diagrams` is still empty. So the `diagrams.size() > 0` check will never be true and the if-block can be removed, no? - [x] The [`_nonInterferig`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/inc/RooLagrangianMorphFunc.h#L266) data member is used in a few member functions, but it is never filled so always an empty vector. How meaningful is that? Can `_nonInterfering` be removed? . - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:1915,interoperability,standard,standard,1915,"ue and the if-block can be removed, no? - [x] The [`_nonInterferig`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/inc/RooLagrangianMorphFunc.h#L266) data member is used in a few member functions, but it is never filled so always an empty vector. How meaningful is that? Can `_nonInterfering` be removed? . - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:2221,interoperability,interfac,interface,2221,"ngful is that? Can `_nonInterfering` be removed? . - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:560,modifiability,interfac,interface,560,"[RF] Various flaws in the RooLagrangianMorphFunc; While preparing another PR, I noticed various flaws with the RooLagrangianMorphFunc that need to be fixed by someone who is more familiar with this class, like @rahulgrit:. - [x] There are [unused free functions](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L645) only in the `.cxx` source (e.g. `get()`, the other overload of `get()`, and `addCouplings()`). If they are unused in the remaining file and not part of the public interface, why not remove them? - [x] There is an [unreachable code branch here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L1905). The `setup()` function is called in the class constructor when `_diagrams` is still empty. So the `diagrams.size() > 0` check will never be true and the if-block can be removed, no? - [x] The [`_nonInterferig`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/inc/RooLagrangianMorphFunc.h#L266) data member is used in a few member functions, but it is never filled so always an empty vector. How meaningful is that? Can `_nonInterfering` be removed? . - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:2221,modifiability,interfac,interface,2221,"ngful is that? Can `_nonInterfering` be removed? . - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:3136,modifiability,variab,variable,3136,"ss a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStringVar` is used in the configuration of the class. We should investigate if it's not possible to simply use `std::string` here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:3249,modifiability,configur,configuration,3249,"ss a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStringVar` is used in the configuration of the class. We should investigate if it's not possible to simply use `std::string` here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:2788,performance,memor,memory,2788,"ss a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStringVar` is used in the configuration of the class. We should investigate if it's not possible to simply use `std::string` here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:1847,safety,avoid,avoid,1847,"` is still empty. So the `diagrams.size() > 0` check will never be true and the if-block can be removed, no? - [x] The [`_nonInterferig`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/inc/RooLagrangianMorphFunc.h#L266) data member is used in a few member functions, but it is never filled so always an empty vector. How meaningful is that? Can `_nonInterfering` be removed? . - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:1349,security,access,access,1349,"/roofit/src/RooLagrangianMorphFunc.cxx#L645) only in the `.cxx` source (e.g. `get()`, the other overload of `get()`, and `addCouplings()`). If they are unused in the remaining file and not part of the public interface, why not remove them? - [x] There is an [unreachable code branch here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L1905). The `setup()` function is called in the class constructor when `_diagrams` is still empty. So the `diagrams.size() > 0` check will never be true and the if-block can be removed, no? - [x] The [`_nonInterferig`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/inc/RooLagrangianMorphFunc.h#L266) data member is used in a few member functions, but it is never filled so always an empty vector. How meaningful is that? Can `_nonInterfering` be removed? . - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:2548,security,sign,signature,2548,"ss a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStringVar` is used in the configuration of the class. We should investigate if it's not possible to simply use `std::string` here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:3249,security,configur,configuration,3249,"ss a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStringVar` is used in the configuration of the class. We should investigate if it's not possible to simply use `std::string` here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:2562,testability,simpl,simply,2562,"ss a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStringVar` is used in the configuration of the class. We should investigate if it's not possible to simply use `std::string` here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:3323,testability,simpl,simply,3323,"ss a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStringVar` is used in the configuration of the class. We should investigate if it's not possible to simply use `std::string` here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:2267,usability,user,users,2267,"ved? . - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStringVar` is used in the configuration of the ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:2304,usability,user,usercode,2304," these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStringVar` is used in the configuration of the class. We should investigate if it's n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:2562,usability,simpl,simply,2562,"ss a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStringVar` is used in the configuration of the class. We should investigate if it's not possible to simply use `std::string` here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:2788,usability,memor,memory,2788,"ss a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStringVar` is used in the configuration of the class. We should investigate if it's not possible to simply use `std::string` here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9845:3323,usability,simpl,simply,3323,"ss a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`. - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced). - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed. - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking. - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak. - [x] There is a static counter variable in the default constructor. It is unused and should be removed. - [x] The `RooStringVar` is used in the configuration of the class. We should investigate if it's not possible to simply use `std::string` here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9845
https://github.com/root-project/root/issues/9846:280,deployability,build,build,280,"[PyROOT] Conversion from `int32` numpy array to `Int_t *` doesn't work on 32-bit platforms; The passing NumPy arrays with the `np.int32` dtype to cppyy overloads that take array pointers in C++ generally works well, but not on 32-bit platforms like `debian10-i386` in the nightly build matrix. To reproduce the issue, you can run this code snippet on one of the 32-bit machines like `pcepsft10`:. ```Python. import ROOT. import numpy as np. arr = np.array([0, 2], dtype=np.int32). ROOT.gInterpreter.Declare(. """""". void myprint(Int_t * arr, std::size_t n) {. for(std::size_t i = 0; i < n; ++i) {. std::cout << arr[i] << std::endl;. }. }. """""". ). ROOT.myprint(arr, len(arr)). ```. Fixing this PyROOT issue will make the `projectroot.runtutorials.tutorial_fit_combinedFit_py` unit test pass again (it is currently failing in the `ROOT-debian10-i386,default,master` nightly builds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9846
https://github.com/root-project/root/issues/9846:811,deployability,fail,failing,811,"[PyROOT] Conversion from `int32` numpy array to `Int_t *` doesn't work on 32-bit platforms; The passing NumPy arrays with the `np.int32` dtype to cppyy overloads that take array pointers in C++ generally works well, but not on 32-bit platforms like `debian10-i386` in the nightly build matrix. To reproduce the issue, you can run this code snippet on one of the 32-bit machines like `pcepsft10`:. ```Python. import ROOT. import numpy as np. arr = np.array([0, 2], dtype=np.int32). ROOT.gInterpreter.Declare(. """""". void myprint(Int_t * arr, std::size_t n) {. for(std::size_t i = 0; i < n; ++i) {. std::cout << arr[i] << std::endl;. }. }. """""". ). ROOT.myprint(arr, len(arr)). ```. Fixing this PyROOT issue will make the `projectroot.runtutorials.tutorial_fit_combinedFit_py` unit test pass again (it is currently failing in the `ROOT-debian10-i386,default,master` nightly builds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9846
https://github.com/root-project/root/issues/9846:870,deployability,build,builds,870,"[PyROOT] Conversion from `int32` numpy array to `Int_t *` doesn't work on 32-bit platforms; The passing NumPy arrays with the `np.int32` dtype to cppyy overloads that take array pointers in C++ generally works well, but not on 32-bit platforms like `debian10-i386` in the nightly build matrix. To reproduce the issue, you can run this code snippet on one of the 32-bit machines like `pcepsft10`:. ```Python. import ROOT. import numpy as np. arr = np.array([0, 2], dtype=np.int32). ROOT.gInterpreter.Declare(. """""". void myprint(Int_t * arr, std::size_t n) {. for(std::size_t i = 0; i < n; ++i) {. std::cout << arr[i] << std::endl;. }. }. """""". ). ROOT.myprint(arr, len(arr)). ```. Fixing this PyROOT issue will make the `projectroot.runtutorials.tutorial_fit_combinedFit_py` unit test pass again (it is currently failing in the `ROOT-debian10-i386,default,master` nightly builds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9846
https://github.com/root-project/root/issues/9846:801,energy efficiency,current,currently,801,"[PyROOT] Conversion from `int32` numpy array to `Int_t *` doesn't work on 32-bit platforms; The passing NumPy arrays with the `np.int32` dtype to cppyy overloads that take array pointers in C++ generally works well, but not on 32-bit platforms like `debian10-i386` in the nightly build matrix. To reproduce the issue, you can run this code snippet on one of the 32-bit machines like `pcepsft10`:. ```Python. import ROOT. import numpy as np. arr = np.array([0, 2], dtype=np.int32). ROOT.gInterpreter.Declare(. """""". void myprint(Int_t * arr, std::size_t n) {. for(std::size_t i = 0; i < n; ++i) {. std::cout << arr[i] << std::endl;. }. }. """""". ). ROOT.myprint(arr, len(arr)). ```. Fixing this PyROOT issue will make the `projectroot.runtutorials.tutorial_fit_combinedFit_py` unit test pass again (it is currently failing in the `ROOT-debian10-i386,default,master` nightly builds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9846
https://github.com/root-project/root/issues/9846:9,interoperability,Convers,Conversion,9,"[PyROOT] Conversion from `int32` numpy array to `Int_t *` doesn't work on 32-bit platforms; The passing NumPy arrays with the `np.int32` dtype to cppyy overloads that take array pointers in C++ generally works well, but not on 32-bit platforms like `debian10-i386` in the nightly build matrix. To reproduce the issue, you can run this code snippet on one of the 32-bit machines like `pcepsft10`:. ```Python. import ROOT. import numpy as np. arr = np.array([0, 2], dtype=np.int32). ROOT.gInterpreter.Declare(. """""". void myprint(Int_t * arr, std::size_t n) {. for(std::size_t i = 0; i < n; ++i) {. std::cout << arr[i] << std::endl;. }. }. """""". ). ROOT.myprint(arr, len(arr)). ```. Fixing this PyROOT issue will make the `projectroot.runtutorials.tutorial_fit_combinedFit_py` unit test pass again (it is currently failing in the `ROOT-debian10-i386,default,master` nightly builds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9846
https://github.com/root-project/root/issues/9846:81,interoperability,platform,platforms,81,"[PyROOT] Conversion from `int32` numpy array to `Int_t *` doesn't work on 32-bit platforms; The passing NumPy arrays with the `np.int32` dtype to cppyy overloads that take array pointers in C++ generally works well, but not on 32-bit platforms like `debian10-i386` in the nightly build matrix. To reproduce the issue, you can run this code snippet on one of the 32-bit machines like `pcepsft10`:. ```Python. import ROOT. import numpy as np. arr = np.array([0, 2], dtype=np.int32). ROOT.gInterpreter.Declare(. """""". void myprint(Int_t * arr, std::size_t n) {. for(std::size_t i = 0; i < n; ++i) {. std::cout << arr[i] << std::endl;. }. }. """""". ). ROOT.myprint(arr, len(arr)). ```. Fixing this PyROOT issue will make the `projectroot.runtutorials.tutorial_fit_combinedFit_py` unit test pass again (it is currently failing in the `ROOT-debian10-i386,default,master` nightly builds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9846
https://github.com/root-project/root/issues/9846:234,interoperability,platform,platforms,234,"[PyROOT] Conversion from `int32` numpy array to `Int_t *` doesn't work on 32-bit platforms; The passing NumPy arrays with the `np.int32` dtype to cppyy overloads that take array pointers in C++ generally works well, but not on 32-bit platforms like `debian10-i386` in the nightly build matrix. To reproduce the issue, you can run this code snippet on one of the 32-bit machines like `pcepsft10`:. ```Python. import ROOT. import numpy as np. arr = np.array([0, 2], dtype=np.int32). ROOT.gInterpreter.Declare(. """""". void myprint(Int_t * arr, std::size_t n) {. for(std::size_t i = 0; i < n; ++i) {. std::cout << arr[i] << std::endl;. }. }. """""". ). ROOT.myprint(arr, len(arr)). ```. Fixing this PyROOT issue will make the `projectroot.runtutorials.tutorial_fit_combinedFit_py` unit test pass again (it is currently failing in the `ROOT-debian10-i386,default,master` nightly builds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9846
https://github.com/root-project/root/issues/9846:58,reliability,doe,doesn,58,"[PyROOT] Conversion from `int32` numpy array to `Int_t *` doesn't work on 32-bit platforms; The passing NumPy arrays with the `np.int32` dtype to cppyy overloads that take array pointers in C++ generally works well, but not on 32-bit platforms like `debian10-i386` in the nightly build matrix. To reproduce the issue, you can run this code snippet on one of the 32-bit machines like `pcepsft10`:. ```Python. import ROOT. import numpy as np. arr = np.array([0, 2], dtype=np.int32). ROOT.gInterpreter.Declare(. """""". void myprint(Int_t * arr, std::size_t n) {. for(std::size_t i = 0; i < n; ++i) {. std::cout << arr[i] << std::endl;. }. }. """""". ). ROOT.myprint(arr, len(arr)). ```. Fixing this PyROOT issue will make the `projectroot.runtutorials.tutorial_fit_combinedFit_py` unit test pass again (it is currently failing in the `ROOT-debian10-i386,default,master` nightly builds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9846
https://github.com/root-project/root/issues/9846:811,reliability,fail,failing,811,"[PyROOT] Conversion from `int32` numpy array to `Int_t *` doesn't work on 32-bit platforms; The passing NumPy arrays with the `np.int32` dtype to cppyy overloads that take array pointers in C++ generally works well, but not on 32-bit platforms like `debian10-i386` in the nightly build matrix. To reproduce the issue, you can run this code snippet on one of the 32-bit machines like `pcepsft10`:. ```Python. import ROOT. import numpy as np. arr = np.array([0, 2], dtype=np.int32). ROOT.gInterpreter.Declare(. """""". void myprint(Int_t * arr, std::size_t n) {. for(std::size_t i = 0; i < n; ++i) {. std::cout << arr[i] << std::endl;. }. }. """""". ). ROOT.myprint(arr, len(arr)). ```. Fixing this PyROOT issue will make the `projectroot.runtutorials.tutorial_fit_combinedFit_py` unit test pass again (it is currently failing in the `ROOT-debian10-i386,default,master` nightly builds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9846
https://github.com/root-project/root/issues/9846:778,safety,test,test,778,"[PyROOT] Conversion from `int32` numpy array to `Int_t *` doesn't work on 32-bit platforms; The passing NumPy arrays with the `np.int32` dtype to cppyy overloads that take array pointers in C++ generally works well, but not on 32-bit platforms like `debian10-i386` in the nightly build matrix. To reproduce the issue, you can run this code snippet on one of the 32-bit machines like `pcepsft10`:. ```Python. import ROOT. import numpy as np. arr = np.array([0, 2], dtype=np.int32). ROOT.gInterpreter.Declare(. """""". void myprint(Int_t * arr, std::size_t n) {. for(std::size_t i = 0; i < n; ++i) {. std::cout << arr[i] << std::endl;. }. }. """""". ). ROOT.myprint(arr, len(arr)). ```. Fixing this PyROOT issue will make the `projectroot.runtutorials.tutorial_fit_combinedFit_py` unit test pass again (it is currently failing in the `ROOT-debian10-i386,default,master` nightly builds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9846
https://github.com/root-project/root/issues/9846:773,testability,unit,unit,773,"[PyROOT] Conversion from `int32` numpy array to `Int_t *` doesn't work on 32-bit platforms; The passing NumPy arrays with the `np.int32` dtype to cppyy overloads that take array pointers in C++ generally works well, but not on 32-bit platforms like `debian10-i386` in the nightly build matrix. To reproduce the issue, you can run this code snippet on one of the 32-bit machines like `pcepsft10`:. ```Python. import ROOT. import numpy as np. arr = np.array([0, 2], dtype=np.int32). ROOT.gInterpreter.Declare(. """""". void myprint(Int_t * arr, std::size_t n) {. for(std::size_t i = 0; i < n; ++i) {. std::cout << arr[i] << std::endl;. }. }. """""". ). ROOT.myprint(arr, len(arr)). ```. Fixing this PyROOT issue will make the `projectroot.runtutorials.tutorial_fit_combinedFit_py` unit test pass again (it is currently failing in the `ROOT-debian10-i386,default,master` nightly builds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9846
https://github.com/root-project/root/issues/9846:778,testability,test,test,778,"[PyROOT] Conversion from `int32` numpy array to `Int_t *` doesn't work on 32-bit platforms; The passing NumPy arrays with the `np.int32` dtype to cppyy overloads that take array pointers in C++ generally works well, but not on 32-bit platforms like `debian10-i386` in the nightly build matrix. To reproduce the issue, you can run this code snippet on one of the 32-bit machines like `pcepsft10`:. ```Python. import ROOT. import numpy as np. arr = np.array([0, 2], dtype=np.int32). ROOT.gInterpreter.Declare(. """""". void myprint(Int_t * arr, std::size_t n) {. for(std::size_t i = 0; i < n; ++i) {. std::cout << arr[i] << std::endl;. }. }. """""". ). ROOT.myprint(arr, len(arr)). ```. Fixing this PyROOT issue will make the `projectroot.runtutorials.tutorial_fit_combinedFit_py` unit test pass again (it is currently failing in the `ROOT-debian10-i386,default,master` nightly builds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9846
https://github.com/root-project/root/issues/9847:427,deployability,build,build,427,Changing type `std::map<const std::string>` to `std::map<std::string>` can cause unexpected cling-related crashes in Python on macOS; Changing the type of a `std::map<const std::string>` to `std::map<std::string>` causes unexpected cling-related crashes in Python on macOS 11 and 12. I don't understand where they are coming from other than they are deep in cling. They can be reproduced as follows:. * connect to some macos11 build node like `macphsft23` and source the latest root nightly build. * manually revert parts of e206f76 (i.e. removing the `const` from `const std::string`). * run this in Python:. ```Python. import ROOT. ROOT.RooJSONFactoryWSTool.pdfImportExpressions(). ```. See https://github.com/root-project/root/pull/9810 for some previous discussions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9847
https://github.com/root-project/root/issues/9847:491,deployability,build,build,491,Changing type `std::map<const std::string>` to `std::map<std::string>` can cause unexpected cling-related crashes in Python on macOS; Changing the type of a `std::map<const std::string>` to `std::map<std::string>` causes unexpected cling-related crashes in Python on macOS 11 and 12. I don't understand where they are coming from other than they are deep in cling. They can be reproduced as follows:. * connect to some macos11 build node like `macphsft23` and source the latest root nightly build. * manually revert parts of e206f76 (i.e. removing the `const` from `const std::string`). * run this in Python:. ```Python. import ROOT. ROOT.RooJSONFactoryWSTool.pdfImportExpressions(). ```. See https://github.com/root-project/root/pull/9810 for some previous discussions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9847
https://github.com/root-project/root/issues/9847:292,testability,understand,understand,292,Changing type `std::map<const std::string>` to `std::map<std::string>` can cause unexpected cling-related crashes in Python on macOS; Changing the type of a `std::map<const std::string>` to `std::map<std::string>` causes unexpected cling-related crashes in Python on macOS 11 and 12. I don't understand where they are coming from other than they are deep in cling. They can be reproduced as follows:. * connect to some macos11 build node like `macphsft23` and source the latest root nightly build. * manually revert parts of e206f76 (i.e. removing the `const` from `const std::string`). * run this in Python:. ```Python. import ROOT. ROOT.RooJSONFactoryWSTool.pdfImportExpressions(). ```. See https://github.com/root-project/root/pull/9810 for some previous discussions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9847
https://github.com/root-project/root/pull/9848:87,modifiability,paramet,parameters-of-tgeomaterial-name-a-z-rho,87,[skip-ci] document ctor; see: https://root-forum.cern.ch/t/what-are-the-meaning-of-the-parameters-of-tgeomaterial-name-a-z-rho/48705/4.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9848
https://github.com/root-project/root/pull/9848:10,usability,document,document,10,[skip-ci] document ctor; see: https://root-forum.cern.ch/t/what-are-the-meaning-of-the-parameters-of-tgeomaterial-name-a-z-rho/48705/4.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9848
https://github.com/root-project/root/pull/9849:0,safety,Avoid,Avoid,0,Avoid testing that an exception is thrown by cling on Apple M1; Backport of #9544,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9849
https://github.com/root-project/root/pull/9849:6,safety,test,testing,6,Avoid testing that an exception is thrown by cling on Apple M1; Backport of #9544,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9849
https://github.com/root-project/root/pull/9849:22,safety,except,exception,22,Avoid testing that an exception is thrown by cling on Apple M1; Backport of #9544,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9849
https://github.com/root-project/root/pull/9849:6,testability,test,testing,6,Avoid testing that an exception is thrown by cling on Apple M1; Backport of #9544,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9849
https://github.com/root-project/root/issues/9850:14,deployability,unload,unloading,14,"[cling] Crash unloading a templated function containing a lambda expression; // cling problem with lambda functions inside of template functions. //. // A code fragment illustrating the problem is given below. . // Starting ROOT and running the macro once works, running it . // a second time produces a crash. Commenting the (not-even used). // lambda function avoid the crash. The macro can be run as often as. // one likes. //. // ROOT 6.20/02 on MacOSX 10.15.06. // root [1] .x crash.cc -> works. // root [2] .x crash.cc -> crash. template<class T> T square(T x) {. auto crash = [](double x) {return x;}; // comment this line to avoid the crash. return x*x;. }. void crash(). {. printf(""%d\n"",square(2));. }.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9850
https://github.com/root-project/root/issues/9850:45,deployability,contain,containing,45,"[cling] Crash unloading a templated function containing a lambda expression; // cling problem with lambda functions inside of template functions. //. // A code fragment illustrating the problem is given below. . // Starting ROOT and running the macro once works, running it . // a second time produces a crash. Commenting the (not-even used). // lambda function avoid the crash. The macro can be run as often as. // one likes. //. // ROOT 6.20/02 on MacOSX 10.15.06. // root [1] .x crash.cc -> works. // root [2] .x crash.cc -> crash. template<class T> T square(T x) {. auto crash = [](double x) {return x;}; // comment this line to avoid the crash. return x*x;. }. void crash(). {. printf(""%d\n"",square(2));. }.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9850
https://github.com/root-project/root/issues/9850:288,performance,time,time,288,"[cling] Crash unloading a templated function containing a lambda expression; // cling problem with lambda functions inside of template functions. //. // A code fragment illustrating the problem is given below. . // Starting ROOT and running the macro once works, running it . // a second time produces a crash. Commenting the (not-even used). // lambda function avoid the crash. The macro can be run as often as. // one likes. //. // ROOT 6.20/02 on MacOSX 10.15.06. // root [1] .x crash.cc -> works. // root [2] .x crash.cc -> crash. template<class T> T square(T x) {. auto crash = [](double x) {return x;}; // comment this line to avoid the crash. return x*x;. }. void crash(). {. printf(""%d\n"",square(2));. }.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9850
https://github.com/root-project/root/issues/9850:362,safety,avoid,avoid,362,"[cling] Crash unloading a templated function containing a lambda expression; // cling problem with lambda functions inside of template functions. //. // A code fragment illustrating the problem is given below. . // Starting ROOT and running the macro once works, running it . // a second time produces a crash. Commenting the (not-even used). // lambda function avoid the crash. The macro can be run as often as. // one likes. //. // ROOT 6.20/02 on MacOSX 10.15.06. // root [1] .x crash.cc -> works. // root [2] .x crash.cc -> crash. template<class T> T square(T x) {. auto crash = [](double x) {return x;}; // comment this line to avoid the crash. return x*x;. }. void crash(). {. printf(""%d\n"",square(2));. }.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9850
https://github.com/root-project/root/issues/9850:633,safety,avoid,avoid,633,"[cling] Crash unloading a templated function containing a lambda expression; // cling problem with lambda functions inside of template functions. //. // A code fragment illustrating the problem is given below. . // Starting ROOT and running the macro once works, running it . // a second time produces a crash. Commenting the (not-even used). // lambda function avoid the crash. The macro can be run as often as. // one likes. //. // ROOT 6.20/02 on MacOSX 10.15.06. // root [1] .x crash.cc -> works. // root [2] .x crash.cc -> crash. template<class T> T square(T x) {. auto crash = [](double x) {return x;}; // comment this line to avoid the crash. return x*x;. }. void crash(). {. printf(""%d\n"",square(2));. }.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9850
https://github.com/root-project/root/pull/9851:122,deployability,releas,release,122,"[RF] Remove deprecated RooList and avoid remaining usage of it in RooFit; The RooList was deprecated in the previous v626 release, and is now. removed. A RooList was just a `TList` with added member functions for. convenience, so it was never necessary to have this as a separate class. supported in IO. The RooList was still used in two RooFit classes until now: `RooPlot`. and `SamplingDistPlot`. This commit also removes this remaining usage. In the case of `SamplingDistPlot`, none of the special member functions were. used: the `RooList` could be replaced trivially with a `TList`. In `RooPlot`, the `RooList` was replaced with a. `std::vector<std::pair<TObject*,std::string>>`, for which it was easy to. reimplement the algorithms that were covered by the former `RooList`. member functions. The backwards compatibility with existing RooPlot is tests by. `stressRooFit`, as the reference file stores RooPlots with the. `RooList`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9851
https://github.com/root-project/root/pull/9851:813,interoperability,compatib,compatibility,813,"[RF] Remove deprecated RooList and avoid remaining usage of it in RooFit; The RooList was deprecated in the previous v626 release, and is now. removed. A RooList was just a `TList` with added member functions for. convenience, so it was never necessary to have this as a separate class. supported in IO. The RooList was still used in two RooFit classes until now: `RooPlot`. and `SamplingDistPlot`. This commit also removes this remaining usage. In the case of `SamplingDistPlot`, none of the special member functions were. used: the `RooList` could be replaced trivially with a `TList`. In `RooPlot`, the `RooList` was replaced with a. `std::vector<std::pair<TObject*,std::string>>`, for which it was easy to. reimplement the algorithms that were covered by the former `RooList`. member functions. The backwards compatibility with existing RooPlot is tests by. `stressRooFit`, as the reference file stores RooPlots with the. `RooList`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9851
https://github.com/root-project/root/pull/9851:35,safety,avoid,avoid,35,"[RF] Remove deprecated RooList and avoid remaining usage of it in RooFit; The RooList was deprecated in the previous v626 release, and is now. removed. A RooList was just a `TList` with added member functions for. convenience, so it was never necessary to have this as a separate class. supported in IO. The RooList was still used in two RooFit classes until now: `RooPlot`. and `SamplingDistPlot`. This commit also removes this remaining usage. In the case of `SamplingDistPlot`, none of the special member functions were. used: the `RooList` could be replaced trivially with a `TList`. In `RooPlot`, the `RooList` was replaced with a. `std::vector<std::pair<TObject*,std::string>>`, for which it was easy to. reimplement the algorithms that were covered by the former `RooList`. member functions. The backwards compatibility with existing RooPlot is tests by. `stressRooFit`, as the reference file stores RooPlots with the. `RooList`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9851
https://github.com/root-project/root/pull/9851:852,safety,test,tests,852,"[RF] Remove deprecated RooList and avoid remaining usage of it in RooFit; The RooList was deprecated in the previous v626 release, and is now. removed. A RooList was just a `TList` with added member functions for. convenience, so it was never necessary to have this as a separate class. supported in IO. The RooList was still used in two RooFit classes until now: `RooPlot`. and `SamplingDistPlot`. This commit also removes this remaining usage. In the case of `SamplingDistPlot`, none of the special member functions were. used: the `RooList` could be replaced trivially with a `TList`. In `RooPlot`, the `RooList` was replaced with a. `std::vector<std::pair<TObject*,std::string>>`, for which it was easy to. reimplement the algorithms that were covered by the former `RooList`. member functions. The backwards compatibility with existing RooPlot is tests by. `stressRooFit`, as the reference file stores RooPlots with the. `RooList`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9851
https://github.com/root-project/root/pull/9851:852,testability,test,tests,852,"[RF] Remove deprecated RooList and avoid remaining usage of it in RooFit; The RooList was deprecated in the previous v626 release, and is now. removed. A RooList was just a `TList` with added member functions for. convenience, so it was never necessary to have this as a separate class. supported in IO. The RooList was still used in two RooFit classes until now: `RooPlot`. and `SamplingDistPlot`. This commit also removes this remaining usage. In the case of `SamplingDistPlot`, none of the special member functions were. used: the `RooList` could be replaced trivially with a `TList`. In `RooPlot`, the `RooList` was replaced with a. `std::vector<std::pair<TObject*,std::string>>`, for which it was easy to. reimplement the algorithms that were covered by the former `RooList`. member functions. The backwards compatibility with existing RooPlot is tests by. `stressRooFit`, as the reference file stores RooPlots with the. `RooList`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9851
https://github.com/root-project/root/pull/9851:287,usability,support,supported,287,"[RF] Remove deprecated RooList and avoid remaining usage of it in RooFit; The RooList was deprecated in the previous v626 release, and is now. removed. A RooList was just a `TList` with added member functions for. convenience, so it was never necessary to have this as a separate class. supported in IO. The RooList was still used in two RooFit classes until now: `RooPlot`. and `SamplingDistPlot`. This commit also removes this remaining usage. In the case of `SamplingDistPlot`, none of the special member functions were. used: the `RooList` could be replaced trivially with a `TList`. In `RooPlot`, the `RooList` was replaced with a. `std::vector<std::pair<TObject*,std::string>>`, for which it was easy to. reimplement the algorithms that were covered by the former `RooList`. member functions. The backwards compatibility with existing RooPlot is tests by. `stressRooFit`, as the reference file stores RooPlots with the. `RooList`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9851
https://github.com/root-project/root/pull/9855:43,safety,test,test,43,Backport in 6.26 fix for KolmogorovSmirnov test in GoFTest; This Pull request is a back port of the fix for the KS 1 sample test . (see #9819 ). This PR fixes #9636.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9855
https://github.com/root-project/root/pull/9855:124,safety,test,test,124,Backport in 6.26 fix for KolmogorovSmirnov test in GoFTest; This Pull request is a back port of the fix for the KS 1 sample test . (see #9819 ). This PR fixes #9636.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9855
https://github.com/root-project/root/pull/9855:43,testability,test,test,43,Backport in 6.26 fix for KolmogorovSmirnov test in GoFTest; This Pull request is a back port of the fix for the KS 1 sample test . (see #9819 ). This PR fixes #9636.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9855
https://github.com/root-project/root/pull/9855:124,testability,test,test,124,Backport in 6.26 fix for KolmogorovSmirnov test in GoFTest; This Pull request is a back port of the fix for the KS 1 sample test . (see #9819 ). This PR fixes #9636.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9855
https://github.com/root-project/root/pull/9856:10,deployability,Updat,Update,10,"[skip-ci] Update v628 patch notes regarding RDF; There is also 1 item from v626, that should be in v628 - that is the `GraphAsymmErrors` action.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9856
https://github.com/root-project/root/pull/9856:22,deployability,patch,patch,22,"[skip-ci] Update v628 patch notes regarding RDF; There is also 1 item from v626, that should be in v628 - that is the `GraphAsymmErrors` action.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9856
https://github.com/root-project/root/pull/9856:10,safety,Updat,Update,10,"[skip-ci] Update v628 patch notes regarding RDF; There is also 1 item from v626, that should be in v628 - that is the `GraphAsymmErrors` action.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9856
https://github.com/root-project/root/pull/9856:22,safety,patch,patch,22,"[skip-ci] Update v628 patch notes regarding RDF; There is also 1 item from v626, that should be in v628 - that is the `GraphAsymmErrors` action.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9856
https://github.com/root-project/root/pull/9856:10,security,Updat,Update,10,"[skip-ci] Update v628 patch notes regarding RDF; There is also 1 item from v626, that should be in v628 - that is the `GraphAsymmErrors` action.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9856
https://github.com/root-project/root/pull/9856:22,security,patch,patch,22,"[skip-ci] Update v628 patch notes regarding RDF; There is also 1 item from v626, that should be in v628 - that is the `GraphAsymmErrors` action.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9856
https://github.com/root-project/root/issues/9859:749,availability,error,error,749,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:349,energy efficiency,model,model,349,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:512,energy efficiency,model,model,512,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:557,energy efficiency,Draw,DrawOption,557,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:603,performance,time,time,603,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:749,performance,error,error,749,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:5,safety,Avoid,Avoid,5,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:749,safety,error,error,749,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:349,security,model,model,349,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:512,security,model,model,512,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:79,usability,Visual,VisualizeError,79,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:137,usability,Visual,VisualizeError,137,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:369,usability,Visual,VisualizeError,369,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:749,usability,error,error,749,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:772,usability,Visual,VisualizeError,772,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:802,usability,behavi,behavior,802,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:853,usability,Visual,VisualizeError,853,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/issues/9859:887,usability,command,command,887,"[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(); If one uses the `VisualizeError` and `FillColor` options of [RooAbsReal::plotOn()](https://root.cern.ch/doc/master/classRooAbsReal.html#a5d22644c9cc8178ea1c9dca93fdab48e), for example like this:. ```C++. using namespace RooFit;. model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange));. ```. You get a false warning:. ```. WARNING:Plotting -- Fill color or style was set for plotting ""model"", but these only have an effect when. 'DrawOption(""F"")' for fill is used at the same time. ```. That warning should not appear there, because `FillColor` or `FillStyle` actually have an effect because the define the filling of the error band enabled by `VisualizeError`. The expected behavior is:. * the warning should only appear if `VisualizeError` is not given as a command argument. To reproduce the problem: run the [rf610_visualerror.C tutorial](https://github.com/root-project/root/blob/master/tutorials/roofit/rf610_visualerror.C).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9859
https://github.com/root-project/root/pull/9861:27,interoperability,distribut,distributed,27,[6.26] Backport HistoND to distributed RDataFrame ; Backport of https://github.com/root-project/root/pull/9854,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9861
https://github.com/root-project/root/pull/9866:40,deployability,depend,dependencies,40,"[win] Fix window position & add missing dependencies; Make sure the y position of a window is not negative (hiding the title bar) and add missing dependencies on the `iconv`, `glib`, and `gdk` source code",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9866
https://github.com/root-project/root/pull/9866:146,deployability,depend,dependencies,146,"[win] Fix window position & add missing dependencies; Make sure the y position of a window is not negative (hiding the title bar) and add missing dependencies on the `iconv`, `glib`, and `gdk` source code",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9866
https://github.com/root-project/root/pull/9866:40,integrability,depend,dependencies,40,"[win] Fix window position & add missing dependencies; Make sure the y position of a window is not negative (hiding the title bar) and add missing dependencies on the `iconv`, `glib`, and `gdk` source code",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9866
https://github.com/root-project/root/pull/9866:146,integrability,depend,dependencies,146,"[win] Fix window position & add missing dependencies; Make sure the y position of a window is not negative (hiding the title bar) and add missing dependencies on the `iconv`, `glib`, and `gdk` source code",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9866
https://github.com/root-project/root/pull/9866:40,modifiability,depend,dependencies,40,"[win] Fix window position & add missing dependencies; Make sure the y position of a window is not negative (hiding the title bar) and add missing dependencies on the `iconv`, `glib`, and `gdk` source code",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9866
https://github.com/root-project/root/pull/9866:146,modifiability,depend,dependencies,146,"[win] Fix window position & add missing dependencies; Make sure the y position of a window is not negative (hiding the title bar) and add missing dependencies on the `iconv`, `glib`, and `gdk` source code",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9866
https://github.com/root-project/root/pull/9866:40,safety,depend,dependencies,40,"[win] Fix window position & add missing dependencies; Make sure the y position of a window is not negative (hiding the title bar) and add missing dependencies on the `iconv`, `glib`, and `gdk` source code",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9866
https://github.com/root-project/root/pull/9866:146,safety,depend,dependencies,146,"[win] Fix window position & add missing dependencies; Make sure the y position of a window is not negative (hiding the title bar) and add missing dependencies on the `iconv`, `glib`, and `gdk` source code",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9866
https://github.com/root-project/root/pull/9866:40,testability,depend,dependencies,40,"[win] Fix window position & add missing dependencies; Make sure the y position of a window is not negative (hiding the title bar) and add missing dependencies on the `iconv`, `glib`, and `gdk` source code",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9866
https://github.com/root-project/root/pull/9866:146,testability,depend,dependencies,146,"[win] Fix window position & add missing dependencies; Make sure the y position of a window is not negative (hiding the title bar) and add missing dependencies on the `iconv`, `glib`, and `gdk` source code",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9866
https://github.com/root-project/root/pull/9867:18,availability,operat,operations,18,Declare supported operations in distributed mode only once; No need to have two separate places where the list of supported operations in distributed mode is declared. This PR also avoids that the operations are redeclared everytime in the `_classify_operation` method (now removed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9867
https://github.com/root-project/root/pull/9867:124,availability,operat,operations,124,Declare supported operations in distributed mode only once; No need to have two separate places where the list of supported operations in distributed mode is declared. This PR also avoids that the operations are redeclared everytime in the `_classify_operation` method (now removed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9867
https://github.com/root-project/root/pull/9867:197,availability,operat,operations,197,Declare supported operations in distributed mode only once; No need to have two separate places where the list of supported operations in distributed mode is declared. This PR also avoids that the operations are redeclared everytime in the `_classify_operation` method (now removed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9867
https://github.com/root-project/root/pull/9867:32,interoperability,distribut,distributed,32,Declare supported operations in distributed mode only once; No need to have two separate places where the list of supported operations in distributed mode is declared. This PR also avoids that the operations are redeclared everytime in the `_classify_operation` method (now removed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9867
https://github.com/root-project/root/pull/9867:138,interoperability,distribut,distributed,138,Declare supported operations in distributed mode only once; No need to have two separate places where the list of supported operations in distributed mode is declared. This PR also avoids that the operations are redeclared everytime in the `_classify_operation` method (now removed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9867
https://github.com/root-project/root/pull/9867:181,safety,avoid,avoids,181,Declare supported operations in distributed mode only once; No need to have two separate places where the list of supported operations in distributed mode is declared. This PR also avoids that the operations are redeclared everytime in the `_classify_operation` method (now removed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9867
https://github.com/root-project/root/pull/9867:8,usability,support,supported,8,Declare supported operations in distributed mode only once; No need to have two separate places where the list of supported operations in distributed mode is declared. This PR also avoids that the operations are redeclared everytime in the `_classify_operation` method (now removed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9867
https://github.com/root-project/root/pull/9867:114,usability,support,supported,114,Declare supported operations in distributed mode only once; No need to have two separate places where the list of supported operations in distributed mode is declared. This PR also avoids that the operations are redeclared everytime in the `_classify_operation` method (now removed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9867
https://github.com/root-project/root/pull/9868:57,energy efficiency,draw,draw,57,"Adjust waves.C tutorials [skip-ci]; Use proper ""samecol"" draw options for TF2 instead of ""samecolorz"". Use TColor::GetColor() to create new TColor instances. Format code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9868
https://github.com/root-project/root/pull/9868:158,interoperability,Format,Format,158,"Adjust waves.C tutorials [skip-ci]; Use proper ""samecol"" draw options for TF2 instead of ""samecolorz"". Use TColor::GetColor() to create new TColor instances. Format code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9868
https://github.com/root-project/root/issues/9869:5,energy efficiency,Draw,Draw,5,"TF2::Draw crashes when called with ""col"" draw option; To reproduce, just replace draw option in `tutorials/graphs/waves.C` macro . f0->Draw(""col"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9869
https://github.com/root-project/root/issues/9869:41,energy efficiency,draw,draw,41,"TF2::Draw crashes when called with ""col"" draw option; To reproduce, just replace draw option in `tutorials/graphs/waves.C` macro . f0->Draw(""col"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9869
https://github.com/root-project/root/issues/9869:81,energy efficiency,draw,draw,81,"TF2::Draw crashes when called with ""col"" draw option; To reproduce, just replace draw option in `tutorials/graphs/waves.C` macro . f0->Draw(""col"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9869
https://github.com/root-project/root/issues/9869:135,energy efficiency,Draw,Draw,135,"TF2::Draw crashes when called with ""col"" draw option; To reproduce, just replace draw option in `tutorials/graphs/waves.C` macro . f0->Draw(""col"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9869
https://github.com/root-project/root/issues/9870:187,energy efficiency,Draw,Draw,187,"By default, bars are invisible in bar plots ; Reproducer:. ```cpp. void repro() {. double xs[] = {0,1,2}, ys[] = {1,2,3};. auto *g = new TGraph(3, xs, ys);. //g->SetFillColor(kBlue);. g->Draw(""AB"");. }. ```. shows:. ![image](https://user-images.githubusercontent.com/10999034/153621641-2cc3ce91-3240-40c7-b342-8a13efad09f7.png). Uncommenting the `SetFillColor` fixes the problem, but the first and last bars are now cut by the axes limits (a separate issue, but maybe worth pointing out):. ![image](https://user-images.githubusercontent.com/10999034/153621784-cefe215a-6de9-4905-b38c-786e2d1e9c45.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9870
https://github.com/root-project/root/issues/9870:233,usability,user,user-images,233,"By default, bars are invisible in bar plots ; Reproducer:. ```cpp. void repro() {. double xs[] = {0,1,2}, ys[] = {1,2,3};. auto *g = new TGraph(3, xs, ys);. //g->SetFillColor(kBlue);. g->Draw(""AB"");. }. ```. shows:. ![image](https://user-images.githubusercontent.com/10999034/153621641-2cc3ce91-3240-40c7-b342-8a13efad09f7.png). Uncommenting the `SetFillColor` fixes the problem, but the first and last bars are now cut by the axes limits (a separate issue, but maybe worth pointing out):. ![image](https://user-images.githubusercontent.com/10999034/153621784-cefe215a-6de9-4905-b38c-786e2d1e9c45.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9870
https://github.com/root-project/root/issues/9870:507,usability,user,user-images,507,"By default, bars are invisible in bar plots ; Reproducer:. ```cpp. void repro() {. double xs[] = {0,1,2}, ys[] = {1,2,3};. auto *g = new TGraph(3, xs, ys);. //g->SetFillColor(kBlue);. g->Draw(""AB"");. }. ```. shows:. ![image](https://user-images.githubusercontent.com/10999034/153621641-2cc3ce91-3240-40c7-b342-8a13efad09f7.png). Uncommenting the `SetFillColor` fixes the problem, but the first and last bars are now cut by the axes limits (a separate issue, but maybe worth pointing out):. ![image](https://user-images.githubusercontent.com/10999034/153621784-cefe215a-6de9-4905-b38c-786e2d1e9c45.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9870
https://github.com/root-project/root/pull/9871:309,deployability,releas,released,309,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:52,integrability,pub,public,52,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:59,integrability,interfac,interface,59,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:210,integrability,pub,public,210,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:217,integrability,interfac,interfaces,217,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:246,integrability,pub,public,246,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:253,integrability,interfac,interfaces,253,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:375,integrability,Wrap,Wrapper,375,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:59,interoperability,interfac,interface,59,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:217,interoperability,interfac,interfaces,217,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:253,interoperability,interfac,interfaces,253,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:375,interoperability,Wrapper,Wrapper,375,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:408,interoperability,specif,specific,408,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:455,interoperability,format,format,455,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:59,modifiability,interfac,interface,59,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:217,modifiability,interfac,interfaces,217,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:253,modifiability,interfac,interfaces,253,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:437,safety,test,testing,437,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:437,testability,test,testing,437,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9871:34,usability,minim,minimization,34,"[RF] Remove details of likelihood minimization from public interface; * moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations. of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the. public interfaces. * removing these public interfaces is unproblematic because they have. not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can. still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9871
https://github.com/root-project/root/pull/9872:51,deployability,build,build,51,"Revert ""[cmake] simplify copies of misc files into build directory""; Reverts root-project/root#9834",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9872
https://github.com/root-project/root/pull/9872:16,testability,simpl,simplify,16,"Revert ""[cmake] simplify copies of misc files into build directory""; Reverts root-project/root#9834",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9872
https://github.com/root-project/root/pull/9872:16,usability,simpl,simplify,16,"Revert ""[cmake] simplify copies of misc files into build directory""; Reverts root-project/root#9834",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9872
https://github.com/root-project/root/pull/9873:58,integrability,pub,public,58,[v626][RF] Remove details of likelihood minimization from public interface; Backport of https://github.com/root-project/root/pull/9871.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9873
https://github.com/root-project/root/pull/9873:65,integrability,interfac,interface,65,[v626][RF] Remove details of likelihood minimization from public interface; Backport of https://github.com/root-project/root/pull/9871.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9873
https://github.com/root-project/root/pull/9873:65,interoperability,interfac,interface,65,[v626][RF] Remove details of likelihood minimization from public interface; Backport of https://github.com/root-project/root/pull/9871.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9873
https://github.com/root-project/root/pull/9873:65,modifiability,interfac,interface,65,[v626][RF] Remove details of likelihood minimization from public interface; Backport of https://github.com/root-project/root/pull/9871.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9873
https://github.com/root-project/root/pull/9873:40,usability,minim,minimization,40,[v626][RF] Remove details of likelihood minimization from public interface; Backport of https://github.com/root-project/root/pull/9871.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9873
https://github.com/root-project/root/pull/9874:594,availability,down,downcasting,594,"[RF] Move Roo(Abs)MinimizerFcn out of public RooFit interfaces; The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are. implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users. that this should be no problem, and doing so will greatly increase the. developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9874
https://github.com/root-project/root/pull/9874:342,deployability,updat,updating,342,"[RF] Move Roo(Abs)MinimizerFcn out of public RooFit interfaces; The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are. implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users. that this should be no problem, and doing so will greatly increase the. developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9874
https://github.com/root-project/root/pull/9874:422,deployability,releas,release,422,"[RF] Move Roo(Abs)MinimizerFcn out of public RooFit interfaces; The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are. implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users. that this should be no problem, and doing so will greatly increase the. developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9874
https://github.com/root-project/root/pull/9874:38,integrability,pub,public,38,"[RF] Move Roo(Abs)MinimizerFcn out of public RooFit interfaces; The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are. implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users. that this should be no problem, and doing so will greatly increase the. developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9874
https://github.com/root-project/root/pull/9874:52,integrability,interfac,interfaces,52,"[RF] Move Roo(Abs)MinimizerFcn out of public RooFit interfaces; The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are. implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users. that this should be no problem, and doing so will greatly increase the. developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9874
https://github.com/root-project/root/pull/9874:515,integrability,pub,public,515,"[RF] Move Roo(Abs)MinimizerFcn out of public RooFit interfaces; The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are. implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users. that this should be no problem, and doing so will greatly increase the. developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9874
https://github.com/root-project/root/pull/9874:52,interoperability,interfac,interfaces,52,"[RF] Move Roo(Abs)MinimizerFcn out of public RooFit interfaces; The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are. implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users. that this should be no problem, and doing so will greatly increase the. developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9874
https://github.com/root-project/root/pull/9874:52,modifiability,interfac,interfaces,52,"[RF] Move Roo(Abs)MinimizerFcn out of public RooFit interfaces; The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are. implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users. that this should be no problem, and doing so will greatly increase the. developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9874
https://github.com/root-project/root/pull/9874:536,modifiability,exten,extends,536,"[RF] Move Roo(Abs)MinimizerFcn out of public RooFit interfaces; The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are. implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users. that this should be no problem, and doing so will greatly increase the. developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9874
https://github.com/root-project/root/pull/9874:342,safety,updat,updating,342,"[RF] Move Roo(Abs)MinimizerFcn out of public RooFit interfaces; The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are. implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users. that this should be no problem, and doing so will greatly increase the. developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9874
https://github.com/root-project/root/pull/9874:588,safety,avoid,avoid,588,"[RF] Move Roo(Abs)MinimizerFcn out of public RooFit interfaces; The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are. implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users. that this should be no problem, and doing so will greatly increase the. developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9874
https://github.com/root-project/root/pull/9874:342,security,updat,updating,342,"[RF] Move Roo(Abs)MinimizerFcn out of public RooFit interfaces; The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are. implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users. that this should be no problem, and doing so will greatly increase the. developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9874
https://github.com/root-project/root/pull/9874:18,usability,Minim,MinimizerFcn,18,"[RF] Move Roo(Abs)MinimizerFcn out of public RooFit interfaces; The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are. implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users. that this should be no problem, and doing so will greatly increase the. developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9874
https://github.com/root-project/root/pull/9874:237,usability,user,users,237,"[RF] Move Roo(Abs)MinimizerFcn out of public RooFit interfaces; The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are. implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users. that this should be no problem, and doing so will greatly increase the. developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9874
https://github.com/root-project/root/pull/9876:141,availability,servic,services,141,"[math] Remove unused variables to fix build warnings on `mac12arm`; Title says it all, the build warnings can be found here:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac12arm,SPEC=default,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9876
https://github.com/root-project/root/pull/9876:38,deployability,build,build,38,"[math] Remove unused variables to fix build warnings on `mac12arm`; Title says it all, the build warnings can be found here:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac12arm,SPEC=default,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9876
https://github.com/root-project/root/pull/9876:91,deployability,build,build,91,"[math] Remove unused variables to fix build warnings on `mac12arm`; Title says it all, the build warnings can be found here:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac12arm,SPEC=default,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9876
https://github.com/root-project/root/pull/9876:141,deployability,servic,services,141,"[math] Remove unused variables to fix build warnings on `mac12arm`; Title says it all, the build warnings can be found here:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac12arm,SPEC=default,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9876
https://github.com/root-project/root/pull/9876:141,integrability,servic,services,141,"[math] Remove unused variables to fix build warnings on `mac12arm`; Title says it all, the build warnings can be found here:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac12arm,SPEC=default,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9876
https://github.com/root-project/root/pull/9876:21,modifiability,variab,variables,21,"[math] Remove unused variables to fix build warnings on `mac12arm`; Title says it all, the build warnings can be found here:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac12arm,SPEC=default,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9876
https://github.com/root-project/root/pull/9876:141,modifiability,servic,services,141,"[math] Remove unused variables to fix build warnings on `mac12arm`; Title says it all, the build warnings can be found here:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac12arm,SPEC=default,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9876
https://github.com/root-project/root/pull/9877:142,availability,servic,services,142,"[cling] Remove unused variables to fix build warnings on `mac11arm`; Title says it all, the build warnings can be found here:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac11arm,SPEC=noimt,V=master/lastBuild/parsed_console/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9877
https://github.com/root-project/root/pull/9877:39,deployability,build,build,39,"[cling] Remove unused variables to fix build warnings on `mac11arm`; Title says it all, the build warnings can be found here:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac11arm,SPEC=noimt,V=master/lastBuild/parsed_console/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9877
https://github.com/root-project/root/pull/9877:92,deployability,build,build,92,"[cling] Remove unused variables to fix build warnings on `mac11arm`; Title says it all, the build warnings can be found here:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac11arm,SPEC=noimt,V=master/lastBuild/parsed_console/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9877
https://github.com/root-project/root/pull/9877:142,deployability,servic,services,142,"[cling] Remove unused variables to fix build warnings on `mac11arm`; Title says it all, the build warnings can be found here:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac11arm,SPEC=noimt,V=master/lastBuild/parsed_console/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9877
https://github.com/root-project/root/pull/9877:142,integrability,servic,services,142,"[cling] Remove unused variables to fix build warnings on `mac11arm`; Title says it all, the build warnings can be found here:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac11arm,SPEC=noimt,V=master/lastBuild/parsed_console/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9877
https://github.com/root-project/root/pull/9877:22,modifiability,variab,variables,22,"[cling] Remove unused variables to fix build warnings on `mac11arm`; Title says it all, the build warnings can be found here:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac11arm,SPEC=noimt,V=master/lastBuild/parsed_console/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9877
https://github.com/root-project/root/pull/9877:142,modifiability,servic,services,142,"[cling] Remove unused variables to fix build warnings on `mac11arm`; Title says it all, the build warnings can be found here:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac11arm,SPEC=noimt,V=master/lastBuild/parsed_console/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9877
https://github.com/root-project/root/pull/9879:23,deployability,build,build,23,[6.24] Prevent various build warnings; Backport of https://github.com/root-project/root/pull/9088 https://github.com/root-project/root/pull/9582 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9879
https://github.com/root-project/root/pull/9879:7,safety,Prevent,Prevent,7,[6.24] Prevent various build warnings; Backport of https://github.com/root-project/root/pull/9088 https://github.com/root-project/root/pull/9582 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9879
https://github.com/root-project/root/pull/9879:7,security,Preven,Prevent,7,[6.24] Prevent various build warnings; Backport of https://github.com/root-project/root/pull/9088 https://github.com/root-project/root/pull/9582 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9879
https://github.com/root-project/root/pull/9880:33,deployability,Log,Logical,33,[6.24] PySpark MacOs fork issue; Logical backport of https://github.com/root-project/root/pull/9811 but adjusted to the status of the tests in 6.24,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9880
https://github.com/root-project/root/pull/9880:33,safety,Log,Logical,33,[6.24] PySpark MacOs fork issue; Logical backport of https://github.com/root-project/root/pull/9811 but adjusted to the status of the tests in 6.24,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9880
https://github.com/root-project/root/pull/9880:134,safety,test,tests,134,[6.24] PySpark MacOs fork issue; Logical backport of https://github.com/root-project/root/pull/9811 but adjusted to the status of the tests in 6.24,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9880
https://github.com/root-project/root/pull/9880:33,security,Log,Logical,33,[6.24] PySpark MacOs fork issue; Logical backport of https://github.com/root-project/root/pull/9811 but adjusted to the status of the tests in 6.24,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9880
https://github.com/root-project/root/pull/9880:33,testability,Log,Logical,33,[6.24] PySpark MacOs fork issue; Logical backport of https://github.com/root-project/root/pull/9811 but adjusted to the status of the tests in 6.24,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9880
https://github.com/root-project/root/pull/9880:134,testability,test,tests,134,[6.24] PySpark MacOs fork issue; Logical backport of https://github.com/root-project/root/pull/9811 but adjusted to the status of the tests in 6.24,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9880
https://github.com/root-project/root/pull/9880:120,usability,statu,status,120,[6.24] PySpark MacOs fork issue; Logical backport of https://github.com/root-project/root/pull/9811 but adjusted to the status of the tests in 6.24,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9880
https://github.com/root-project/root/pull/9881:445,availability,sli,slightly,445,"[RF][RelNotes] Deprecate obsolete RooFit container classes in v626 and remove them in v628; * deprecation of RooHashTable, RooNameSet, RooSetPair, and RooList is mentioned in the v626 release notes (this commit should be backported to 6.26). * remove deprecated RooHashTable, RooNameSet, RooSetPair. * mention removal in 6.28 release notes (also removal of RooList). In this release cycle, RooList should be removed removed as well, but this is slightly more involved and will be done in another PR: https://github.com/root-project/root/pull/9851.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9881
https://github.com/root-project/root/pull/9881:41,deployability,contain,container,41,"[RF][RelNotes] Deprecate obsolete RooFit container classes in v626 and remove them in v628; * deprecation of RooHashTable, RooNameSet, RooSetPair, and RooList is mentioned in the v626 release notes (this commit should be backported to 6.26). * remove deprecated RooHashTable, RooNameSet, RooSetPair. * mention removal in 6.28 release notes (also removal of RooList). In this release cycle, RooList should be removed removed as well, but this is slightly more involved and will be done in another PR: https://github.com/root-project/root/pull/9851.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9881
https://github.com/root-project/root/pull/9881:184,deployability,releas,release,184,"[RF][RelNotes] Deprecate obsolete RooFit container classes in v626 and remove them in v628; * deprecation of RooHashTable, RooNameSet, RooSetPair, and RooList is mentioned in the v626 release notes (this commit should be backported to 6.26). * remove deprecated RooHashTable, RooNameSet, RooSetPair. * mention removal in 6.28 release notes (also removal of RooList). In this release cycle, RooList should be removed removed as well, but this is slightly more involved and will be done in another PR: https://github.com/root-project/root/pull/9851.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9881
https://github.com/root-project/root/pull/9881:326,deployability,releas,release,326,"[RF][RelNotes] Deprecate obsolete RooFit container classes in v626 and remove them in v628; * deprecation of RooHashTable, RooNameSet, RooSetPair, and RooList is mentioned in the v626 release notes (this commit should be backported to 6.26). * remove deprecated RooHashTable, RooNameSet, RooSetPair. * mention removal in 6.28 release notes (also removal of RooList). In this release cycle, RooList should be removed removed as well, but this is slightly more involved and will be done in another PR: https://github.com/root-project/root/pull/9851.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9881
https://github.com/root-project/root/pull/9881:375,deployability,releas,release,375,"[RF][RelNotes] Deprecate obsolete RooFit container classes in v626 and remove them in v628; * deprecation of RooHashTable, RooNameSet, RooSetPair, and RooList is mentioned in the v626 release notes (this commit should be backported to 6.26). * remove deprecated RooHashTable, RooNameSet, RooSetPair. * mention removal in 6.28 release notes (also removal of RooList). In this release cycle, RooList should be removed removed as well, but this is slightly more involved and will be done in another PR: https://github.com/root-project/root/pull/9851.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9881
https://github.com/root-project/root/pull/9881:445,reliability,sli,slightly,445,"[RF][RelNotes] Deprecate obsolete RooFit container classes in v626 and remove them in v628; * deprecation of RooHashTable, RooNameSet, RooSetPair, and RooList is mentioned in the v626 release notes (this commit should be backported to 6.26). * remove deprecated RooHashTable, RooNameSet, RooSetPair. * mention removal in 6.28 release notes (also removal of RooList). In this release cycle, RooList should be removed removed as well, but this is slightly more involved and will be done in another PR: https://github.com/root-project/root/pull/9851.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9881
https://github.com/root-project/root/pull/9883:446,deployability,pipelin,pipeline,446,"[hist] Add missing `override` specifiers in Hist; As suggested by @lmoneta, this is now the equivalent PR to https://github.com/root-project/root/pull/9808, but for `hist` instead of `roofit`. For developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:619,deployability,automat,automatically,619,"[hist] Add missing `override` specifiers in Hist; As suggested by @lmoneta, this is now the equivalent PR to https://github.com/root-project/root/pull/9808, but for `hist` instead of `roofit`. For developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:832,deployability,build,build,832,"[hist] Add missing `override` specifiers in Hist; As suggested by @lmoneta, this is now the equivalent PR to https://github.com/root-project/root/pull/9808, but for `hist` instead of `roofit`. For developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:446,integrability,pipelin,pipeline,446,"[hist] Add missing `override` specifiers in Hist; As suggested by @lmoneta, this is now the equivalent PR to https://github.com/root-project/root/pull/9808, but for `hist` instead of `roofit`. For developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:725,integrability,sub,subprocess,725,"[hist] Add missing `override` specifiers in Hist; As suggested by @lmoneta, this is now the equivalent PR to https://github.com/root-project/root/pull/9808, but for `hist` instead of `roofit`. For developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:1558,integrability,sub,subprocess,1558,"h in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find hist -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:1979,integrability,sub,subprocess,1979,"h in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find hist -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:2007,integrability,sub,subprocess,2007,"h in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find hist -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:2034,integrability,sub,subprocess,2034,"h in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find hist -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:30,interoperability,specif,specifiers,30,"[hist] Add missing `override` specifiers in Hist; As suggested by @lmoneta, this is now the equivalent PR to https://github.com/root-project/root/pull/9808, but for `hist` instead of `roofit`. For developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:248,interoperability,specif,specifier,248,"[hist] Add missing `override` specifiers in Hist; As suggested by @lmoneta, this is now the equivalent PR to https://github.com/root-project/root/pull/9808, but for `hist` instead of `roofit`. For developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:517,interoperability,specif,specifiers,517,"[hist] Add missing `override` specifiers in Hist; As suggested by @lmoneta, this is now the equivalent PR to https://github.com/root-project/root/pull/9808, but for `hist` instead of `roofit`. For developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:1419,interoperability,specif,specifies,1419,"h in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find hist -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:946,modifiability,extens,extensions,946,"[hist] Add missing `override` specifiers in Hist; As suggested by @lmoneta, this is now the equivalent PR to https://github.com/root-project/root/pull/9808, but for `hist` instead of `roofit`. For developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:983,modifiability,extens,extensions,983,"[hist] Add missing `override` specifiers in Hist; As suggested by @lmoneta, this is now the equivalent PR to https://github.com/root-project/root/pull/9808, but for `hist` instead of `roofit`. For developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:1111,modifiability,extens,extensions,1111,"/github.com/root-project/root/pull/9808, but for `hist` instead of `roofit`. For developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:1251,modifiability,extens,extensions,1251,"r. that flags member functions as overriding on first sight is not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find hist -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:1313,modifiability,extens,extensions,1313," not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find hist -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:1438,modifiability,extens,extensions,1438,"h in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find hist -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:1533,modifiability,extens,extensions,1533,"h in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find hist -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:1619,modifiability,deco,decode,1619,"h in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:. os.rename(file_renamed, file). """""". Finally, replace the ClassDef with the ClassDefOverride macros. find hist -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'. ...and change back the ClassDefOverride of non-overriding base classes. """""". ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:481,performance,time,time,481,"[hist] Add missing `override` specifiers in Hist; As suggested by @lmoneta, this is now the equivalent PR to https://github.com/root-project/root/pull/9808, but for `hist` instead of `roofit`. For developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9883:619,testability,automat,automatically,619,"[hist] Add missing `override` specifiers in Hist; As suggested by @lmoneta, this is now the equivalent PR to https://github.com/root-project/root/pull/9808, but for `hist` instead of `roofit`. For developers, it is unconvenient that the `override` specifier. that flags member functions as overriding on first sight is not used so. much in `hist`. Now that the v6.28 development cycle has just started and there are no. major developments in the pipeline yet, I think it is a good time to add. the missing `override` specifiers everywhere in `hist`, as done already. for RooFitV. This commit was generated more or less automatically with this Python. script that uses `clang-tidy`:. ```Python. import os. import glob. import subprocess. import tqdm. """""". For clang-tidy to work, you have to copy the compile_commands.json from the. build directory back into the repo directory (just like in. .ci/copy_headers.sh). """""". def get_sources(directory, extensions):. files = []. for ext in extensions:. files += glob.glob(. os.path.join(directory, ""**/*"" + ext), recursive=True. ). return files. """""". Recursively find extensions in directory, to figure out whic hextensions. should be globbed for. find . -type f -name '*.*' | sed 's|.*\.||' | sort -u. """""". extensions = ["".h"", "".hpp"", "".cpp"", "".cc"", "".cxx""]. """""". Some extensions are recognized as C and not as C++ files by clang-tidy. We. need to rename them, and this dict specifies how file extensions should be. replaced. """""". rename_dict = {"".h"": "".hpp""}. files = get_sources(""hist"", extensions). cflags = (. subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""). ). for file in tqdm.tqdm(files):. file_renamed = file. for ext, ext_renamed in rename_dict.items():. if file.endswith(ext):. file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:. os.rename(file, file_renamed). cmd = [. ""clang-tidy"",. ""-checks=modernize-use-override"",. ""--fix"",. file_renamed,. ""--"",. ] + cflags.split("" ""). subprocess.call(cmd, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9883
https://github.com/root-project/root/pull/9884:23,deployability,Modul,Module,23,"Do not alter the llvm::Module when running the static inits.; This change was from MCJIT times and now is not needed anymore. Moreover, the orcv2 jit infrastructure considers the llvm::Module immutable after it takes control of it via emitModule. This change will allow us to migrate easier to orcv2. cc: @lhames.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9884
https://github.com/root-project/root/pull/9884:150,deployability,infrastructur,infrastructure,150,"Do not alter the llvm::Module when running the static inits.; This change was from MCJIT times and now is not needed anymore. Moreover, the orcv2 jit infrastructure considers the llvm::Module immutable after it takes control of it via emitModule. This change will allow us to migrate easier to orcv2. cc: @lhames.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9884
https://github.com/root-project/root/pull/9884:185,deployability,Modul,Module,185,"Do not alter the llvm::Module when running the static inits.; This change was from MCJIT times and now is not needed anymore. Moreover, the orcv2 jit infrastructure considers the llvm::Module immutable after it takes control of it via emitModule. This change will allow us to migrate easier to orcv2. cc: @lhames.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9884
https://github.com/root-project/root/pull/9884:23,modifiability,Modul,Module,23,"Do not alter the llvm::Module when running the static inits.; This change was from MCJIT times and now is not needed anymore. Moreover, the orcv2 jit infrastructure considers the llvm::Module immutable after it takes control of it via emitModule. This change will allow us to migrate easier to orcv2. cc: @lhames.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9884
https://github.com/root-project/root/pull/9884:185,modifiability,Modul,Module,185,"Do not alter the llvm::Module when running the static inits.; This change was from MCJIT times and now is not needed anymore. Moreover, the orcv2 jit infrastructure considers the llvm::Module immutable after it takes control of it via emitModule. This change will allow us to migrate easier to orcv2. cc: @lhames.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9884
https://github.com/root-project/root/pull/9884:89,performance,time,times,89,"Do not alter the llvm::Module when running the static inits.; This change was from MCJIT times and now is not needed anymore. Moreover, the orcv2 jit infrastructure considers the llvm::Module immutable after it takes control of it via emitModule. This change will allow us to migrate easier to orcv2. cc: @lhames.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9884
https://github.com/root-project/root/pull/9884:23,safety,Modul,Module,23,"Do not alter the llvm::Module when running the static inits.; This change was from MCJIT times and now is not needed anymore. Moreover, the orcv2 jit infrastructure considers the llvm::Module immutable after it takes control of it via emitModule. This change will allow us to migrate easier to orcv2. cc: @lhames.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9884
https://github.com/root-project/root/pull/9884:185,safety,Modul,Module,185,"Do not alter the llvm::Module when running the static inits.; This change was from MCJIT times and now is not needed anymore. Moreover, the orcv2 jit infrastructure considers the llvm::Module immutable after it takes control of it via emitModule. This change will allow us to migrate easier to orcv2. cc: @lhames.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9884
https://github.com/root-project/root/pull/9884:192,security,immut,immutable,192,"Do not alter the llvm::Module when running the static inits.; This change was from MCJIT times and now is not needed anymore. Moreover, the orcv2 jit infrastructure considers the llvm::Module immutable after it takes control of it via emitModule. This change will allow us to migrate easier to orcv2. cc: @lhames.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9884
https://github.com/root-project/root/pull/9884:217,security,control,control,217,"Do not alter the llvm::Module when running the static inits.; This change was from MCJIT times and now is not needed anymore. Moreover, the orcv2 jit infrastructure considers the llvm::Module immutable after it takes control of it via emitModule. This change will allow us to migrate easier to orcv2. cc: @lhames.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9884
https://github.com/root-project/root/pull/9884:217,testability,control,control,217,"Do not alter the llvm::Module when running the static inits.; This change was from MCJIT times and now is not needed anymore. Moreover, the orcv2 jit infrastructure considers the llvm::Module immutable after it takes control of it via emitModule. This change will allow us to migrate easier to orcv2. cc: @lhames.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9884
https://github.com/root-project/root/pull/9885:280,deployability,patch,patch,280,"Make sure the bar color is different from the frame color; Since the new defaults have been setup (ie the new ""Clean Style""). the bar color for graphs was by default white (equal t the frame color). As the bars are fill area only (no borders) they were invisible by default. This patch make sure the bar color is different form the frame color. This PR fixes: https://github.com/root-project/root/issues/9870.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9885
https://github.com/root-project/root/pull/9885:280,safety,patch,patch,280,"Make sure the bar color is different from the frame color; Since the new defaults have been setup (ie the new ""Clean Style""). the bar color for graphs was by default white (equal t the frame color). As the bars are fill area only (no borders) they were invisible by default. This patch make sure the bar color is different form the frame color. This PR fixes: https://github.com/root-project/root/issues/9870.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9885
https://github.com/root-project/root/pull/9885:280,security,patch,patch,280,"Make sure the bar color is different from the frame color; Since the new defaults have been setup (ie the new ""Clean Style""). the bar color for graphs was by default white (equal t the frame color). As the bars are fill area only (no borders) they were invisible by default. This patch make sure the bar color is different form the frame color. This PR fixes: https://github.com/root-project/root/issues/9870.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9885
https://github.com/root-project/root/pull/9886:23,deployability,build,build,23,[6.22] Prevent various build warnings; Same as #9879.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9886
https://github.com/root-project/root/pull/9886:7,safety,Prevent,Prevent,7,[6.22] Prevent various build warnings; Same as #9879.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9886
https://github.com/root-project/root/pull/9886:7,security,Preven,Prevent,7,[6.22] Prevent various build warnings; Same as #9879.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9886
https://github.com/root-project/root/pull/9889:84,deployability,observ,observed,84,"[PyROOT][9846] Fix conversion of integer NumPy arrays to int* in 32bit; It has been observed that, in 32 bit Linux, when calling the. following function of the Python C/API passing as `exporter`. argument a NumPy array of int32/uint32:. https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer. the `format` field of the result (character representation of the. underlying type) is ""l"" for int32 and ""L"" for uint32, instead of. ""i"" and ""I"", respectively. This commit ensures a correct match with. the expected type character. This PR fixes #9846 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9889
https://github.com/root-project/root/pull/9889:169,deployability,API,API,169,"[PyROOT][9846] Fix conversion of integer NumPy arrays to int* in 32bit; It has been observed that, in 32 bit Linux, when calling the. following function of the Python C/API passing as `exporter`. argument a NumPy array of int32/uint32:. https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer. the `format` field of the result (character representation of the. underlying type) is ""l"" for int32 and ""L"" for uint32, instead of. ""i"" and ""I"", respectively. This commit ensures a correct match with. the expected type character. This PR fixes #9846 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9889
https://github.com/root-project/root/pull/9889:265,deployability,api,api,265,"[PyROOT][9846] Fix conversion of integer NumPy arrays to int* in 32bit; It has been observed that, in 32 bit Linux, when calling the. following function of the Python C/API passing as `exporter`. argument a NumPy array of int32/uint32:. https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer. the `format` field of the result (character representation of the. underlying type) is ""l"" for int32 and ""L"" for uint32, instead of. ""i"" and ""I"", respectively. This commit ensures a correct match with. the expected type character. This PR fixes #9846 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9889
https://github.com/root-project/root/pull/9889:169,integrability,API,API,169,"[PyROOT][9846] Fix conversion of integer NumPy arrays to int* in 32bit; It has been observed that, in 32 bit Linux, when calling the. following function of the Python C/API passing as `exporter`. argument a NumPy array of int32/uint32:. https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer. the `format` field of the result (character representation of the. underlying type) is ""l"" for int32 and ""L"" for uint32, instead of. ""i"" and ""I"", respectively. This commit ensures a correct match with. the expected type character. This PR fixes #9846 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9889
https://github.com/root-project/root/pull/9889:265,integrability,api,api,265,"[PyROOT][9846] Fix conversion of integer NumPy arrays to int* in 32bit; It has been observed that, in 32 bit Linux, when calling the. following function of the Python C/API passing as `exporter`. argument a NumPy array of int32/uint32:. https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer. the `format` field of the result (character representation of the. underlying type) is ""l"" for int32 and ""L"" for uint32, instead of. ""i"" and ""I"", respectively. This commit ensures a correct match with. the expected type character. This PR fixes #9846 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9889
https://github.com/root-project/root/pull/9889:269,integrability,buffer,buffer,269,"[PyROOT][9846] Fix conversion of integer NumPy arrays to int* in 32bit; It has been observed that, in 32 bit Linux, when calling the. following function of the Python C/API passing as `exporter`. argument a NumPy array of int32/uint32:. https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer. the `format` field of the result (character representation of the. underlying type) is ""l"" for int32 and ""L"" for uint32, instead of. ""i"" and ""I"", respectively. This commit ensures a correct match with. the expected type character. This PR fixes #9846 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9889
https://github.com/root-project/root/pull/9889:19,interoperability,convers,conversion,19,"[PyROOT][9846] Fix conversion of integer NumPy arrays to int* in 32bit; It has been observed that, in 32 bit Linux, when calling the. following function of the Python C/API passing as `exporter`. argument a NumPy array of int32/uint32:. https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer. the `format` field of the result (character representation of the. underlying type) is ""l"" for int32 and ""L"" for uint32, instead of. ""i"" and ""I"", respectively. This commit ensures a correct match with. the expected type character. This PR fixes #9846 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9889
https://github.com/root-project/root/pull/9889:169,interoperability,API,API,169,"[PyROOT][9846] Fix conversion of integer NumPy arrays to int* in 32bit; It has been observed that, in 32 bit Linux, when calling the. following function of the Python C/API passing as `exporter`. argument a NumPy array of int32/uint32:. https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer. the `format` field of the result (character representation of the. underlying type) is ""l"" for int32 and ""L"" for uint32, instead of. ""i"" and ""I"", respectively. This commit ensures a correct match with. the expected type character. This PR fixes #9846 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9889
https://github.com/root-project/root/pull/9889:265,interoperability,api,api,265,"[PyROOT][9846] Fix conversion of integer NumPy arrays to int* in 32bit; It has been observed that, in 32 bit Linux, when calling the. following function of the Python C/API passing as `exporter`. argument a NumPy array of int32/uint32:. https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer. the `format` field of the result (character representation of the. underlying type) is ""l"" for int32 and ""L"" for uint32, instead of. ""i"" and ""I"", respectively. This commit ensures a correct match with. the expected type character. This PR fixes #9846 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9889
https://github.com/root-project/root/pull/9889:308,interoperability,format,format,308,"[PyROOT][9846] Fix conversion of integer NumPy arrays to int* in 32bit; It has been observed that, in 32 bit Linux, when calling the. following function of the Python C/API passing as `exporter`. argument a NumPy array of int32/uint32:. https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer. the `format` field of the result (character representation of the. underlying type) is ""l"" for int32 and ""L"" for uint32, instead of. ""i"" and ""I"", respectively. This commit ensures a correct match with. the expected type character. This PR fixes #9846 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9889
https://github.com/root-project/root/pull/9889:84,testability,observ,observed,84,"[PyROOT][9846] Fix conversion of integer NumPy arrays to int* in 32bit; It has been observed that, in 32 bit Linux, when calling the. following function of the Python C/API passing as `exporter`. argument a NumPy array of int32/uint32:. https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer. the `format` field of the result (character representation of the. underlying type) is ""l"" for int32 and ""L"" for uint32, instead of. ""i"" and ""I"", respectively. This commit ensures a correct match with. the expected type character. This PR fixes #9846 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9889
https://github.com/root-project/root/pull/9890:281,deployability,integr,integrate,281,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:357,deployability,automat,automatic,357,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:281,integrability,integr,integrate,281,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:313,integrability,batch,batch,313,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:281,interoperability,integr,integrate,281,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:248,modifiability,refact,refactoring,248,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:281,modifiability,integr,integrate,281,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:135,performance,time,time,135,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:160,performance,time,time,160,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:248,performance,refactor,refactoring,248,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:313,performance,batch,batch,313,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:281,reliability,integr,integrate,281,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:196,safety,compl,completely,196,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:196,security,compl,completely,196,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:281,security,integr,integrate,281,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:281,testability,integr,integrate,281,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:357,testability,automat,automatic,357,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:26,usability,support,support,26,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9890:179,usability,support,support,179,"[RF][RelNotes] Remove any support for deprecated string fit options in RooFit; The string-based fit options were deprecated for a long time, and now is. a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9890
https://github.com/root-project/root/pull/9891:9,deployability,releas,release,9,[jsroot] release 6.3.4 with several fixes for 6.26 [skip-ci]; Fix several issues in TLatex parsing. Fix labels drawing for axes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9891
https://github.com/root-project/root/pull/9891:111,energy efficiency,draw,drawing,111,[jsroot] release 6.3.4 with several fixes for 6.26 [skip-ci]; Fix several issues in TLatex parsing. Fix labels drawing for axes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9891
https://github.com/root-project/root/pull/9893:261,deployability,log,log,261,"[jsroot] dev 15/02/2022 with chord diagram support; As proposed in https://root-forum.cern.ch/t/chord-diagram/48785,. implement chord diagram and circular graphs for TH2. For chord diagram reuse d3.chord component of d3.js. Many other improvements - see jsroot log.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9893
https://github.com/root-project/root/pull/9893:204,integrability,compon,component,204,"[jsroot] dev 15/02/2022 with chord diagram support; As proposed in https://root-forum.cern.ch/t/chord-diagram/48785,. implement chord diagram and circular graphs for TH2. For chord diagram reuse d3.chord component of d3.js. Many other improvements - see jsroot log.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9893
https://github.com/root-project/root/pull/9893:204,interoperability,compon,component,204,"[jsroot] dev 15/02/2022 with chord diagram support; As proposed in https://root-forum.cern.ch/t/chord-diagram/48785,. implement chord diagram and circular graphs for TH2. For chord diagram reuse d3.chord component of d3.js. Many other improvements - see jsroot log.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9893
https://github.com/root-project/root/pull/9893:189,modifiability,reu,reuse,189,"[jsroot] dev 15/02/2022 with chord diagram support; As proposed in https://root-forum.cern.ch/t/chord-diagram/48785,. implement chord diagram and circular graphs for TH2. For chord diagram reuse d3.chord component of d3.js. Many other improvements - see jsroot log.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9893
https://github.com/root-project/root/pull/9893:204,modifiability,compon,component,204,"[jsroot] dev 15/02/2022 with chord diagram support; As proposed in https://root-forum.cern.ch/t/chord-diagram/48785,. implement chord diagram and circular graphs for TH2. For chord diagram reuse d3.chord component of d3.js. Many other improvements - see jsroot log.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9893
https://github.com/root-project/root/pull/9893:261,safety,log,log,261,"[jsroot] dev 15/02/2022 with chord diagram support; As proposed in https://root-forum.cern.ch/t/chord-diagram/48785,. implement chord diagram and circular graphs for TH2. For chord diagram reuse d3.chord component of d3.js. Many other improvements - see jsroot log.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9893
https://github.com/root-project/root/pull/9893:261,security,log,log,261,"[jsroot] dev 15/02/2022 with chord diagram support; As proposed in https://root-forum.cern.ch/t/chord-diagram/48785,. implement chord diagram and circular graphs for TH2. For chord diagram reuse d3.chord component of d3.js. Many other improvements - see jsroot log.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9893
https://github.com/root-project/root/pull/9893:261,testability,log,log,261,"[jsroot] dev 15/02/2022 with chord diagram support; As proposed in https://root-forum.cern.ch/t/chord-diagram/48785,. implement chord diagram and circular graphs for TH2. For chord diagram reuse d3.chord component of d3.js. Many other improvements - see jsroot log.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9893
https://github.com/root-project/root/pull/9893:43,usability,support,support,43,"[jsroot] dev 15/02/2022 with chord diagram support; As proposed in https://root-forum.cern.ch/t/chord-diagram/48785,. implement chord diagram and circular graphs for TH2. For chord diagram reuse d3.chord component of d3.js. Many other improvements - see jsroot log.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9893
https://github.com/root-project/root/issues/9894:157,availability,down,down,157,"[DF] Have Display optionally take a list of systematic variations to display values for; E.g. ```python. df.Display(..., variations=[""nominal"", ""pt:up"", ""pt:down""]). ```. could display. ```. pt | pt (pt:up) | pt (pt:down) |. -------------------------------------. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9894
https://github.com/root-project/root/issues/9894:216,availability,down,down,216,"[DF] Have Display optionally take a list of systematic variations to display values for; E.g. ```python. df.Display(..., variations=[""nominal"", ""pt:up"", ""pt:down""]). ```. could display. ```. pt | pt (pt:up) | pt (pt:down) |. -------------------------------------. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9894
https://github.com/root-project/root/pull/9895:19,availability,error,error,19,"[DF] User-friendly error in case of Fill signature mismatch; E.g. in this scenario:. ```. struct Filler {. void Fill(int) {}. void Merge(const std::vector<Filler *> &) {}. };. int main(). {. ROOT::RDataFrame(2).Define(""x"", [] { return 42; }).Fill<int, int>(Filler{}, {""x"", ""x""});. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9895
https://github.com/root-project/root/pull/9895:51,interoperability,mismatch,mismatch,51,"[DF] User-friendly error in case of Fill signature mismatch; E.g. in this scenario:. ```. struct Filler {. void Fill(int) {}. void Merge(const std::vector<Filler *> &) {}. };. int main(). {. ROOT::RDataFrame(2).Define(""x"", [] { return 42; }).Fill<int, int>(Filler{}, {""x"", ""x""});. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9895
https://github.com/root-project/root/pull/9895:74,modifiability,scenario,scenario,74,"[DF] User-friendly error in case of Fill signature mismatch; E.g. in this scenario:. ```. struct Filler {. void Fill(int) {}. void Merge(const std::vector<Filler *> &) {}. };. int main(). {. ROOT::RDataFrame(2).Define(""x"", [] { return 42; }).Fill<int, int>(Filler{}, {""x"", ""x""});. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9895
https://github.com/root-project/root/pull/9895:19,performance,error,error,19,"[DF] User-friendly error in case of Fill signature mismatch; E.g. in this scenario:. ```. struct Filler {. void Fill(int) {}. void Merge(const std::vector<Filler *> &) {}. };. int main(). {. ROOT::RDataFrame(2).Define(""x"", [] { return 42; }).Fill<int, int>(Filler{}, {""x"", ""x""});. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9895
https://github.com/root-project/root/pull/9895:19,safety,error,error,19,"[DF] User-friendly error in case of Fill signature mismatch; E.g. in this scenario:. ```. struct Filler {. void Fill(int) {}. void Merge(const std::vector<Filler *> &) {}. };. int main(). {. ROOT::RDataFrame(2).Define(""x"", [] { return 42; }).Fill<int, int>(Filler{}, {""x"", ""x""});. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9895
https://github.com/root-project/root/pull/9895:41,security,sign,signature,41,"[DF] User-friendly error in case of Fill signature mismatch; E.g. in this scenario:. ```. struct Filler {. void Fill(int) {}. void Merge(const std::vector<Filler *> &) {}. };. int main(). {. ROOT::RDataFrame(2).Define(""x"", [] { return 42; }).Fill<int, int>(Filler{}, {""x"", ""x""});. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9895
https://github.com/root-project/root/pull/9895:5,usability,User,User-friendly,5,"[DF] User-friendly error in case of Fill signature mismatch; E.g. in this scenario:. ```. struct Filler {. void Fill(int) {}. void Merge(const std::vector<Filler *> &) {}. };. int main(). {. ROOT::RDataFrame(2).Define(""x"", [] { return 42; }).Fill<int, int>(Filler{}, {""x"", ""x""});. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9895
https://github.com/root-project/root/pull/9895:19,usability,error,error,19,"[DF] User-friendly error in case of Fill signature mismatch; E.g. in this scenario:. ```. struct Filler {. void Fill(int) {}. void Merge(const std::vector<Filler *> &) {}. };. int main(). {. ROOT::RDataFrame(2).Define(""x"", [] { return 42; }).Fill<int, int>(Filler{}, {""x"", ""x""});. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9895
https://github.com/root-project/root/pull/9896:430,availability,error,error,430,"[RF][PyROOT] Prohibit resetting RooWorkspace import functions in PyROOT; Many people pythonized the RooWorkspace themselves by adding a new. attribute `_import` that calls getattr(self, ""import"") under the. hood. However, `_import` is now the reference to the original cppyy. overload, and resetting it with a wrapper around `import` would cause. infinite recursions! We prevent resetting that attribute here, which. is a clearer error to the user than an infinite call stack involving. the internal pythonization code. The ""official"" way of calling `RooWorkspace::import()` in PyROOT is now `RooWorkspace.Import`. Should be backported to the 6.26 release if possible, so that people are not caught by surprise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9896
https://github.com/root-project/root/pull/9896:470,deployability,stack,stack,470,"[RF][PyROOT] Prohibit resetting RooWorkspace import functions in PyROOT; Many people pythonized the RooWorkspace themselves by adding a new. attribute `_import` that calls getattr(self, ""import"") under the. hood. However, `_import` is now the reference to the original cppyy. overload, and resetting it with a wrapper around `import` would cause. infinite recursions! We prevent resetting that attribute here, which. is a clearer error to the user than an infinite call stack involving. the internal pythonization code. The ""official"" way of calling `RooWorkspace::import()` in PyROOT is now `RooWorkspace.Import`. Should be backported to the 6.26 release if possible, so that people are not caught by surprise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9896
https://github.com/root-project/root/pull/9896:648,deployability,releas,release,648,"[RF][PyROOT] Prohibit resetting RooWorkspace import functions in PyROOT; Many people pythonized the RooWorkspace themselves by adding a new. attribute `_import` that calls getattr(self, ""import"") under the. hood. However, `_import` is now the reference to the original cppyy. overload, and resetting it with a wrapper around `import` would cause. infinite recursions! We prevent resetting that attribute here, which. is a clearer error to the user than an infinite call stack involving. the internal pythonization code. The ""official"" way of calling `RooWorkspace::import()` in PyROOT is now `RooWorkspace.Import`. Should be backported to the 6.26 release if possible, so that people are not caught by surprise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9896
https://github.com/root-project/root/pull/9896:310,integrability,wrap,wrapper,310,"[RF][PyROOT] Prohibit resetting RooWorkspace import functions in PyROOT; Many people pythonized the RooWorkspace themselves by adding a new. attribute `_import` that calls getattr(self, ""import"") under the. hood. However, `_import` is now the reference to the original cppyy. overload, and resetting it with a wrapper around `import` would cause. infinite recursions! We prevent resetting that attribute here, which. is a clearer error to the user than an infinite call stack involving. the internal pythonization code. The ""official"" way of calling `RooWorkspace::import()` in PyROOT is now `RooWorkspace.Import`. Should be backported to the 6.26 release if possible, so that people are not caught by surprise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9896
https://github.com/root-project/root/pull/9896:310,interoperability,wrapper,wrapper,310,"[RF][PyROOT] Prohibit resetting RooWorkspace import functions in PyROOT; Many people pythonized the RooWorkspace themselves by adding a new. attribute `_import` that calls getattr(self, ""import"") under the. hood. However, `_import` is now the reference to the original cppyy. overload, and resetting it with a wrapper around `import` would cause. infinite recursions! We prevent resetting that attribute here, which. is a clearer error to the user than an infinite call stack involving. the internal pythonization code. The ""official"" way of calling `RooWorkspace::import()` in PyROOT is now `RooWorkspace.Import`. Should be backported to the 6.26 release if possible, so that people are not caught by surprise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9896
https://github.com/root-project/root/pull/9896:430,performance,error,error,430,"[RF][PyROOT] Prohibit resetting RooWorkspace import functions in PyROOT; Many people pythonized the RooWorkspace themselves by adding a new. attribute `_import` that calls getattr(self, ""import"") under the. hood. However, `_import` is now the reference to the original cppyy. overload, and resetting it with a wrapper around `import` would cause. infinite recursions! We prevent resetting that attribute here, which. is a clearer error to the user than an infinite call stack involving. the internal pythonization code. The ""official"" way of calling `RooWorkspace::import()` in PyROOT is now `RooWorkspace.Import`. Should be backported to the 6.26 release if possible, so that people are not caught by surprise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9896
https://github.com/root-project/root/pull/9896:371,safety,prevent,prevent,371,"[RF][PyROOT] Prohibit resetting RooWorkspace import functions in PyROOT; Many people pythonized the RooWorkspace themselves by adding a new. attribute `_import` that calls getattr(self, ""import"") under the. hood. However, `_import` is now the reference to the original cppyy. overload, and resetting it with a wrapper around `import` would cause. infinite recursions! We prevent resetting that attribute here, which. is a clearer error to the user than an infinite call stack involving. the internal pythonization code. The ""official"" way of calling `RooWorkspace::import()` in PyROOT is now `RooWorkspace.Import`. Should be backported to the 6.26 release if possible, so that people are not caught by surprise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9896
https://github.com/root-project/root/pull/9896:430,safety,error,error,430,"[RF][PyROOT] Prohibit resetting RooWorkspace import functions in PyROOT; Many people pythonized the RooWorkspace themselves by adding a new. attribute `_import` that calls getattr(self, ""import"") under the. hood. However, `_import` is now the reference to the original cppyy. overload, and resetting it with a wrapper around `import` would cause. infinite recursions! We prevent resetting that attribute here, which. is a clearer error to the user than an infinite call stack involving. the internal pythonization code. The ""official"" way of calling `RooWorkspace::import()` in PyROOT is now `RooWorkspace.Import`. Should be backported to the 6.26 release if possible, so that people are not caught by surprise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9896
https://github.com/root-project/root/pull/9896:371,security,preven,prevent,371,"[RF][PyROOT] Prohibit resetting RooWorkspace import functions in PyROOT; Many people pythonized the RooWorkspace themselves by adding a new. attribute `_import` that calls getattr(self, ""import"") under the. hood. However, `_import` is now the reference to the original cppyy. overload, and resetting it with a wrapper around `import` would cause. infinite recursions! We prevent resetting that attribute here, which. is a clearer error to the user than an infinite call stack involving. the internal pythonization code. The ""official"" way of calling `RooWorkspace::import()` in PyROOT is now `RooWorkspace.Import`. Should be backported to the 6.26 release if possible, so that people are not caught by surprise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9896
https://github.com/root-project/root/pull/9896:422,usability,clear,clearer,422,"[RF][PyROOT] Prohibit resetting RooWorkspace import functions in PyROOT; Many people pythonized the RooWorkspace themselves by adding a new. attribute `_import` that calls getattr(self, ""import"") under the. hood. However, `_import` is now the reference to the original cppyy. overload, and resetting it with a wrapper around `import` would cause. infinite recursions! We prevent resetting that attribute here, which. is a clearer error to the user than an infinite call stack involving. the internal pythonization code. The ""official"" way of calling `RooWorkspace::import()` in PyROOT is now `RooWorkspace.Import`. Should be backported to the 6.26 release if possible, so that people are not caught by surprise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9896
https://github.com/root-project/root/pull/9896:430,usability,error,error,430,"[RF][PyROOT] Prohibit resetting RooWorkspace import functions in PyROOT; Many people pythonized the RooWorkspace themselves by adding a new. attribute `_import` that calls getattr(self, ""import"") under the. hood. However, `_import` is now the reference to the original cppyy. overload, and resetting it with a wrapper around `import` would cause. infinite recursions! We prevent resetting that attribute here, which. is a clearer error to the user than an infinite call stack involving. the internal pythonization code. The ""official"" way of calling `RooWorkspace::import()` in PyROOT is now `RooWorkspace.Import`. Should be backported to the 6.26 release if possible, so that people are not caught by surprise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9896
https://github.com/root-project/root/pull/9896:443,usability,user,user,443,"[RF][PyROOT] Prohibit resetting RooWorkspace import functions in PyROOT; Many people pythonized the RooWorkspace themselves by adding a new. attribute `_import` that calls getattr(self, ""import"") under the. hood. However, `_import` is now the reference to the original cppyy. overload, and resetting it with a wrapper around `import` would cause. infinite recursions! We prevent resetting that attribute here, which. is a clearer error to the user than an infinite call stack involving. the internal pythonization code. The ""official"" way of calling `RooWorkspace::import()` in PyROOT is now `RooWorkspace.Import`. Should be backported to the 6.26 release if possible, so that people are not caught by surprise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9896
https://github.com/root-project/root/pull/9897:147,availability,down,download,147,[Doc][skip-ci] Update Minuit2 documentation page; Add link for the instructions for standalone builds of Minuit2 using cmake. . Remove deadline to download old tar file version. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9897
https://github.com/root-project/root/pull/9897:15,deployability,Updat,Update,15,[Doc][skip-ci] Update Minuit2 documentation page; Add link for the instructions for standalone builds of Minuit2 using cmake. . Remove deadline to download old tar file version. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9897
https://github.com/root-project/root/pull/9897:95,deployability,build,builds,95,[Doc][skip-ci] Update Minuit2 documentation page; Add link for the instructions for standalone builds of Minuit2 using cmake. . Remove deadline to download old tar file version. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9897
https://github.com/root-project/root/pull/9897:169,deployability,version,version,169,[Doc][skip-ci] Update Minuit2 documentation page; Add link for the instructions for standalone builds of Minuit2 using cmake. . Remove deadline to download old tar file version. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9897
https://github.com/root-project/root/pull/9897:169,integrability,version,version,169,[Doc][skip-ci] Update Minuit2 documentation page; Add link for the instructions for standalone builds of Minuit2 using cmake. . Remove deadline to download old tar file version. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9897
https://github.com/root-project/root/pull/9897:169,modifiability,version,version,169,[Doc][skip-ci] Update Minuit2 documentation page; Add link for the instructions for standalone builds of Minuit2 using cmake. . Remove deadline to download old tar file version. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9897
https://github.com/root-project/root/pull/9897:15,safety,Updat,Update,15,[Doc][skip-ci] Update Minuit2 documentation page; Add link for the instructions for standalone builds of Minuit2 using cmake. . Remove deadline to download old tar file version. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9897
https://github.com/root-project/root/pull/9897:15,security,Updat,Update,15,[Doc][skip-ci] Update Minuit2 documentation page; Add link for the instructions for standalone builds of Minuit2 using cmake. . Remove deadline to download old tar file version. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9897
https://github.com/root-project/root/pull/9897:30,usability,document,documentation,30,[Doc][skip-ci] Update Minuit2 documentation page; Add link for the instructions for standalone builds of Minuit2 using cmake. . Remove deadline to download old tar file version. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9897
https://github.com/root-project/root/issues/9898:121,energy efficiency,current,currently,121,"[DF] Allow use of aliases RVecI, RVecD, etc. in ROOT.Numba.Declare; See `tutorials/pyroot/pyroot004_NumbaDeclare.py`: we currently support `RVec<int>` or similar in the signature of the Python function passed to Numba, but we don't support `RVecI`, `RVecD` and the other aliases. Maybe Ivan can take a look with Enric's guidance?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9898
https://github.com/root-project/root/issues/9898:169,security,sign,signature,169,"[DF] Allow use of aliases RVecI, RVecD, etc. in ROOT.Numba.Declare; See `tutorials/pyroot/pyroot004_NumbaDeclare.py`: we currently support `RVec<int>` or similar in the signature of the Python function passed to Numba, but we don't support `RVecI`, `RVecD` and the other aliases. Maybe Ivan can take a look with Enric's guidance?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9898
https://github.com/root-project/root/issues/9898:131,usability,support,support,131,"[DF] Allow use of aliases RVecI, RVecD, etc. in ROOT.Numba.Declare; See `tutorials/pyroot/pyroot004_NumbaDeclare.py`: we currently support `RVec<int>` or similar in the signature of the Python function passed to Numba, but we don't support `RVecI`, `RVecD` and the other aliases. Maybe Ivan can take a look with Enric's guidance?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9898
https://github.com/root-project/root/issues/9898:232,usability,support,support,232,"[DF] Allow use of aliases RVecI, RVecD, etc. in ROOT.Numba.Declare; See `tutorials/pyroot/pyroot004_NumbaDeclare.py`: we currently support `RVec<int>` or similar in the signature of the Python function passed to Numba, but we don't support `RVecI`, `RVecD` and the other aliases. Maybe Ivan can take a look with Enric's guidance?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9898
https://github.com/root-project/root/issues/9898:320,usability,guidanc,guidance,320,"[DF] Allow use of aliases RVecI, RVecD, etc. in ROOT.Numba.Declare; See `tutorials/pyroot/pyroot004_NumbaDeclare.py`: we currently support `RVec<int>` or similar in the signature of the Python function passed to Numba, but we don't support `RVecI`, `RVecD` and the other aliases. Maybe Ivan can take a look with Enric's guidance?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9898
https://github.com/root-project/root/issues/9899:437,availability,down,down,437,"TTree incorrectly run I/O customization rules on ""new"" data members.; As reported at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. The problem is the rules are applied to a data member nested inside an object nested inside an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL, since it is a ""new"" member compared to the layout on file, none of the objects; from the new member down to the object on which the rules need to be run) are actually streamed and the code gathering the information to run the rule got a bit lost ; it is likely (I am checking as we speak) that in previous release the rule was not even attempted to be run ... which might actually be the desired behavior in this specific case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9899
https://github.com/root-project/root/issues/9899:643,deployability,releas,release,643,"TTree incorrectly run I/O customization rules on ""new"" data members.; As reported at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. The problem is the rules are applied to a data member nested inside an object nested inside an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL, since it is a ""new"" member compared to the layout on file, none of the objects; from the new member down to the object on which the rules need to be run) are actually streamed and the code gathering the information to run the rule got a bit lost ; it is likely (I am checking as we speak) that in previous release the rule was not even attempted to be run ... which might actually be the desired behavior in this specific case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9899
https://github.com/root-project/root/issues/9899:750,interoperability,specif,specific,750,"TTree incorrectly run I/O customization rules on ""new"" data members.; As reported at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. The problem is the rules are applied to a data member nested inside an object nested inside an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL, since it is a ""new"" member compared to the layout on file, none of the objects; from the new member down to the object on which the rules need to be run) are actually streamed and the code gathering the information to run the rule got a bit lost ; it is likely (I am checking as we speak) that in previous release the rule was not even attempted to be run ... which might actually be the desired behavior in this specific case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9899
https://github.com/root-project/root/issues/9899:22,performance,I/O,I/O,22,"TTree incorrectly run I/O customization rules on ""new"" data members.; As reported at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. The problem is the rules are applied to a data member nested inside an object nested inside an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL, since it is a ""new"" member compared to the layout on file, none of the objects; from the new member down to the object on which the rules need to be run) are actually streamed and the code gathering the information to run the rule got a bit lost ; it is likely (I am checking as we speak) that in previous release the rule was not even attempted to be run ... which might actually be the desired behavior in this specific case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9899
https://github.com/root-project/root/issues/9899:26,usability,custom,customization,26,"TTree incorrectly run I/O customization rules on ""new"" data members.; As reported at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. The problem is the rules are applied to a data member nested inside an object nested inside an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL, since it is a ""new"" member compared to the layout on file, none of the objects; from the new member down to the object on which the rules need to be run) are actually streamed and the code gathering the information to run the rule got a bit lost ; it is likely (I am checking as we speak) that in previous release the rule was not even attempted to be run ... which might actually be the desired behavior in this specific case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9899
https://github.com/root-project/root/issues/9899:733,usability,behavi,behavior,733,"TTree incorrectly run I/O customization rules on ""new"" data members.; As reported at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. The problem is the rules are applied to a data member nested inside an object nested inside an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL, since it is a ""new"" member compared to the layout on file, none of the objects; from the new member down to the object on which the rules need to be run) are actually streamed and the code gathering the information to run the rule got a bit lost ; it is likely (I am checking as we speak) that in previous release the rule was not even attempted to be run ... which might actually be the desired behavior in this specific case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9899
https://github.com/root-project/root/issues/9900:626,integrability,pub,public,626,"`rootcling` does not properly detect the class doc when using a `ClassDefOverride`; With the file below (named `ClassDefTitle.cxx`), we get:. ```. root.exe -b -l -q ClassDefTitle.cxx+. Processing ClassDefTitle.cxx+... OBJ: TClass WithClassDef A Class with a regular ClassDef. OBJ: TClass WithClassDefOverride. ```. where we expect:. ```. root.exe -b -l -q ClassDefTitle.cxx+. Processing ClassDefTitle.cxx+... OBJ: TClass WithClassDef A Class with a regular ClassDef. OBJ: TClass WithClassDefOverride A class with a ClassDefOverride. ```. Cheers,. Philippe. ```. #include ""Rtypes.h"". #include ""TObject.h"". class WithClassDef : public TObject. {. ClassDef(WithClassDef, 1); // A Class with a regular ClassDef. };. class WithClassDefOverride : public TObject. {. ClassDefOverride(WithClassDefOverride, 2); // A class with a ClassDefOverride. };. #include ""TClass.h"". void ClassDefTitle(). {. TClass::GetClass(""WithClassDef"")->Print();. TClass::GetClass(""WithClassDefOverride"")->Print();. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9900
https://github.com/root-project/root/issues/9900:741,integrability,pub,public,741,"`rootcling` does not properly detect the class doc when using a `ClassDefOverride`; With the file below (named `ClassDefTitle.cxx`), we get:. ```. root.exe -b -l -q ClassDefTitle.cxx+. Processing ClassDefTitle.cxx+... OBJ: TClass WithClassDef A Class with a regular ClassDef. OBJ: TClass WithClassDefOverride. ```. where we expect:. ```. root.exe -b -l -q ClassDefTitle.cxx+. Processing ClassDefTitle.cxx+... OBJ: TClass WithClassDef A Class with a regular ClassDef. OBJ: TClass WithClassDefOverride A class with a ClassDefOverride. ```. Cheers,. Philippe. ```. #include ""Rtypes.h"". #include ""TObject.h"". class WithClassDef : public TObject. {. ClassDef(WithClassDef, 1); // A Class with a regular ClassDef. };. class WithClassDefOverride : public TObject. {. ClassDefOverride(WithClassDefOverride, 2); // A class with a ClassDefOverride. };. #include ""TClass.h"". void ClassDefTitle(). {. TClass::GetClass(""WithClassDef"")->Print();. TClass::GetClass(""WithClassDefOverride"")->Print();. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9900
https://github.com/root-project/root/issues/9900:12,reliability,doe,does,12,"`rootcling` does not properly detect the class doc when using a `ClassDefOverride`; With the file below (named `ClassDefTitle.cxx`), we get:. ```. root.exe -b -l -q ClassDefTitle.cxx+. Processing ClassDefTitle.cxx+... OBJ: TClass WithClassDef A Class with a regular ClassDef. OBJ: TClass WithClassDefOverride. ```. where we expect:. ```. root.exe -b -l -q ClassDefTitle.cxx+. Processing ClassDefTitle.cxx+... OBJ: TClass WithClassDef A Class with a regular ClassDef. OBJ: TClass WithClassDefOverride A class with a ClassDefOverride. ```. Cheers,. Philippe. ```. #include ""Rtypes.h"". #include ""TObject.h"". class WithClassDef : public TObject. {. ClassDef(WithClassDef, 1); // A Class with a regular ClassDef. };. class WithClassDefOverride : public TObject. {. ClassDefOverride(WithClassDefOverride, 2); // A class with a ClassDefOverride. };. #include ""TClass.h"". void ClassDefTitle(). {. TClass::GetClass(""WithClassDef"")->Print();. TClass::GetClass(""WithClassDefOverride"")->Print();. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9900
https://github.com/root-project/root/issues/9900:30,safety,detect,detect,30,"`rootcling` does not properly detect the class doc when using a `ClassDefOverride`; With the file below (named `ClassDefTitle.cxx`), we get:. ```. root.exe -b -l -q ClassDefTitle.cxx+. Processing ClassDefTitle.cxx+... OBJ: TClass WithClassDef A Class with a regular ClassDef. OBJ: TClass WithClassDefOverride. ```. where we expect:. ```. root.exe -b -l -q ClassDefTitle.cxx+. Processing ClassDefTitle.cxx+... OBJ: TClass WithClassDef A Class with a regular ClassDef. OBJ: TClass WithClassDefOverride A class with a ClassDefOverride. ```. Cheers,. Philippe. ```. #include ""Rtypes.h"". #include ""TObject.h"". class WithClassDef : public TObject. {. ClassDef(WithClassDef, 1); // A Class with a regular ClassDef. };. class WithClassDefOverride : public TObject. {. ClassDefOverride(WithClassDefOverride, 2); // A class with a ClassDefOverride. };. #include ""TClass.h"". void ClassDefTitle(). {. TClass::GetClass(""WithClassDef"")->Print();. TClass::GetClass(""WithClassDefOverride"")->Print();. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9900
https://github.com/root-project/root/issues/9900:30,security,detect,detect,30,"`rootcling` does not properly detect the class doc when using a `ClassDefOverride`; With the file below (named `ClassDefTitle.cxx`), we get:. ```. root.exe -b -l -q ClassDefTitle.cxx+. Processing ClassDefTitle.cxx+... OBJ: TClass WithClassDef A Class with a regular ClassDef. OBJ: TClass WithClassDefOverride. ```. where we expect:. ```. root.exe -b -l -q ClassDefTitle.cxx+. Processing ClassDefTitle.cxx+... OBJ: TClass WithClassDef A Class with a regular ClassDef. OBJ: TClass WithClassDefOverride A class with a ClassDefOverride. ```. Cheers,. Philippe. ```. #include ""Rtypes.h"". #include ""TObject.h"". class WithClassDef : public TObject. {. ClassDef(WithClassDef, 1); // A Class with a regular ClassDef. };. class WithClassDefOverride : public TObject. {. ClassDefOverride(WithClassDefOverride, 2); // A class with a ClassDefOverride. };. #include ""TClass.h"". void ClassDefTitle(). {. TClass::GetClass(""WithClassDef"")->Print();. TClass::GetClass(""WithClassDefOverride"")->Print();. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9900
https://github.com/root-project/root/pull/9901:48,deployability,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 7; This is a backport of all the RooFit PRs that were merged to `master` edit to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9881 (only first commit). 2. https://github.com/root-project/root/pull/9896.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9901
https://github.com/root-project/root/pull/9901:154,deployability,patch,patches,154,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 7; This is a backport of all the RooFit PRs that were merged to `master` edit to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9881 (only first commit). 2. https://github.com/root-project/root/pull/9896.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9901
https://github.com/root-project/root/pull/9901:48,safety,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 7; This is a backport of all the RooFit PRs that were merged to `master` edit to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9881 (only first commit). 2. https://github.com/root-project/root/pull/9896.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9901
https://github.com/root-project/root/pull/9901:154,safety,patch,patches,154,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 7; This is a backport of all the RooFit PRs that were merged to `master` edit to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9881 (only first commit). 2. https://github.com/root-project/root/pull/9896.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9901
https://github.com/root-project/root/pull/9901:48,security,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 7; This is a backport of all the RooFit PRs that were merged to `master` edit to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9881 (only first commit). 2. https://github.com/root-project/root/pull/9896.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9901
https://github.com/root-project/root/pull/9901:154,security,patch,patches,154,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 7; This is a backport of all the RooFit PRs that were merged to `master` edit to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9881 (only first commit). 2. https://github.com/root-project/root/pull/9896.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9901
https://github.com/root-project/root/pull/9905:192,deployability,releas,release,192,[relnotes][skip-ci] Add missing information about RNTuple and `latest-stable` branch; This pull-request adds some missing information about RNTuple and the `latest-stable` branch in the v6.26 release notes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9905
https://github.com/root-project/root/pull/9906:198,deployability,releas,release,198,"[relnotes,v6-26][skip-ci] Add missing information about RNTuple and `latest-stable` branch; This pull-request adds some missing information about RNTuple and the `latest-stable` branch in the v6.26 release notes. Backport of PR #9905.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9906
https://github.com/root-project/root/pull/9907:171,deployability,releas,release,171,"[v626][RF][RelNotes] Deprecated string fit options in RooFit; The string-based fit options are officially deprecated with this commit,. to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9907
https://github.com/root-project/root/pull/9907:266,deployability,integr,integrate,266,"[v626][RF][RelNotes] Deprecated string fit options in RooFit; The string-based fit options are officially deprecated with this commit,. to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9907
https://github.com/root-project/root/pull/9907:342,deployability,automat,automatic,342,"[v626][RF][RelNotes] Deprecated string fit options in RooFit; The string-based fit options are officially deprecated with this commit,. to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9907
https://github.com/root-project/root/pull/9907:266,integrability,integr,integrate,266,"[v626][RF][RelNotes] Deprecated string fit options in RooFit; The string-based fit options are officially deprecated with this commit,. to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9907
https://github.com/root-project/root/pull/9907:298,integrability,batch,batch,298,"[v626][RF][RelNotes] Deprecated string fit options in RooFit; The string-based fit options are officially deprecated with this commit,. to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9907
https://github.com/root-project/root/pull/9907:266,interoperability,integr,integrate,266,"[v626][RF][RelNotes] Deprecated string fit options in RooFit; The string-based fit options are officially deprecated with this commit,. to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9907
https://github.com/root-project/root/pull/9907:233,modifiability,refact,refactoring,233,"[v626][RF][RelNotes] Deprecated string fit options in RooFit; The string-based fit options are officially deprecated with this commit,. to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9907
https://github.com/root-project/root/pull/9907:266,modifiability,integr,integrate,266,"[v626][RF][RelNotes] Deprecated string fit options in RooFit; The string-based fit options are officially deprecated with this commit,. to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9907
https://github.com/root-project/root/pull/9907:233,performance,refactor,refactoring,233,"[v626][RF][RelNotes] Deprecated string fit options in RooFit; The string-based fit options are officially deprecated with this commit,. to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9907
https://github.com/root-project/root/pull/9907:298,performance,batch,batch,298,"[v626][RF][RelNotes] Deprecated string fit options in RooFit; The string-based fit options are officially deprecated with this commit,. to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9907
https://github.com/root-project/root/pull/9907:266,reliability,integr,integrate,266,"[v626][RF][RelNotes] Deprecated string fit options in RooFit; The string-based fit options are officially deprecated with this commit,. to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9907
https://github.com/root-project/root/pull/9907:266,security,integr,integrate,266,"[v626][RF][RelNotes] Deprecated string fit options in RooFit; The string-based fit options are officially deprecated with this commit,. to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9907
https://github.com/root-project/root/pull/9907:266,testability,integr,integrate,266,"[v626][RF][RelNotes] Deprecated string fit options in RooFit; The string-based fit options are officially deprecated with this commit,. to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9907
https://github.com/root-project/root/pull/9907:342,testability,automat,automatic,342,"[v626][RF][RelNotes] Deprecated string fit options in RooFit; The string-based fit options are officially deprecated with this commit,. to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to. integrate new features like the batch mode, the new likelihood classes,. or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9907
https://github.com/root-project/root/pull/9908:143,deployability,scale,scales,143,"Fix for name resolution of GDML objects defined in children files.; # This Pull request:. Fixes GDML name resolution for positions, rotations, scales, solids and volumes defined in a secondary file. ## Changes or fixes:. GDML allows implicit namespacing for objects defined in children files. The current implementation of the ROOT GDML parser is flawed in this respect. Objects are temporarily stored with an appended suffix to their name, but their subsequent search by name ignores the suffix, not finding the ones already defined. The fix corrects this by first searching in the local file namespace, then in the global namespace. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9744 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9908
https://github.com/root-project/root/pull/9908:686,deployability,updat,updated,686,"Fix for name resolution of GDML objects defined in children files.; # This Pull request:. Fixes GDML name resolution for positions, rotations, scales, solids and volumes defined in a secondary file. ## Changes or fixes:. GDML allows implicit namespacing for objects defined in children files. The current implementation of the ROOT GDML parser is flawed in this respect. Objects are temporarily stored with an appended suffix to their name, but their subsequent search by name ignores the suffix, not finding the ones already defined. The fix corrects this by first searching in the local file namespace, then in the global namespace. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9744 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9908
https://github.com/root-project/root/pull/9908:143,energy efficiency,scale,scales,143,"Fix for name resolution of GDML objects defined in children files.; # This Pull request:. Fixes GDML name resolution for positions, rotations, scales, solids and volumes defined in a secondary file. ## Changes or fixes:. GDML allows implicit namespacing for objects defined in children files. The current implementation of the ROOT GDML parser is flawed in this respect. Objects are temporarily stored with an appended suffix to their name, but their subsequent search by name ignores the suffix, not finding the ones already defined. The fix corrects this by first searching in the local file namespace, then in the global namespace. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9744 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9908
https://github.com/root-project/root/pull/9908:297,energy efficiency,current,current,297,"Fix for name resolution of GDML objects defined in children files.; # This Pull request:. Fixes GDML name resolution for positions, rotations, scales, solids and volumes defined in a secondary file. ## Changes or fixes:. GDML allows implicit namespacing for objects defined in children files. The current implementation of the ROOT GDML parser is flawed in this respect. Objects are temporarily stored with an appended suffix to their name, but their subsequent search by name ignores the suffix, not finding the ones already defined. The fix corrects this by first searching in the local file namespace, then in the global namespace. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9744 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9908
https://github.com/root-project/root/pull/9908:451,integrability,sub,subsequent,451,"Fix for name resolution of GDML objects defined in children files.; # This Pull request:. Fixes GDML name resolution for positions, rotations, scales, solids and volumes defined in a secondary file. ## Changes or fixes:. GDML allows implicit namespacing for objects defined in children files. The current implementation of the ROOT GDML parser is flawed in this respect. Objects are temporarily stored with an appended suffix to their name, but their subsequent search by name ignores the suffix, not finding the ones already defined. The fix corrects this by first searching in the local file namespace, then in the global namespace. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9744 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9908
https://github.com/root-project/root/pull/9908:143,modifiability,scal,scales,143,"Fix for name resolution of GDML objects defined in children files.; # This Pull request:. Fixes GDML name resolution for positions, rotations, scales, solids and volumes defined in a secondary file. ## Changes or fixes:. GDML allows implicit namespacing for objects defined in children files. The current implementation of the ROOT GDML parser is flawed in this respect. Objects are temporarily stored with an appended suffix to their name, but their subsequent search by name ignores the suffix, not finding the ones already defined. The fix corrects this by first searching in the local file namespace, then in the global namespace. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9744 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9908
https://github.com/root-project/root/pull/9908:143,performance,scale,scales,143,"Fix for name resolution of GDML objects defined in children files.; # This Pull request:. Fixes GDML name resolution for positions, rotations, scales, solids and volumes defined in a secondary file. ## Changes or fixes:. GDML allows implicit namespacing for objects defined in children files. The current implementation of the ROOT GDML parser is flawed in this respect. Objects are temporarily stored with an appended suffix to their name, but their subsequent search by name ignores the suffix, not finding the ones already defined. The fix corrects this by first searching in the local file namespace, then in the global namespace. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9744 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9908
https://github.com/root-project/root/pull/9908:656,safety,test,tested,656,"Fix for name resolution of GDML objects defined in children files.; # This Pull request:. Fixes GDML name resolution for positions, rotations, scales, solids and volumes defined in a secondary file. ## Changes or fixes:. GDML allows implicit namespacing for objects defined in children files. The current implementation of the ROOT GDML parser is flawed in this respect. Objects are temporarily stored with an appended suffix to their name, but their subsequent search by name ignores the suffix, not finding the ones already defined. The fix corrects this by first searching in the local file namespace, then in the global namespace. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9744 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9908
https://github.com/root-project/root/pull/9908:686,safety,updat,updated,686,"Fix for name resolution of GDML objects defined in children files.; # This Pull request:. Fixes GDML name resolution for positions, rotations, scales, solids and volumes defined in a secondary file. ## Changes or fixes:. GDML allows implicit namespacing for objects defined in children files. The current implementation of the ROOT GDML parser is flawed in this respect. Objects are temporarily stored with an appended suffix to their name, but their subsequent search by name ignores the suffix, not finding the ones already defined. The fix corrects this by first searching in the local file namespace, then in the global namespace. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9744 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9908
https://github.com/root-project/root/pull/9908:132,security,rotat,rotations,132,"Fix for name resolution of GDML objects defined in children files.; # This Pull request:. Fixes GDML name resolution for positions, rotations, scales, solids and volumes defined in a secondary file. ## Changes or fixes:. GDML allows implicit namespacing for objects defined in children files. The current implementation of the ROOT GDML parser is flawed in this respect. Objects are temporarily stored with an appended suffix to their name, but their subsequent search by name ignores the suffix, not finding the ones already defined. The fix corrects this by first searching in the local file namespace, then in the global namespace. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9744 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9908
https://github.com/root-project/root/pull/9908:686,security,updat,updated,686,"Fix for name resolution of GDML objects defined in children files.; # This Pull request:. Fixes GDML name resolution for positions, rotations, scales, solids and volumes defined in a secondary file. ## Changes or fixes:. GDML allows implicit namespacing for objects defined in children files. The current implementation of the ROOT GDML parser is flawed in this respect. Objects are temporarily stored with an appended suffix to their name, but their subsequent search by name ignores the suffix, not finding the ones already defined. The fix corrects this by first searching in the local file namespace, then in the global namespace. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9744 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9908
https://github.com/root-project/root/pull/9908:656,testability,test,tested,656,"Fix for name resolution of GDML objects defined in children files.; # This Pull request:. Fixes GDML name resolution for positions, rotations, scales, solids and volumes defined in a secondary file. ## Changes or fixes:. GDML allows implicit namespacing for objects defined in children files. The current implementation of the ROOT GDML parser is flawed in this respect. Objects are temporarily stored with an appended suffix to their name, but their subsequent search by name ignores the suffix, not finding the ones already defined. The fix corrects this by first searching in the local file namespace, then in the global namespace. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9744 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9908
https://github.com/root-project/root/issues/9909:9,availability,error,error,9,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:924,availability,error,error,924,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:241,interoperability,bind,bindings,241,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:241,modifiability,bind,bindings,241,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:9,performance,error,error,9,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:924,performance,error,error,924,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:9,safety,error,error,9,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:381,safety,except,except,381,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:431,safety,except,except,431,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:534,safety,test,test,534,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:875,safety,except,except,875,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:924,safety,error,error,924,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:1240,security,sign,signatures,1240,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:534,testability,test,test,534,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:9,usability,error,error,9,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/issues/9909:924,usability,error,error,924,"[PyROOT] error handling with cppyy and overloading; ### Explain what you would like to see improved. I have a `c++` class with several constructors:. MyClass(const std::string& configfilename);. MyClass(const MyClass& other);. I have python bindings for this class that were generated with `cppyy`. Now, I have a piece of python code that instantiates my class, with a nice `try`-`except` block:. try:. obj = MyClass(args.config). except ConfigFileNotFoundError:. print(""config file ""+args.config+"" was not found!""). exit(0). Now, to test, I'm executing this with a wrong config file. But what I get is roughly this:. TypeError: none of the 2 overloaded methods succeeded. Full details:. MyClass(const std::string&) => ConfigFileNotFoundError. MyClass::MyClass(const MyClass&) => TypeError. So I'm wondering:. Since `cppyy` seems to handle function overloading with a `try`/`except` block, is there any reasonable way to do error handling for such applications? . I'd love to actually get the `ConfigFileNotFoundError` to handle it properly, rather than getting this `TypeError`. . I've started to look into using `__overload__`, but this seems less than elegant. Also, I was unable to figure out how to ask `__overload__` for the accepted signatures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9909
https://github.com/root-project/root/pull/9912:161,deployability,updat,updated,161,[RF] Cleanup RooLagrangianMorphFunc; # This Pull request:. WIP will fill this shortly . ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR is to address #9845 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9912
https://github.com/root-project/root/pull/9912:131,safety,test,tested,131,[RF] Cleanup RooLagrangianMorphFunc; # This Pull request:. WIP will fill this shortly . ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR is to address #9845 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9912
https://github.com/root-project/root/pull/9912:161,safety,updat,updated,161,[RF] Cleanup RooLagrangianMorphFunc; # This Pull request:. WIP will fill this shortly . ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR is to address #9845 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9912
https://github.com/root-project/root/pull/9912:161,security,updat,updated,161,[RF] Cleanup RooLagrangianMorphFunc; # This Pull request:. WIP will fill this shortly . ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR is to address #9845 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9912
https://github.com/root-project/root/pull/9912:131,testability,test,tested,131,[RF] Cleanup RooLagrangianMorphFunc; # This Pull request:. WIP will fill this shortly . ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR is to address #9845 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9912
https://github.com/root-project/root/pull/9913:454,availability,down,down,454,"TBranchElement: no drilling through new members.; . This resolved the problem seen at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. and fix #9899. The problem is the rules are applied to a data member nested inside an object nested inside. an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL,. since it is a new member compared to the layout on file, none of the objects; from the new. member down to the object on which the rules need to be run) are actually streamed and the. code gathering the information to run the rule got a bit lost ; it is likely (I am checking. as we speak) that in previous release the rule was not even attempted to be run ... which. might actually be the desired behavior in this specific case. The solution is to have GatherArtificialElements stop drilling through data members which. are not stored in the existing TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9913
https://github.com/root-project/root/pull/9913:662,deployability,releas,release,662,"TBranchElement: no drilling through new members.; . This resolved the problem seen at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. and fix #9899. The problem is the rules are applied to a data member nested inside an object nested inside. an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL,. since it is a new member compared to the layout on file, none of the objects; from the new. member down to the object on which the rules need to be run) are actually streamed and the. code gathering the information to run the rule got a bit lost ; it is likely (I am checking. as we speak) that in previous release the rule was not even attempted to be run ... which. might actually be the desired behavior in this specific case. The solution is to have GatherArtificialElements stop drilling through data members which. are not stored in the existing TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9913
https://github.com/root-project/root/pull/9913:770,interoperability,specif,specific,770,"TBranchElement: no drilling through new members.; . This resolved the problem seen at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. and fix #9899. The problem is the rules are applied to a data member nested inside an object nested inside. an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL,. since it is a new member compared to the layout on file, none of the objects; from the new. member down to the object on which the rules need to be run) are actually streamed and the. code gathering the information to run the rule got a bit lost ; it is likely (I am checking. as we speak) that in previous release the rule was not even attempted to be run ... which. might actually be the desired behavior in this specific case. The solution is to have GatherArtificialElements stop drilling through data members which. are not stored in the existing TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9913
https://github.com/root-project/root/pull/9913:753,usability,behavi,behavior,753,"TBranchElement: no drilling through new members.; . This resolved the problem seen at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. and fix #9899. The problem is the rules are applied to a data member nested inside an object nested inside. an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL,. since it is a new member compared to the layout on file, none of the objects; from the new. member down to the object on which the rules need to be run) are actually streamed and the. code gathering the information to run the rule got a bit lost ; it is likely (I am checking. as we speak) that in previous release the rule was not even attempted to be run ... which. might actually be the desired behavior in this specific case. The solution is to have GatherArtificialElements stop drilling through data members which. are not stored in the existing TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9913
https://github.com/root-project/root/pull/9913:834,usability,stop,stop,834,"TBranchElement: no drilling through new members.; . This resolved the problem seen at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. and fix #9899. The problem is the rules are applied to a data member nested inside an object nested inside. an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL,. since it is a new member compared to the layout on file, none of the objects; from the new. member down to the object on which the rules need to be run) are actually streamed and the. code gathering the information to run the rule got a bit lost ; it is likely (I am checking. as we speak) that in previous release the rule was not even attempted to be run ... which. might actually be the desired behavior in this specific case. The solution is to have GatherArtificialElements stop drilling through data members which. are not stored in the existing TTree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9913
https://github.com/root-project/root/pull/9914:124,integrability,filter,filters,124,[DF] Fixes and improvements to syst. variations; - fix interaction of Vary and Range. - avoid useless clones of the nominal filters. @ikabadzhov will soon open a PR with a test for this as well as many other cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9914
https://github.com/root-project/root/pull/9914:88,safety,avoid,avoid,88,[DF] Fixes and improvements to syst. variations; - fix interaction of Vary and Range. - avoid useless clones of the nominal filters. @ikabadzhov will soon open a PR with a test for this as well as many other cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9914
https://github.com/root-project/root/pull/9914:172,safety,test,test,172,[DF] Fixes and improvements to syst. variations; - fix interaction of Vary and Range. - avoid useless clones of the nominal filters. @ikabadzhov will soon open a PR with a test for this as well as many other cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9914
https://github.com/root-project/root/pull/9914:172,testability,test,test,172,[DF] Fixes and improvements to syst. variations; - fix interaction of Vary and Range. - avoid useless clones of the nominal filters. @ikabadzhov will soon open a PR with a test for this as well as many other cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9914
https://github.com/root-project/root/pull/9914:55,usability,interact,interaction,55,[DF] Fixes and improvements to syst. variations; - fix interaction of Vary and Range. - avoid useless clones of the nominal filters. @ikabadzhov will soon open a PR with a test for this as well as many other cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9914
https://github.com/root-project/root/pull/9915:140,availability,avail,available,140,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:515,deployability,releas,release,515,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:11,energy efficiency,load,loading,11,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:228,energy efficiency,load,loaded,228,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:408,integrability,Buffer,Buffers,408,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:11,performance,load,loading,11,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:228,performance,load,loaded,228,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:253,performance,time,time,253,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:342,performance,time,time,342,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:140,reliability,availab,available,140,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:140,safety,avail,available,140,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:272,safety,test,tests,272,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:283,safety,compl,completely,283,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:424,safety,avoid,avoid,424,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:140,security,availab,available,140,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:283,security,compl,completely,283,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:267,testability,unit,unit,267,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/pull/9915:272,testability,test,tests,272,"[RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Initializing RooBatchCompute takes over a second when CUDA is also. available on the system. It is unreasonable to do this everytime the. RooFit library is loaded. For example, the time of small unit tests was. completely dominated by the RooBatchCompute initialization time before. this commit. This change entailed another change in `Buffers.cxx` to avoid static. initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9915
https://github.com/root-project/root/issues/9917:539,availability,error,error,539,"SetRange and SetRangeUser fail silently; Here is a reproducer:. ```cpp. #include <TH1D.h>. #include <TApplication.h>. int main() {. TApplication app(""app"", nullptr, nullptr);. TH1::AddDirectory(false);. TH1D h1(""h"", ""h"", 100, 0, 3);. h1.Fill(1, 10);. TH1D h2(""h"", ""h"", 100, 0, 30);. h2.Fill(10, 20);. TH1D h3(""h"", ""h"", 100, 0, 50);. h3.Fill(20, 30);. h1.GetXaxis()->SetRange(-1, 200);. h1.GetXaxis()->SetRangeUser(-1, 50);. h1.Draw(""HIST"");. h2.Draw(""SAME"");. h3.Draw(""SAME"");. app.Run();. }. ```. The range is unchanged but no warning or error is printed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9917
https://github.com/root-project/root/issues/9917:26,deployability,fail,fail,26,"SetRange and SetRangeUser fail silently; Here is a reproducer:. ```cpp. #include <TH1D.h>. #include <TApplication.h>. int main() {. TApplication app(""app"", nullptr, nullptr);. TH1::AddDirectory(false);. TH1D h1(""h"", ""h"", 100, 0, 3);. h1.Fill(1, 10);. TH1D h2(""h"", ""h"", 100, 0, 30);. h2.Fill(10, 20);. TH1D h3(""h"", ""h"", 100, 0, 50);. h3.Fill(20, 30);. h1.GetXaxis()->SetRange(-1, 200);. h1.GetXaxis()->SetRangeUser(-1, 50);. h1.Draw(""HIST"");. h2.Draw(""SAME"");. h3.Draw(""SAME"");. app.Run();. }. ```. The range is unchanged but no warning or error is printed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9917
https://github.com/root-project/root/issues/9917:427,energy efficiency,Draw,Draw,427,"SetRange and SetRangeUser fail silently; Here is a reproducer:. ```cpp. #include <TH1D.h>. #include <TApplication.h>. int main() {. TApplication app(""app"", nullptr, nullptr);. TH1::AddDirectory(false);. TH1D h1(""h"", ""h"", 100, 0, 3);. h1.Fill(1, 10);. TH1D h2(""h"", ""h"", 100, 0, 30);. h2.Fill(10, 20);. TH1D h3(""h"", ""h"", 100, 0, 50);. h3.Fill(20, 30);. h1.GetXaxis()->SetRange(-1, 200);. h1.GetXaxis()->SetRangeUser(-1, 50);. h1.Draw(""HIST"");. h2.Draw(""SAME"");. h3.Draw(""SAME"");. app.Run();. }. ```. The range is unchanged but no warning or error is printed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9917
https://github.com/root-project/root/issues/9917:445,energy efficiency,Draw,Draw,445,"SetRange and SetRangeUser fail silently; Here is a reproducer:. ```cpp. #include <TH1D.h>. #include <TApplication.h>. int main() {. TApplication app(""app"", nullptr, nullptr);. TH1::AddDirectory(false);. TH1D h1(""h"", ""h"", 100, 0, 3);. h1.Fill(1, 10);. TH1D h2(""h"", ""h"", 100, 0, 30);. h2.Fill(10, 20);. TH1D h3(""h"", ""h"", 100, 0, 50);. h3.Fill(20, 30);. h1.GetXaxis()->SetRange(-1, 200);. h1.GetXaxis()->SetRangeUser(-1, 50);. h1.Draw(""HIST"");. h2.Draw(""SAME"");. h3.Draw(""SAME"");. app.Run();. }. ```. The range is unchanged but no warning or error is printed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9917
https://github.com/root-project/root/issues/9917:463,energy efficiency,Draw,Draw,463,"SetRange and SetRangeUser fail silently; Here is a reproducer:. ```cpp. #include <TH1D.h>. #include <TApplication.h>. int main() {. TApplication app(""app"", nullptr, nullptr);. TH1::AddDirectory(false);. TH1D h1(""h"", ""h"", 100, 0, 3);. h1.Fill(1, 10);. TH1D h2(""h"", ""h"", 100, 0, 30);. h2.Fill(10, 20);. TH1D h3(""h"", ""h"", 100, 0, 50);. h3.Fill(20, 30);. h1.GetXaxis()->SetRange(-1, 200);. h1.GetXaxis()->SetRangeUser(-1, 50);. h1.Draw(""HIST"");. h2.Draw(""SAME"");. h3.Draw(""SAME"");. app.Run();. }. ```. The range is unchanged but no warning or error is printed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9917
https://github.com/root-project/root/issues/9917:539,performance,error,error,539,"SetRange and SetRangeUser fail silently; Here is a reproducer:. ```cpp. #include <TH1D.h>. #include <TApplication.h>. int main() {. TApplication app(""app"", nullptr, nullptr);. TH1::AddDirectory(false);. TH1D h1(""h"", ""h"", 100, 0, 3);. h1.Fill(1, 10);. TH1D h2(""h"", ""h"", 100, 0, 30);. h2.Fill(10, 20);. TH1D h3(""h"", ""h"", 100, 0, 50);. h3.Fill(20, 30);. h1.GetXaxis()->SetRange(-1, 200);. h1.GetXaxis()->SetRangeUser(-1, 50);. h1.Draw(""HIST"");. h2.Draw(""SAME"");. h3.Draw(""SAME"");. app.Run();. }. ```. The range is unchanged but no warning or error is printed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9917
https://github.com/root-project/root/issues/9917:26,reliability,fail,fail,26,"SetRange and SetRangeUser fail silently; Here is a reproducer:. ```cpp. #include <TH1D.h>. #include <TApplication.h>. int main() {. TApplication app(""app"", nullptr, nullptr);. TH1::AddDirectory(false);. TH1D h1(""h"", ""h"", 100, 0, 3);. h1.Fill(1, 10);. TH1D h2(""h"", ""h"", 100, 0, 30);. h2.Fill(10, 20);. TH1D h3(""h"", ""h"", 100, 0, 50);. h3.Fill(20, 30);. h1.GetXaxis()->SetRange(-1, 200);. h1.GetXaxis()->SetRangeUser(-1, 50);. h1.Draw(""HIST"");. h2.Draw(""SAME"");. h3.Draw(""SAME"");. app.Run();. }. ```. The range is unchanged but no warning or error is printed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9917
https://github.com/root-project/root/issues/9917:539,safety,error,error,539,"SetRange and SetRangeUser fail silently; Here is a reproducer:. ```cpp. #include <TH1D.h>. #include <TApplication.h>. int main() {. TApplication app(""app"", nullptr, nullptr);. TH1::AddDirectory(false);. TH1D h1(""h"", ""h"", 100, 0, 3);. h1.Fill(1, 10);. TH1D h2(""h"", ""h"", 100, 0, 30);. h2.Fill(10, 20);. TH1D h3(""h"", ""h"", 100, 0, 50);. h3.Fill(20, 30);. h1.GetXaxis()->SetRange(-1, 200);. h1.GetXaxis()->SetRangeUser(-1, 50);. h1.Draw(""HIST"");. h2.Draw(""SAME"");. h3.Draw(""SAME"");. app.Run();. }. ```. The range is unchanged but no warning or error is printed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9917
https://github.com/root-project/root/issues/9917:539,usability,error,error,539,"SetRange and SetRangeUser fail silently; Here is a reproducer:. ```cpp. #include <TH1D.h>. #include <TApplication.h>. int main() {. TApplication app(""app"", nullptr, nullptr);. TH1::AddDirectory(false);. TH1D h1(""h"", ""h"", 100, 0, 3);. h1.Fill(1, 10);. TH1D h2(""h"", ""h"", 100, 0, 30);. h2.Fill(10, 20);. TH1D h3(""h"", ""h"", 100, 0, 50);. h3.Fill(20, 30);. h1.GetXaxis()->SetRange(-1, 200);. h1.GetXaxis()->SetRangeUser(-1, 50);. h1.Draw(""HIST"");. h2.Draw(""SAME"");. h3.Draw(""SAME"");. app.Run();. }. ```. The range is unchanged but no warning or error is printed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9917
https://github.com/root-project/root/pull/9919:149,energy efficiency,Draw,Draw,149,"Fix crash in TMultiGraph destructor, improve code; Following lines are crashing:. ```. root https://root.cern/js/files/multigraph.root. root [1] c1->Draw(). root [2] .q. ```. It is due to double-deletion of histogram in TMultiGraph. Fixed by correctly implementing `RecursiveRemove`. Improve code once touched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9919
https://github.com/root-project/root/issues/9920:1016,availability,error,error,1016,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:803,deployability,version,version,803,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:1003,deployability,fail,fail,1003,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:803,integrability,version,version,803,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:910,interoperability,share,shared,910,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:803,modifiability,version,version,803,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:1016,performance,error,error,1016,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:231,reliability,pra,pragma,231,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:265,reliability,pra,pragma,265,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:319,reliability,pra,pragma,319,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:393,reliability,pra,pragma,393,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:463,reliability,pra,pragma,463,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:1003,reliability,fail,fail,1003,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:1109,reliability,doe,does,1109,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:1016,safety,error,error,1016,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:989,usability,command,command,989,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/issues/9920:1016,usability,error,error,1016,"rootcling ignores RVec and RDataFrame; cat LinkDef.h:. ```cpp. #ifndef LinkDef_h. #define LinkDef_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. #include ""TwoInts.h"". #ifdef __CLING__. #pragma link C++ class TwoInts+;. #pragma link C++ class ROOT::VecOps::RVec<TwoInts>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<TwoInts>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>+;. #pragma link C++ class ROOT::VecOps::RVec<ROOT::VecOps::RVec<ROOT::VecOps::RVec<int>>>+;. #endif. #endif /* LinkDef_h */. ```. TwoInts.h:. ```c++. #ifndef TwoInts_h. #define TwoInts_h. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. using namespace ROOT::VecOps;. struct TwoInts {. int a, b;. };. #endif /* TwoInts_h */. ```. ROOT version 6.24/06. ```. rootcling -f mydict.cxx -rmf libmydict.rootmap -rml libmydict.so LinkDef.h. clang++ -shared -o libmydict.so mydict.cxx `root-config --cflags —libs. ```. The second command would fail with an error: no member named 'VecOps' in namespace ‘ROOT’ if LinkDef.h has includes, but TwoInts.h does not. Is that a feature or a bug? cc: @ianna",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9920
https://github.com/root-project/root/pull/9921:17,energy efficiency,load,loading,17,[v626][RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Backport of https://github.com/root-project/root/pull/9915.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9921
https://github.com/root-project/root/pull/9921:17,performance,load,loading,17,[v626][RF] Defer loading of `RooBatchCompute` libs to first RooFitDriver use; Backport of https://github.com/root-project/root/pull/9915.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9921
https://github.com/root-project/root/issues/9924:222,availability,Error,Error,222,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:1358,availability,sli,slide,1358,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:1456,availability,sli,slide,1456,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:1517,availability,sli,slide,1517,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:95,deployability,patch,patch,95,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:187,deployability,fail,fails,187,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:600,deployability,continu,continue,600,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:865,deployability,updat,updated,865,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:1002,deployability,patch,patch,1002,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:698,energy efficiency,current,current,698,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:932,integrability,sub,sub-objects,932,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:0,performance,I/O,I/O,0,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:222,performance,Error,Error,222,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:710,performance,memor,memory,710,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:915,performance,I/O,I/O,915,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:187,reliability,fail,fails,187,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:1358,reliability,sli,slide,1358,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:1456,reliability,sli,slide,1456,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:1517,reliability,sli,slide,1517,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:95,safety,patch,patch,95,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:132,safety,test,test,132,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:222,safety,Error,Error,222,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:640,safety,avoid,avoid,640,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:865,safety,updat,updated,865,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:1002,safety,patch,patch,1002,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:95,security,patch,patch,95,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:865,security,updat,updated,865,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:1002,security,patch,patch,1002,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:132,testability,test,test,132,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:4,usability,custom,customization,4,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:222,usability,Error,Error,222,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/issues/9924:710,usability,memor,memory,710,"I/O customization rule not run for a all-transient nested objects in a split branch.; With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):. ```. Error in <readfile>: For entries 0 we have result=19200. ```. This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:. ```. if (!foundRelatedSplit) {. continue;. }. ```. which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```. diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx. index 58b50a93..e0aef7e1 100644. --- a/root/io/issue-9899/read_cmssw_class_v3.cxx. +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx. @@ -129,10 +129,8 @@ struct PersHighData {. }. int check(int slide = 1) {. int res = 0;. -#ifdef FIXED_ISSUE_99xx. for(auto &d : fPersLowData). res += d.check(slide, 0);. -#endif. for(auto &d : fLowData). res += d.check(slide * BIT(6), 10);. return res;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9924
https://github.com/root-project/root/pull/9925:308,availability,error,error,308,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:502,availability,error,error,502,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:287,deployability,scale,scaled,287,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:51,energy efficiency,optim,optimizing,51,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:287,energy efficiency,scale,scaled,287,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:496,integrability,event,event,496,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:287,modifiability,scal,scaled,287,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:51,performance,optimiz,optimizing,51,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:287,performance,scale,scaled,287,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:308,performance,error,error,308,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:502,performance,error,error,502,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:294,safety,compl,complementary,294,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:308,safety,error,error,308,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:428,safety,test,tests,428,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:477,safety,Test,Test,477,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:502,safety,error,error,502,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:534,safety,test,test,534,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:294,security,compl,complementary,294,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:428,testability,test,tests,428,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:477,testability,Test,Test,477,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:534,testability,test,test,534,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:566,testability,verif,verify,566,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:308,usability,error,error,308,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:353,usability,efficien,efficiently,353,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9925:502,usability,error,error,502,"[RF] Speed up RooDecay by at least a factor two by optimizing `evalCerf` in RooGaussModel; In the RooDecay case, the evalCerf function called internally in. RooGaussModel passes a purely imaginary argument to. `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal. to a scaled complementary error function, which can be evaluated more. efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the. RooDecay, for example:. `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`. The test can be run individually to verify this speedup:. ```. `./stressRooFit -n 22`. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9925
https://github.com/root-project/root/pull/9926:228,modifiability,variab,variables,228,"Add Relativistic Breit Wigner to TMath; # This Pull request:. ## Changes or fixes:. TMath.cxx and TMath.h. . Define BreitWignerRelativistic(...) in TMath.h and then calculate in TMath.cxx, following same convention for names of variables, default values and normalization as BreitWigner(...) which is already defined in TMath. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9926
https://github.com/root-project/root/pull/9926:348,safety,test,tested,348,"Add Relativistic Breit Wigner to TMath; # This Pull request:. ## Changes or fixes:. TMath.cxx and TMath.h. . Define BreitWignerRelativistic(...) in TMath.h and then calculate in TMath.cxx, following same convention for names of variables, default values and normalization as BreitWigner(...) which is already defined in TMath. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9926
https://github.com/root-project/root/pull/9926:348,testability,test,tested,348,"Add Relativistic Breit Wigner to TMath; # This Pull request:. ## Changes or fixes:. TMath.cxx and TMath.h. . Define BreitWignerRelativistic(...) in TMath.h and then calculate in TMath.cxx, following same convention for names of variables, default values and normalization as BreitWigner(...) which is already defined in TMath. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9926
https://github.com/root-project/root/pull/9927:505,availability,down,down,505,"TBranchElement: no drilling through new members. ; See https://github.com/root-project/root/pull/9913. This resolved the problem seen at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. and fix #9899. The problem is the rules are applied to a data member nested inside an object nested inside. an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL,. since it is a new member compared to the layout on file, none of the objects; from the new. member down to the object on which the rules need to be run) are actually streamed and the. code gathering the information to run the rule got a bit lost ; it is likely (I am checking. as we speak) that in previous release the rule was not even attempted to be run ... which. might actually be the desired behavior in this specific case. The solution is to have GatherArtificialElements stop drilling through data members which. are not stored in the existing TTree",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9927
https://github.com/root-project/root/pull/9927:713,deployability,releas,release,713,"TBranchElement: no drilling through new members. ; See https://github.com/root-project/root/pull/9913. This resolved the problem seen at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. and fix #9899. The problem is the rules are applied to a data member nested inside an object nested inside. an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL,. since it is a new member compared to the layout on file, none of the objects; from the new. member down to the object on which the rules need to be run) are actually streamed and the. code gathering the information to run the rule got a bit lost ; it is likely (I am checking. as we speak) that in previous release the rule was not even attempted to be run ... which. might actually be the desired behavior in this specific case. The solution is to have GatherArtificialElements stop drilling through data members which. are not stored in the existing TTree",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9927
https://github.com/root-project/root/pull/9927:821,interoperability,specif,specific,821,"TBranchElement: no drilling through new members. ; See https://github.com/root-project/root/pull/9913. This resolved the problem seen at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. and fix #9899. The problem is the rules are applied to a data member nested inside an object nested inside. an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL,. since it is a new member compared to the layout on file, none of the objects; from the new. member down to the object on which the rules need to be run) are actually streamed and the. code gathering the information to run the rule got a bit lost ; it is likely (I am checking. as we speak) that in previous release the rule was not even attempted to be run ... which. might actually be the desired behavior in this specific case. The solution is to have GatherArtificialElements stop drilling through data members which. are not stored in the existing TTree",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9927
https://github.com/root-project/root/pull/9927:804,usability,behavi,behavior,804,"TBranchElement: no drilling through new members. ; See https://github.com/root-project/root/pull/9913. This resolved the problem seen at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. and fix #9899. The problem is the rules are applied to a data member nested inside an object nested inside. an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL,. since it is a new member compared to the layout on file, none of the objects; from the new. member down to the object on which the rules need to be run) are actually streamed and the. code gathering the information to run the rule got a bit lost ; it is likely (I am checking. as we speak) that in previous release the rule was not even attempted to be run ... which. might actually be the desired behavior in this specific case. The solution is to have GatherArtificialElements stop drilling through data members which. are not stored in the existing TTree",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9927
https://github.com/root-project/root/pull/9927:885,usability,stop,stop,885,"TBranchElement: no drilling through new members. ; See https://github.com/root-project/root/pull/9913. This resolved the problem seen at: https://github.com/cms-sw/cmssw/issues/36908#issuecomment-1036397481. and fix #9899. The problem is the rules are applied to a data member nested inside an object nested inside. an STL collection that is a new data member of the class reco::HaloClusterCandidateHCAL,. since it is a new member compared to the layout on file, none of the objects; from the new. member down to the object on which the rules need to be run) are actually streamed and the. code gathering the information to run the rule got a bit lost ; it is likely (I am checking. as we speak) that in previous release the rule was not even attempted to be run ... which. might actually be the desired behavior in this specific case. The solution is to have GatherArtificialElements stop drilling through data members which. are not stored in the existing TTree",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9927
https://github.com/root-project/root/pull/9932:161,interoperability,Format,Format,161,"Improve syntax of main hist classes; 1. Use `override` syntax. 2. Use `nullptr`. 3. Mark as `= delete` not implemented methods. 4. Replace `Form()` by `TString::Format().Data()`. 4. `using TH1::GetBinContent` in TH2 and TH3, saves method call",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9932
https://github.com/root-project/root/pull/9933:9,reliability,diagno,diagnostics,9,"[DF] Add diagnostics for simultaneous variation of the same column; It does not make sense, it should not be allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9933
https://github.com/root-project/root/pull/9933:71,reliability,doe,does,71,"[DF] Add diagnostics for simultaneous variation of the same column; It does not make sense, it should not be allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9933
https://github.com/root-project/root/pull/9933:9,testability,diagno,diagnostics,9,"[DF] Add diagnostics for simultaneous variation of the same column; It does not make sense, it should not be allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9933
https://github.com/root-project/root/pull/9933:25,testability,simul,simultaneous,25,"[DF] Add diagnostics for simultaneous variation of the same column; It does not make sense, it should not be allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9933
https://github.com/root-project/root/pull/9934:175,availability,error,error,175,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:229,availability,error,errors,229,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:133,deployability,version,version,133,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:133,integrability,version,version,133,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:133,modifiability,version,version,133,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:175,performance,error,error,175,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:204,performance,memor,memory,204,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:229,performance,error,errors,229,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:175,safety,error,error,175,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:224,safety,test,test,224,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:229,safety,error,errors,229,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:184,security,access,accessing,184,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:224,testability,test,test,224,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:175,usability,error,error,175,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:204,usability,memor,memory,204,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9934:229,usability,error,errors,229,"Let use class comments after ClassDefOverride in dictionary generation; Up to now comments were ignored:. ```. ClassDefOverride(name,version) // class comments. ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9934
https://github.com/root-project/root/pull/9935:86,deployability,depend,dependency,86,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:138,deployability,depend,depend,138,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:261,deployability,log,logic,261,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:86,integrability,depend,dependency,86,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:138,integrability,depend,depend,138,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:86,modifiability,depend,dependency,86,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:138,modifiability,depend,depend,138,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:235,reliability,doe,does,235,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:86,safety,depend,dependency,86,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:138,safety,depend,depend,138,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:261,safety,log,logic,261,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:361,safety,test,test,361,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:261,security,log,logic,261,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:86,testability,depend,dependency,86,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:138,testability,depend,depend,138,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:261,testability,log,logic,261,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9935:361,testability,test,test,361,"[DF] Fix Vary+DefinePerSample; Columns defined via DefinePerSample cannot ever have a dependency. on the systematic variation (they don't depend on any dataset. column), so when a RDefinePerSample is asked to `MakeVariations`. it just does nothing, and program logic should never end up. requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9935
https://github.com/root-project/root/pull/9936:29,energy efficiency,draw,drawing,29,[jsroot] small fixes in TGeo drawing in TCanvas (6.26); Always resize TGeo drawing when doing redraw,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9936
https://github.com/root-project/root/pull/9936:75,energy efficiency,draw,drawing,75,[jsroot] small fixes in TGeo drawing in TCanvas (6.26); Always resize TGeo drawing when doing redraw,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9936
https://github.com/root-project/root/pull/9938:198,availability,state,statements,198,Miscellaneous non-functional changes; * Remove unnecessary alias for `ABC` in Python 2. * Remove spurious `from __future__ import print_function`. * Place creation of `logger` variable after import statements in `Proxy.py`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9938
https://github.com/root-project/root/pull/9938:168,deployability,log,logger,168,Miscellaneous non-functional changes; * Remove unnecessary alias for `ABC` in Python 2. * Remove spurious `from __future__ import print_function`. * Place creation of `logger` variable after import statements in `Proxy.py`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9938
https://github.com/root-project/root/pull/9938:198,integrability,state,statements,198,Miscellaneous non-functional changes; * Remove unnecessary alias for `ABC` in Python 2. * Remove spurious `from __future__ import print_function`. * Place creation of `logger` variable after import statements in `Proxy.py`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9938
https://github.com/root-project/root/pull/9938:213,interoperability,Prox,Proxy,213,Miscellaneous non-functional changes; * Remove unnecessary alias for `ABC` in Python 2. * Remove spurious `from __future__ import print_function`. * Place creation of `logger` variable after import statements in `Proxy.py`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9938
https://github.com/root-project/root/pull/9938:176,modifiability,variab,variable,176,Miscellaneous non-functional changes; * Remove unnecessary alias for `ABC` in Python 2. * Remove spurious `from __future__ import print_function`. * Place creation of `logger` variable after import statements in `Proxy.py`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9938
https://github.com/root-project/root/pull/9938:168,safety,log,logger,168,Miscellaneous non-functional changes; * Remove unnecessary alias for `ABC` in Python 2. * Remove spurious `from __future__ import print_function`. * Place creation of `logger` variable after import statements in `Proxy.py`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9938
https://github.com/root-project/root/pull/9938:168,security,log,logger,168,Miscellaneous non-functional changes; * Remove unnecessary alias for `ABC` in Python 2. * Remove spurious `from __future__ import print_function`. * Place creation of `logger` variable after import statements in `Proxy.py`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9938
https://github.com/root-project/root/pull/9938:168,testability,log,logger,168,Miscellaneous non-functional changes; * Remove unnecessary alias for `ABC` in Python 2. * Remove spurious `from __future__ import print_function`. * Place creation of `logger` variable after import statements in `Proxy.py`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9938
https://github.com/root-project/root/issues/9939:11,availability,slo,slow,11,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:85,availability,slo,slow,85,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:90,availability,down,down,90,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:385,availability,slo,slow,385,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:390,availability,down,down,390,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:766,availability,slo,slows,766,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:772,availability,down,down,772,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1373,availability,avail,available,1373,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1488,availability,down,download,1488,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1515,availability,replic,replicate,1515,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1604,availability,slo,slower,1604,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:2166,availability,restor,restored,2166,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:407,deployability,version,versions,407,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:964,deployability,contain,containing,964,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1015,deployability,version,version,1015,"ce TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1083,deployability,version,version,1083,"ow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1300,deployability,contain,contain,1300,"103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1333,deployability,contain,containing,1333,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1736,deployability,depend,depending,1736,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1758,deployability,version,version,1758,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1956,deployability,version,versions,1956,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:407,integrability,version,versions,407,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1015,integrability,version,version,1015,"ce TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1083,integrability,version,version,1083,"ow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1736,integrability,depend,depending,1736,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1758,integrability,version,version,1758,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1956,integrability,version,versions,1956,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:2057,integrability,repositor,repository,2057,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:2057,interoperability,repositor,repository,2057,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:407,modifiability,version,versions,407,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1015,modifiability,version,version,1015,"ce TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1083,modifiability,version,version,1083,"ow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1736,modifiability,depend,depending,1736,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1758,modifiability,version,version,1758,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1956,modifiability,version,versions,1956,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:709,performance,time,times,709,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:883,performance,time,times,883,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1530,performance,time,times,1530,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1686,performance,time,time,1686,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:2261,performance,time,times,2261,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:11,reliability,slo,slow,11,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:85,reliability,slo,slow,85,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:385,reliability,slo,slow,385,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:766,reliability,slo,slows,766,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1373,reliability,availab,available,1373,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1471,reliability,pra,practive,1471,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1604,reliability,slo,slower,1604,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:2166,reliability,restor,restored,2166,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:957,safety,input,inputs,957,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1151,safety,input,inputs,1151,"ed by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1373,safety,avail,available,1373,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1567,safety,test,tests,1567,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1736,safety,depend,depending,1736,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:2001,safety,test,test,2001,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:34,security,modif,modification,34,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:345,security,modif,modifies,345,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1373,security,availab,available,1373,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1567,testability,test,tests,1567,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1736,testability,depend,depending,1736,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:2001,testability,test,test,2001,"2b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, . Best, . Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:129,usability,command,command,129,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:799,usability,command,command,799,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:957,usability,input,inputs,957,"Hadd super slow since TFileMerger modification; . Dear all, . I found out an extreme slow down affecting for instance the `hadd` command that was introduced by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1151,usability,input,inputs,1151,"ed by the following commit . https://github.com/root-project/root/commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/issues/9939:1218,usability,user,user,1218,"commit/06b9878fd946ed717f64cb85810f4552accd8ab7#diff-765b2bfb5aed033baddbf7036ddda5a103b3b82fa5456b462b74b31cd79dc51b. which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the . ```. else. dirtodelete.Add(result);. ```. When hadding files, those two lines are called for each object found in a TDirectory. . So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus . whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here . /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/. (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link . https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx. (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests. ```. else. dirtodelete.Add(result);. ```. the speed is restored even using `ROOT 6.22.08`. So the problem rea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9939
https://github.com/root-project/root/pull/9941:7,availability,Operat,Operation,7,Create Operation subclasses to tag different operation types; Supersedes #9867,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9941
https://github.com/root-project/root/pull/9941:45,availability,operat,operation,45,Create Operation subclasses to tag different operation types; Supersedes #9867,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9941
https://github.com/root-project/root/pull/9941:17,integrability,sub,subclasses,17,Create Operation subclasses to tag different operation types; Supersedes #9867,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9941
https://github.com/root-project/root/pull/9943:203,energy efficiency,core,core,203,"[inc] avoid doxygen warnings; # This Pull request:. ## Changes or fixes:. This is needed to avoid doxygen warning about `clang/Basic/LangOptions.def` not being found, for example when including it from `core/dictgen/src/rootcling_impl.cxx`. as well as one from `graf2d/gpadv7/inc/ROOT/RAttrAxis.hxx:36: warning: Found ';' while parsing initializer list! (doxygen could be confused by a macro call without semicolon)`. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9943
https://github.com/root-project/root/pull/9943:6,safety,avoid,avoid,6,"[inc] avoid doxygen warnings; # This Pull request:. ## Changes or fixes:. This is needed to avoid doxygen warning about `clang/Basic/LangOptions.def` not being found, for example when including it from `core/dictgen/src/rootcling_impl.cxx`. as well as one from `graf2d/gpadv7/inc/ROOT/RAttrAxis.hxx:36: warning: Found ';' while parsing initializer list! (doxygen could be confused by a macro call without semicolon)`. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9943
https://github.com/root-project/root/pull/9943:92,safety,avoid,avoid,92,"[inc] avoid doxygen warnings; # This Pull request:. ## Changes or fixes:. This is needed to avoid doxygen warning about `clang/Basic/LangOptions.def` not being found, for example when including it from `core/dictgen/src/rootcling_impl.cxx`. as well as one from `graf2d/gpadv7/inc/ROOT/RAttrAxis.hxx:36: warning: Found ';' while parsing initializer list! (doxygen could be confused by a macro call without semicolon)`. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9943
https://github.com/root-project/root/pull/9943:439,safety,test,tested,439,"[inc] avoid doxygen warnings; # This Pull request:. ## Changes or fixes:. This is needed to avoid doxygen warning about `clang/Basic/LangOptions.def` not being found, for example when including it from `core/dictgen/src/rootcling_impl.cxx`. as well as one from `graf2d/gpadv7/inc/ROOT/RAttrAxis.hxx:36: warning: Found ';' while parsing initializer list! (doxygen could be confused by a macro call without semicolon)`. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9943
https://github.com/root-project/root/pull/9943:439,testability,test,tested,439,"[inc] avoid doxygen warnings; # This Pull request:. ## Changes or fixes:. This is needed to avoid doxygen warning about `clang/Basic/LangOptions.def` not being found, for example when including it from `core/dictgen/src/rootcling_impl.cxx`. as well as one from `graf2d/gpadv7/inc/ROOT/RAttrAxis.hxx:36: warning: Found ';' while parsing initializer list! (doxygen could be confused by a macro call without semicolon)`. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9943
https://github.com/root-project/root/issues/9944:1075,availability,Error,Error,1075,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1180,availability,error,error,1180,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:675,deployability,build,build,675,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:685,deployability,releas,release,685,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:756,deployability,log,log,756,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1102,deployability,build,build,1102,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1112,deployability,releas,release,1112,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1270,deployability,Fail,Failed,1270,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1461,energy efficiency,optim,optimization,1461,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1146,integrability,messag,message,1146,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1146,interoperability,messag,message,1146,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1075,performance,Error,Error,1075,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1180,performance,error,error,1180,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1461,performance,optimiz,optimization,1461,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1270,reliability,Fail,Failed,1270,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:179,safety,TEST,TEST,179,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:499,safety,TEST,TEST,499,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:756,safety,log,log,756,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1075,safety,Error,Error,1075,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1180,safety,error,error,1180,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1208,safety,Test,Test,1208,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:312,security,Ident,Ident,312,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:756,security,log,log,756,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:873,security,Ident,Ident,873,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:179,testability,TEST,TEST,179,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:499,testability,TEST,TEST,499,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:756,testability,log,log,756,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1208,testability,Test,Test,1208,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:222,usability,User,Users,222,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:562,usability,User,Users,562,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:660,usability,User,Users,660,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1075,usability,Error,Error,1075,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1087,usability,User,Users,1087,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/issues/9944:1180,usability,error,error,1180,"[win64] Output lines are in wrong order when running CTest on Windows x64; Output lines are in wrong order when running CTest on Windows x64, as shown below:. ```. 1397: -- BEGIN TEST OUTPUT --. 1397:. 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C... 1397: WithDtor(): 1. 1397: Ident: IAmWithDtor! 1397: Now deleting TInterpreterValue. 1397: ~WithDtor() 0. 1397: Now all WithDor should be gone; we have 0 left. 1397: About to return a WithDtor. 1397:. 1397: -- END TEST OUTPUT --. 1397: -- BEGIN OUTDIFF OUTPUT --. 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021. 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022. 1397: @@ -1,7 +1,7 @@. 1397:. 1397: WithDtor():1. 1397: -AbouttoreturnaWithDtor. 1397: Ident:IAmWithDtor! 1397: NowdeletingTInterpreterValue. 1397: ~WithDtor()0. 1397: NowallWithDorshouldbegone;wehave0left. 1397: +AbouttoreturnaWithDtor. 1397:. 1397: -- END OUTDIFF OUTPUT --. 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):. 1397: compare 'stdout' error: 1. 1397:. 1397:. 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec. ```. The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position). This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9944
https://github.com/root-project/root/pull/9945:259,deployability,upgrad,upgrade,259,"[cling,windows] Disable the `-O1` optimization flag on Windows; The `-O1` optimization flag has nasty side effects on Windows (32 and 64 bit). These side effects are described in the issue #9809 on Win32 and the issue #9944 on Win64. To be reviewed after the upgrade of LLVM & Clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9945
https://github.com/root-project/root/pull/9945:34,energy efficiency,optim,optimization,34,"[cling,windows] Disable the `-O1` optimization flag on Windows; The `-O1` optimization flag has nasty side effects on Windows (32 and 64 bit). These side effects are described in the issue #9809 on Win32 and the issue #9944 on Win64. To be reviewed after the upgrade of LLVM & Clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9945
https://github.com/root-project/root/pull/9945:74,energy efficiency,optim,optimization,74,"[cling,windows] Disable the `-O1` optimization flag on Windows; The `-O1` optimization flag has nasty side effects on Windows (32 and 64 bit). These side effects are described in the issue #9809 on Win32 and the issue #9944 on Win64. To be reviewed after the upgrade of LLVM & Clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9945
https://github.com/root-project/root/pull/9945:259,modifiability,upgrad,upgrade,259,"[cling,windows] Disable the `-O1` optimization flag on Windows; The `-O1` optimization flag has nasty side effects on Windows (32 and 64 bit). These side effects are described in the issue #9809 on Win32 and the issue #9944 on Win64. To be reviewed after the upgrade of LLVM & Clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9945
https://github.com/root-project/root/pull/9945:34,performance,optimiz,optimization,34,"[cling,windows] Disable the `-O1` optimization flag on Windows; The `-O1` optimization flag has nasty side effects on Windows (32 and 64 bit). These side effects are described in the issue #9809 on Win32 and the issue #9944 on Win64. To be reviewed after the upgrade of LLVM & Clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9945
https://github.com/root-project/root/pull/9945:74,performance,optimiz,optimization,74,"[cling,windows] Disable the `-O1` optimization flag on Windows; The `-O1` optimization flag has nasty side effects on Windows (32 and 64 bit). These side effects are described in the issue #9809 on Win32 and the issue #9944 on Win64. To be reviewed after the upgrade of LLVM & Clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9945
https://github.com/root-project/root/pull/9945:240,safety,review,reviewed,240,"[cling,windows] Disable the `-O1` optimization flag on Windows; The `-O1` optimization flag has nasty side effects on Windows (32 and 64 bit). These side effects are described in the issue #9809 on Win32 and the issue #9944 on Win64. To be reviewed after the upgrade of LLVM & Clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9945
https://github.com/root-project/root/pull/9945:240,testability,review,reviewed,240,"[cling,windows] Disable the `-O1` optimization flag on Windows; The `-O1` optimization flag has nasty side effects on Windows (32 and 64 bit). These side effects are described in the issue #9809 on Win32 and the issue #9944 on Win64. To be reviewed after the upgrade of LLVM & Clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9945
https://github.com/root-project/root/pull/9946:394,deployability,updat,updated,394,Prevents doxygen from parsing non-C++-standard keywords [skip-ci]; # This Pull request:. ## Changes or fixes:. Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings. This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9946
https://github.com/root-project/root/pull/9946:38,interoperability,standard,standard,38,Prevents doxygen from parsing non-C++-standard keywords [skip-ci]; # This Pull request:. ## Changes or fixes:. Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings. This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9946
https://github.com/root-project/root/pull/9946:149,interoperability,standard,standard,149,Prevents doxygen from parsing non-C++-standard keywords [skip-ci]; # This Pull request:. ## Changes or fixes:. Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings. This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9946
https://github.com/root-project/root/pull/9946:288,modifiability,concern,concerning,288,Prevents doxygen from parsing non-C++-standard keywords [skip-ci]; # This Pull request:. ## Changes or fixes:. Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings. This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9946
https://github.com/root-project/root/pull/9946:0,safety,Prevent,Prevents,0,Prevents doxygen from parsing non-C++-standard keywords [skip-ci]; # This Pull request:. ## Changes or fixes:. Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings. This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9946
https://github.com/root-project/root/pull/9946:111,safety,Prevent,Prevents,111,Prevents doxygen from parsing non-C++-standard keywords [skip-ci]; # This Pull request:. ## Changes or fixes:. Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings. This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9946
https://github.com/root-project/root/pull/9946:171,safety,avoid,avoids,171,Prevents doxygen from parsing non-C++-standard keywords [skip-ci]; # This Pull request:. ## Changes or fixes:. Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings. This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9946
https://github.com/root-project/root/pull/9946:364,safety,test,tested,364,Prevents doxygen from parsing non-C++-standard keywords [skip-ci]; # This Pull request:. ## Changes or fixes:. Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings. This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9946
https://github.com/root-project/root/pull/9946:394,safety,updat,updated,394,Prevents doxygen from parsing non-C++-standard keywords [skip-ci]; # This Pull request:. ## Changes or fixes:. Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings. This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9946
https://github.com/root-project/root/pull/9946:0,security,Preven,Prevents,0,Prevents doxygen from parsing non-C++-standard keywords [skip-ci]; # This Pull request:. ## Changes or fixes:. Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings. This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9946
https://github.com/root-project/root/pull/9946:111,security,Preven,Prevents,111,Prevents doxygen from parsing non-C++-standard keywords [skip-ci]; # This Pull request:. ## Changes or fixes:. Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings. This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9946
https://github.com/root-project/root/pull/9946:394,security,updat,updated,394,Prevents doxygen from parsing non-C++-standard keywords [skip-ci]; # This Pull request:. ## Changes or fixes:. Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings. This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9946
https://github.com/root-project/root/pull/9946:288,testability,concern,concerning,288,Prevents doxygen from parsing non-C++-standard keywords [skip-ci]; # This Pull request:. ## Changes or fixes:. Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings. This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9946
https://github.com/root-project/root/pull/9946:364,testability,test,tested,364,Prevents doxygen from parsing non-C++-standard keywords [skip-ci]; # This Pull request:. ## Changes or fixes:. Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings. This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9946
https://github.com/root-project/root/pull/9949:403,deployability,Updat,Update,403,"[cling] Fix value printing of expressions with `auto` type (ROOT-9687); This pull request fixes value printing of an expression of type `AutoType`, which ended up in calling the general fallback `printValue(const void *)`. To call the appropriate overload, the deduced type should be used instead. ## Changes or fixes:. - Value printing of expressions of type `AutoType` use the deduced type instead. - Update CREDITS.txt file. ## Checklist:. - [X] tested changes locally. This PR fixes [ROOT-9687](https://sft.its.cern.ch/jira/browse/ROOT-9687).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9949
https://github.com/root-project/root/pull/9949:403,safety,Updat,Update,403,"[cling] Fix value printing of expressions with `auto` type (ROOT-9687); This pull request fixes value printing of an expression of type `AutoType`, which ended up in calling the general fallback `printValue(const void *)`. To call the appropriate overload, the deduced type should be used instead. ## Changes or fixes:. - Value printing of expressions of type `AutoType` use the deduced type instead. - Update CREDITS.txt file. ## Checklist:. - [X] tested changes locally. This PR fixes [ROOT-9687](https://sft.its.cern.ch/jira/browse/ROOT-9687).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9949
https://github.com/root-project/root/pull/9949:449,safety,test,tested,449,"[cling] Fix value printing of expressions with `auto` type (ROOT-9687); This pull request fixes value printing of an expression of type `AutoType`, which ended up in calling the general fallback `printValue(const void *)`. To call the appropriate overload, the deduced type should be used instead. ## Changes or fixes:. - Value printing of expressions of type `AutoType` use the deduced type instead. - Update CREDITS.txt file. ## Checklist:. - [X] tested changes locally. This PR fixes [ROOT-9687](https://sft.its.cern.ch/jira/browse/ROOT-9687).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9949
https://github.com/root-project/root/pull/9949:403,security,Updat,Update,403,"[cling] Fix value printing of expressions with `auto` type (ROOT-9687); This pull request fixes value printing of an expression of type `AutoType`, which ended up in calling the general fallback `printValue(const void *)`. To call the appropriate overload, the deduced type should be used instead. ## Changes or fixes:. - Value printing of expressions of type `AutoType` use the deduced type instead. - Update CREDITS.txt file. ## Checklist:. - [X] tested changes locally. This PR fixes [ROOT-9687](https://sft.its.cern.ch/jira/browse/ROOT-9687).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9949
https://github.com/root-project/root/pull/9949:449,testability,test,tested,449,"[cling] Fix value printing of expressions with `auto` type (ROOT-9687); This pull request fixes value printing of an expression of type `AutoType`, which ended up in calling the general fallback `printValue(const void *)`. To call the appropriate overload, the deduced type should be used instead. ## Changes or fixes:. - Value printing of expressions of type `AutoType` use the deduced type instead. - Update CREDITS.txt file. ## Checklist:. - [X] tested changes locally. This PR fixes [ROOT-9687](https://sft.its.cern.ch/jira/browse/ROOT-9687).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9949
https://github.com/root-project/root/pull/9950:223,deployability,updat,updated,223,[DF] Add shorthand aliases of RVec in Numba.Declare. Apply #9898.; Allowed `RVec` shorthand aliases in Numba.Declare. Aliases are applied in `tutorials/pyroot/pyroot004_NumbaDeclare.py`. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #9898.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9950
https://github.com/root-project/root/pull/9950:193,safety,test,tested,193,[DF] Add shorthand aliases of RVec in Numba.Declare. Apply #9898.; Allowed `RVec` shorthand aliases in Numba.Declare. Aliases are applied in `tutorials/pyroot/pyroot004_NumbaDeclare.py`. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #9898.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9950
https://github.com/root-project/root/pull/9950:223,safety,updat,updated,223,[DF] Add shorthand aliases of RVec in Numba.Declare. Apply #9898.; Allowed `RVec` shorthand aliases in Numba.Declare. Aliases are applied in `tutorials/pyroot/pyroot004_NumbaDeclare.py`. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #9898.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9950
https://github.com/root-project/root/pull/9950:223,security,updat,updated,223,[DF] Add shorthand aliases of RVec in Numba.Declare. Apply #9898.; Allowed `RVec` shorthand aliases in Numba.Declare. Aliases are applied in `tutorials/pyroot/pyroot004_NumbaDeclare.py`. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #9898.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9950
https://github.com/root-project/root/pull/9950:193,testability,test,tested,193,[DF] Add shorthand aliases of RVec in Numba.Declare. Apply #9898.; Allowed `RVec` shorthand aliases in Numba.Declare. Aliases are applied in `tutorials/pyroot/pyroot004_NumbaDeclare.py`. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #9898.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9950
https://github.com/root-project/root/issues/9952:112,deployability,version,version,112,"Geant4 segmentation violation break; ```. *************************************************************. Geant4 version Name: geant4-10-03-patch-03 [MT] (20-October-2017). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:139,deployability,patch,patch-,139,"Geant4 segmentation violation break; ```. *************************************************************. Geant4 version Name: geant4-10-03-patch-03 [MT] (20-October-2017). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:643,deployability,stack,stack,643,"Geant4 segmentation violation break; ```. *************************************************************. Geant4 version Name: geant4-10-03-patch-03 [MT] (20-October-2017). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:1164,deployability,Stack,StackTrace,1164,"). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitializ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:1517,deployability,Build,BuildAbsorptionLengthVector,1517,"n violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:1628,deployability,instal,install,1628,"the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:1789,deployability,instal,install,1789,"stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:1868,deployability,Updat,UpdateCoupleTable,1868,"nux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:1949,deployability,instal,install,1949,"at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:2092,deployability,instal,install,2092,"ot/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLeng",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:2220,deployability,instal,install,2220,".12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:2358,deployability,instal,install,2358,"nViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:2481,deployability,instal,install,2481,"61bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:2862,deployability,stack,stack,2862,"e::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char con",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:3077,deployability,Build,BuildAbsorptionLengthVector,3077,"-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:3188,deployability,instal,install,3188,"libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:3349,deployability,instal,install,3349,"libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:3428,deployability,Updat,UpdateCoupleTable,3428,"libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:3509,deployability,instal,install,3509,"libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:3652,deployability,instal,install,3652,"libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:3780,deployability,instal,install,3780,"libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:3918,deployability,instal,install,3918,"libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:4041,deployability,instal,install,4041,"libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:937,energy efficiency,optim,optimized,937,"Geant4 segmentation violation break; ```. *************************************************************. Geant4 version Name: geant4-10-03-patch-03 [MT] (20-October-2017). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:1041,energy efficiency,optim,optimized,1041,"*********************************************************. Geant4 version Name: geant4-10-03-patch-03 [MT] (20-October-2017). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(boo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:1112,energy efficiency,core,core,1112,"rsion Name: geant4-10-03-patch-03 [MT] (20-October-2017). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:1231,energy efficiency,core,core,1231,"on. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:1408,energy efficiency,core,core,1408," Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:112,integrability,version,version,112,"Geant4 segmentation violation break; ```. *************************************************************. Geant4 version Name: geant4-10-03-patch-03 [MT] (20-October-2017). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:2793,integrability,sub,submit,2793,"/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:112,modifiability,version,version,112,"Geant4 segmentation violation break; ```. *************************************************************. Geant4 version Name: geant4-10-03-patch-03 [MT] (20-October-2017). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:178,performance,Multi-thread,Multi-threaded,178,"Geant4 segmentation violation break; ```. *************************************************************. Geant4 version Name: geant4-10-03-patch-03 [MT] (20-October-2017). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:937,performance,optimiz,optimized,937,"Geant4 segmentation violation break; ```. *************************************************************. Geant4 version Name: geant4-10-03-patch-03 [MT] (20-October-2017). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:1041,performance,optimiz,optimized,1041,"*********************************************************. Geant4 version Name: geant4-10-03-patch-03 [MT] (20-October-2017). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(boo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:139,safety,patch,patch-,139,"Geant4 segmentation violation break; ```. *************************************************************. Geant4 version Name: geant4-10-03-patch-03 [MT] (20-October-2017). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:1868,safety,Updat,UpdateCoupleTable,1868,"nux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:3428,safety,Updat,UpdateCoupleTable,3428,"libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:139,security,patch,patch-,139,"Geant4 segmentation violation break; ```. *************************************************************. Geant4 version Name: geant4-10-03-patch-03 [MT] (20-October-2017). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:1448,security,sign,signal,1448,"... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:1868,security,Updat,UpdateCoupleTable,1868,"nux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:3428,security,Updat,UpdateCoupleTable,3428,"libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:649,testability,trace,trace,649,"Geant4 segmentation violation break; ```. *************************************************************. Geant4 version Name: geant4-10-03-patch-03 [MT] (20-October-2017). << in Multi-threaded mode >> . Copyright : Geant4 Collaboration. Reference : NIM A 506 (2003), 250-303. WWW : http://cern.ch/geant4. *************************************************************. Checking overlaps for volume NaI ... OK! . Checking overlaps for volume collimator ... OK! . Checking overlaps for volume glass ... OK! . *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f075f899687 in __GI___waitpid (pid=2927, stat_loc=stat_loc. entry=0x7ffd2902c628, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30. #1 0x00007f075f804067 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149. #2 0x00007f0765354577 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2118. #3 TUnixSystem::StackTrace (this=0x55935a0857c0) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:2412. #4 0x00007f0765356c9c in TUnixSystem::DispatchSignals (this=0x55935a0857c0, sig=kSigSegmentationViolation) at /home/yasmin/root/root-6.12.06/core/unix/src/TUnixSystem.cxx:3643. #5 <signal handler called>. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:2868,testability,trace,trace,2868,"ateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:2624,usability,hint,hint,2624,"3-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:2668,usability,help,help,2668,"0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9952:2944,usability,help,help,2944,"03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12 0x00007f0763b921fb in G4MTRunManager::Initialize() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #13 0x0000559358750187 in main (). ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum http://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #6 0x00007f0761bb4118 in G4RToEConvForGamma::BuildAbsorptionLengthVector(G4Material const*, G4PhysicsLogVector*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #7 0x00007f0761bb6c3f in G4VRangeToEnergyConverter::Convert(double, G4Material const*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #8 0x00007f0761bb0bee in G4ProductionCutsTable::UpdateCoupleTable(G4VPhysicalVolume*) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4processes.so. #9 0x00007f0763b9c5e2 in G4RunManagerKernel::RunInitialization(bool) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #10 0x00007f0763b8b3f7 in G4RunManager::RunInitialization() () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #11 0x00007f0763b852c6 in G4RunManager::BeamOn(int, char const*, int) () from /home/yasmin/CERN/geant4.10.03.p03-install/lib/libG4run.so. #12",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9952
https://github.com/root-project/root/issues/9953:144,availability,error,errors,144,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:248,availability,down,down,248,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:341,availability,error,errors,341,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:0,deployability,Automat,Automated,0,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:208,deployability,manag,manageable,208,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:559,deployability,automat,automation,559,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:857,deployability,build,building,857,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:1433,deployability,build,build,1433,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:2089,deployability,updat,update,2089,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:2148,deployability,pipelin,pipelines,2148,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:2184,deployability,log,log,2184,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:135,energy efficiency,reduc,reducing,135,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:208,energy efficiency,manag,manageable,208,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:264,energy efficiency,current,currently,264,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:445,energy efficiency,sustainab,sustainable,445,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:758,integrability,configur,configured,758,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:2148,integrability,pipelin,pipelines,2148,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:722,interoperability,format,format,722,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:988,interoperability,share,share,988,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:431,modifiability,maintain,maintain,431,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:758,modifiability,configur,configured,758,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:1195,modifiability,exten,extended,1195,"0k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:144,performance,error,errors,144,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:341,performance,error,errors,341,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:837,performance,time,time,837,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:2193,performance,tune,tune,2193,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:1353,reliability,doe,does,1353,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:24,safety,test,test,24,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:144,safety,error,errors,144,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:208,safety,manag,manageable,208,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:287,safety,safe,safeguard,287,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:300,safety,prevent,prevent,300,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:341,safety,error,errors,341,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:431,safety,maintain,maintain,431,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:786,safety,input,input,786,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:1482,safety,INPUT,INPUT,1482,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:1707,safety,Test,Test,1707,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:1980,safety,avoid,avoid,1980,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:2089,safety,updat,update,2089,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:2096,safety,test,test,2096,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:2184,safety,log,log,2184,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:300,security,preven,prevent,300,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:629,security,modif,modified,629,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:758,security,configur,configured,758,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:1064,security,modif,modify,1064," like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:2089,security,updat,update,2089,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:2184,security,log,log,2184,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:0,testability,Automat,Automated,0,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:24,testability,test,test,24,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:559,testability,automat,automation,559,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:1707,testability,Test,Test,1707,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:1827,testability,hook,hook,1827,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:2096,testability,test,test,2096,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:2184,testability,log,log,2184,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:2214,testability,context,context,2214,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:10,usability,document,documentation,10,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:144,usability,error,errors,144,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:166,usability,document,documentation,166,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:341,usability,error,errors,341,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:472,usability,statu,status,472,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:497,usability,guid,guide,497,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:514,usability,document,documentation,514,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:541,usability,help,helpful,541,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:595,usability,document,documentation,595,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:786,usability,input,input,786,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:876,usability,document,documentation,876,"Automated documentation test for new PR; ### Explain what you would like to see improved. I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing refere",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9953:1482,usability,INPUT,INPUT,1482,"ntly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved. - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request. - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR). - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes. - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted. - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell. - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test. - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context. See https://root.cern/for_developers/doxygen/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9953
https://github.com/root-project/root/issues/9954:2216,availability,echo,echo,2216,"at.github.io/) native support on GitHub). As RooFit is also effectively absorbed into ROOT (I hope this is safe to say given the [development history on the `rootfit` module in ROOT](https://github.com/root-project/root/tree/master/roofit) and that the [RooFit development GitHub org](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanently disabled by passing the compile flag `-D__ROOFIT_NOBANNER` **to RooFit** at compile time](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4) and if building ROOT with CMake you can [pass this flag to RooFit through the `CMAKE_CXX_FLAGS` option](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). Disabling the RooFit banner with. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. as a default and finding a more constructive and useful form of attribution to the RooFit developers seems like a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4741,availability,Operat,Operating,4741,"nk ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-forum.cern.ch/t/roofit-banner-can-we-switch-it-off-somehow/13574). * [ROOT Forum: `__ROOFIT_NOBANNER=ON` CMake option seems to have no effect](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/63. * https://github.com/conda-forge/root-feedstock/issues/160",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4816,availability,down,download,4816,"nk ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-forum.cern.ch/t/roofit-banner-can-we-switch-it-off-somehow/13574). * [ROOT Forum: `__ROOFIT_NOBANNER=ON` CMake option seems to have no effect](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/63. * https://github.com/conda-forge/root-feedstock/issues/160",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:1385,deployability,modul,module,1385,"6-L31. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. when RooFit was being developed in the early 2000s this might have been about the only way to get open source software recognized and (hopefully!) cited (I was not involved with scientific open source then, so someone who was should feel free to correct me if I have the history wrong). However, in the time since there has been significant improvements in the citation and scholarship of open source software (e.g., some key points being the existence of [JOSS](https://joss.theoj.org/) and [`CITATION.cff`](https://citation-file-format.github.io/) native support on GitHub). As RooFit is also effectively absorbed into ROOT (I hope this is safe to say given the [development history on the `rootfit` module in ROOT](https://github.com/root-project/root/tree/master/roofit) and that the [RooFit development GitHub org](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanently disabled by passing the compile flag `-D__ROOFIT_NOBANNER`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:2496,deployability,build,building,2496,"g](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanently disabled by passing the compile flag `-D__ROOFIT_NOBANNER` **to RooFit** at compile time](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4) and if building ROOT with CMake you can [pass this flag to RooFit through the `CMAKE_CXX_FLAGS` option](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). Disabling the RooFit banner with. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. as a default and finding a more constructive and useful form of attribution to the RooFit developers seems like a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:2909,deployability,continu,continuing,2909,"o` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanently disabled by passing the compile flag `-D__ROOFIT_NOBANNER` **to RooFit** at compile time](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4) and if building ROOT with CMake you can [pass this flag to RooFit through the `CMAKE_CXX_FLAGS` option](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). Disabling the RooFit banner with. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. as a default and finding a more constructive and useful form of attribution to the RooFit developers seems like a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit developmen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:3018,deployability,version,versions,3018,"y Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanently disabled by passing the compile flag `-D__ROOFIT_NOBANNER` **to RooFit** at compile time](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4) and if building ROOT with CMake you can [pass this flag to RooFit through the `CMAKE_CXX_FLAGS` option](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). Disabling the RooFit banner with. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. as a default and finding a more constructive and useful form of attribution to the RooFit developers seems like a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:3227,deployability,build,build,3227,"anner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanently disabled by passing the compile flag `-D__ROOFIT_NOBANNER` **to RooFit** at compile time](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4) and if building ROOT with CMake you can [pass this flag to RooFit through the `CMAKE_CXX_FLAGS` option](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). Disabling the RooFit banner with. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. as a default and finding a more constructive and useful form of attribution to the RooFit developers seems like a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:3536,deployability,updat,update,3536," flag to RooFit through the `CMAKE_CXX_FLAGS` option](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). Disabling the RooFit banner with. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. as a default and finding a more constructive and useful form of attribution to the RooFit developers seems like a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirk",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4279,deployability,build,build,4279,"R. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT For",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4729,deployability,version,version,4729,"nk ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-forum.cern.ch/t/roofit-banner-can-we-switch-it-off-somehow/13574). * [ROOT Forum: `__ROOFIT_NOBANNER=ON` CMake option seems to have no effect](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/63. * https://github.com/conda-forge/root-feedstock/issues/160",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4798,deployability,instal,install,4798,"nk ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-forum.cern.ch/t/roofit-banner-can-we-switch-it-off-somehow/13574). * [ROOT Forum: `__ROOFIT_NOBANNER=ON` CMake option seems to have no effect](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/63. * https://github.com/conda-forge/root-feedstock/issues/160",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4955,deployability,version,version,4955,"nk ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-forum.cern.ch/t/roofit-banner-can-we-switch-it-off-somehow/13574). * [ROOT Forum: `__ROOFIT_NOBANNER=ON` CMake option seems to have no effect](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/63. * https://github.com/conda-forge/root-feedstock/issues/160",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4969,deployability,Version,Version,4969,"nk ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-forum.cern.ch/t/roofit-banner-can-we-switch-it-off-somehow/13574). * [ROOT Forum: `__ROOFIT_NOBANNER=ON` CMake option seems to have no effect](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/63. * https://github.com/conda-forge/root-feedstock/issues/160",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:3018,integrability,version,versions,3018,"y Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanently disabled by passing the compile flag `-D__ROOFIT_NOBANNER` **to RooFit** at compile time](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4) and if building ROOT with CMake you can [pass this flag to RooFit through the `CMAKE_CXX_FLAGS` option](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). Disabling the RooFit banner with. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. as a default and finding a more constructive and useful form of attribution to the RooFit developers seems like a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:3876,integrability,pub,public,3876,"e a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've sh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4729,integrability,version,version,4729,"nk ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-forum.cern.ch/t/roofit-banner-can-we-switch-it-off-somehow/13574). * [ROOT Forum: `__ROOFIT_NOBANNER=ON` CMake option seems to have no effect](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/63. * https://github.com/conda-forge/root-feedstock/issues/160",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4955,integrability,version,version,4955,"nk ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-forum.cern.ch/t/roofit-banner-can-we-switch-it-off-somehow/13574). * [ROOT Forum: `__ROOFIT_NOBANNER=ON` CMake option seems to have no effect](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/63. * https://github.com/conda-forge/root-feedstock/issues/160",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4969,integrability,Version,Version,4969,"nk ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-forum.cern.ch/t/roofit-banner-can-we-switch-it-off-somehow/13574). * [ROOT Forum: `__ROOFIT_NOBANNER=ON` CMake option seems to have no effect](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/63. * https://github.com/conda-forge/root-feedstock/issues/160",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:1214,interoperability,format,format,1214,"e is run it will print a copyright ""banner"". https://github.com/root-project/root/blob/87a998d48803bc207288d90038e60ff148827664/roofit/roofitcore/src/Initialisation.cxx#L16-L31. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. when RooFit was being developed in the early 2000s this might have been about the only way to get open source software recognized and (hopefully!) cited (I was not involved with scientific open source then, so someone who was should feel free to correct me if I have the history wrong). However, in the time since there has been significant improvements in the citation and scholarship of open source software (e.g., some key points being the existence of [JOSS](https://joss.theoj.org/) and [`CITATION.cff`](https://citation-file-format.github.io/) native support on GitHub). As RooFit is also effectively absorbed into ROOT (I hope this is safe to say given the [development history on the `rootfit` module in ROOT](https://github.com/root-project/root/tree/master/roofit) and that the [RooFit development GitHub org](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:3097,interoperability,share,share,3097," of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanently disabled by passing the compile flag `-D__ROOFIT_NOBANNER` **to RooFit** at compile time](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4) and if building ROOT with CMake you can [pass this flag to RooFit through the `CMAKE_CXX_FLAGS` option](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). Disabling the RooFit banner with. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. as a default and finding a more constructive and useful form of attribution to the RooFit developers seems like a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the beha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:3678,interoperability,format,format,3678,"28). Disabling the RooFit banner with. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. as a default and finding a more constructive and useful form of attribution to the RooFit developers seems like a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:1385,modifiability,modul,module,1385,"6-L31. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. when RooFit was being developed in the early 2000s this might have been about the only way to get open source software recognized and (hopefully!) cited (I was not involved with scientific open source then, so someone who was should feel free to correct me if I have the history wrong). However, in the time since there has been significant improvements in the citation and scholarship of open source software (e.g., some key points being the existence of [JOSS](https://joss.theoj.org/) and [`CITATION.cff`](https://citation-file-format.github.io/) native support on GitHub). As RooFit is also effectively absorbed into ROOT (I hope this is safe to say given the [development history on the `rootfit` module in ROOT](https://github.com/root-project/root/tree/master/roofit) and that the [RooFit development GitHub org](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanently disabled by passing the compile flag `-D__ROOFIT_NOBANNER`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:3018,modifiability,version,versions,3018,"y Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanently disabled by passing the compile flag `-D__ROOFIT_NOBANNER` **to RooFit** at compile time](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4) and if building ROOT with CMake you can [pass this flag to RooFit through the `CMAKE_CXX_FLAGS` option](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). Disabling the RooFit banner with. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. as a default and finding a more constructive and useful form of attribution to the RooFit developers seems like a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4729,modifiability,version,version,4729,"nk ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-forum.cern.ch/t/roofit-banner-can-we-switch-it-off-somehow/13574). * [ROOT Forum: `__ROOFIT_NOBANNER=ON` CMake option seems to have no effect](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/63. * https://github.com/conda-forge/root-feedstock/issues/160",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4955,modifiability,version,version,4955,"nk ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-forum.cern.ch/t/roofit-banner-can-we-switch-it-off-somehow/13574). * [ROOT Forum: `__ROOFIT_NOBANNER=ON` CMake option seems to have no effect](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/63. * https://github.com/conda-forge/root-feedstock/issues/160",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4969,modifiability,Version,Version,4969,"nk ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-forum.cern.ch/t/roofit-banner-can-we-switch-it-off-somehow/13574). * [ROOT Forum: `__ROOFIT_NOBANNER=ON` CMake option seems to have no effect](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/63. * https://github.com/conda-forge/root-feedstock/issues/160",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:986,performance,time,time,986,"[RF] Disable `RooFit` banner with `CMAKE_CXX_FLAGS` option `__ROOFIT_NOBANNER` by default; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. When RooFit code is run it will print a copyright ""banner"". https://github.com/root-project/root/blob/87a998d48803bc207288d90038e60ff148827664/roofit/roofitcore/src/Initialisation.cxx#L16-L31. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. when RooFit was being developed in the early 2000s this might have been about the only way to get open source software recognized and (hopefully!) cited (I was not involved with scientific open source then, so someone who was should feel free to correct me if I have the history wrong). However, in the time since there has been significant improvements in the citation and scholarship of open source software (e.g., some key points being the existence of [JOSS](https://joss.theoj.org/) and [`CITATION.cff`](https://citation-file-format.github.io/) native support on GitHub). As RooFit is also effectively absorbed into ROOT (I hope this is safe to say given the [development history on the `rootfit` module in ROOT](https://github.com/root-project/root/tree/master/roofit) and that the [RooFit development GitHub org](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:2414,performance,time,time,2414,"com/root-project/root/tree/master/roofit) and that the [RooFit development GitHub org](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanently disabled by passing the compile flag `-D__ROOFIT_NOBANNER` **to RooFit** at compile time](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4) and if building ROOT with CMake you can [pass this flag to RooFit through the `CMAKE_CXX_FLAGS` option](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). Disabling the RooFit banner with. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. as a default and finding a more constructive and useful form of attribution to the RooFit developers seems like a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:1534,reliability,doe,does,1534,"2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. when RooFit was being developed in the early 2000s this might have been about the only way to get open source software recognized and (hopefully!) cited (I was not involved with scientific open source then, so someone who was should feel free to correct me if I have the history wrong). However, in the time since there has been significant improvements in the citation and scholarship of open source software (e.g., some key points being the existence of [JOSS](https://joss.theoj.org/) and [`CITATION.cff`](https://citation-file-format.github.io/) native support on GitHub). As RooFit is also effectively absorbed into ROOT (I hope this is safe to say given the [development history on the `rootfit` module in ROOT](https://github.com/root-project/root/tree/master/roofit) and that the [RooFit development GitHub org](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanently disabled by passing the compile flag `-D__ROOFIT_NOBANNER` **to RooFit** at compile time](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4) and if building ROOT with CMake you can [pass t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:3774,reliability,doe,doesn,3774,"ault and finding a more constructive and useful form of attribution to the RooFit developers seems like a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtaine",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:1325,safety,safe,safe,1325,"038e60ff148827664/roofit/roofitcore/src/Initialisation.cxx#L16-L31. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. when RooFit was being developed in the early 2000s this might have been about the only way to get open source software recognized and (hopefully!) cited (I was not involved with scientific open source then, so someone who was should feel free to correct me if I have the history wrong). However, in the time since there has been significant improvements in the citation and scholarship of open source software (e.g., some key points being the existence of [JOSS](https://joss.theoj.org/) and [`CITATION.cff`](https://citation-file-format.github.io/) native support on GitHub). As RooFit is also effectively absorbed into ROOT (I hope this is safe to say given the [development history on the `rootfit` module in ROOT](https://github.com/root-project/root/tree/master/roofit) and that the [RooFit development GitHub org](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanent",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:1385,safety,modul,module,1385,"6-L31. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. when RooFit was being developed in the early 2000s this might have been about the only way to get open source software recognized and (hopefully!) cited (I was not involved with scientific open source then, so someone who was should feel free to correct me if I have the history wrong). However, in the time since there has been significant improvements in the citation and scholarship of open source software (e.g., some key points being the existence of [JOSS](https://joss.theoj.org/) and [`CITATION.cff`](https://citation-file-format.github.io/) native support on GitHub). As RooFit is also effectively absorbed into ROOT (I hope this is safe to say given the [development history on the `rootfit` module in ROOT](https://github.com/root-project/root/tree/master/roofit) and that the [RooFit development GitHub org](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanently disabled by passing the compile flag `-D__ROOFIT_NOBANNER`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:3536,safety,updat,update,3536," flag to RooFit through the `CMAKE_CXX_FLAGS` option](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). Disabling the RooFit banner with. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. as a default and finding a more constructive and useful form of attribution to the RooFit developers seems like a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirk",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4241,safety,input,input,4241,". -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:1012,security,sign,significant,1012,"it` banner with `CMAKE_CXX_FLAGS` option `__ROOFIT_NOBANNER` by default; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. When RooFit code is run it will print a copyright ""banner"". https://github.com/root-project/root/blob/87a998d48803bc207288d90038e60ff148827664/roofit/roofitcore/src/Initialisation.cxx#L16-L31. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. when RooFit was being developed in the early 2000s this might have been about the only way to get open source software recognized and (hopefully!) cited (I was not involved with scientific open source then, so someone who was should feel free to correct me if I have the history wrong). However, in the time since there has been significant improvements in the citation and scholarship of open source software (e.g., some key points being the existence of [JOSS](https://joss.theoj.org/) and [`CITATION.cff`](https://citation-file-format.github.io/) native support on GitHub). As RooFit is also effectively absorbed into ROOT (I hope this is safe to say given the [development history on the `rootfit` module in ROOT](https://github.com/root-project/root/tree/master/roofit) and that the [RooFit development GitHub org](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Develop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:3536,security,updat,update,3536," flag to RooFit through the `CMAKE_CXX_FLAGS` option](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). Disabling the RooFit banner with. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. as a default and finding a more constructive and useful form of attribution to the RooFit developers seems like a much better solution then continuing to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirk",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:3916,security,team,team,3916,"g to keep it around as a default. (Altering the `.rootrc` seems like a nice way to deal with legacy versions of ROOT, but is not a good reason to keep the banner.). ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` bui",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4347,testability,simpl,simply,4347,"by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-foru",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:5086,testability,context,context,5086,"nk ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-forum.cern.ch/t/roofit-banner-can-we-switch-it-off-somehow/13574). * [ROOT Forum: `__ROOFIT_NOBANNER=ON` CMake option seems to have no effect](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/63. * https://github.com/conda-forge/root-feedstock/issues/160",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:5115,testability,context,context,5115,"nk ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-forum.cern.ch/t/roofit-banner-can-we-switch-it-off-somehow/13574). * [ROOT Forum: `__ROOFIT_NOBANNER=ON` CMake option seems to have no effect](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/63. * https://github.com/conda-forge/root-feedstock/issues/160",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:1240,usability,support,support,1240,"pyright ""banner"". https://github.com/root-project/root/blob/87a998d48803bc207288d90038e60ff148827664/roofit/roofitcore/src/Initialisation.cxx#L16-L31. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. when RooFit was being developed in the early 2000s this might have been about the only way to get open source software recognized and (hopefully!) cited (I was not involved with scientific open source then, so someone who was should feel free to correct me if I have the history wrong). However, in the time since there has been significant improvements in the citation and scholarship of open source software (e.g., some key points being the existence of [JOSS](https://joss.theoj.org/) and [`CITATION.cff`](https://citation-file-format.github.io/) native support on GitHub). As RooFit is also effectively absorbed into ROOT (I hope this is safe to say given the [development history on the `rootfit` module in ROOT](https://github.com/root-project/root/tree/master/roofit) and that the [RooFit development GitHub org](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:1278,usability,effectiv,effectively,1278,"t-project/root/blob/87a998d48803bc207288d90038e60ff148827664/roofit/roofitcore/src/Initialisation.cxx#L16-L31. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. when RooFit was being developed in the early 2000s this might have been about the only way to get open source software recognized and (hopefully!) cited (I was not involved with scientific open source then, so someone who was should feel free to correct me if I have the history wrong). However, in the time since there has been significant improvements in the citation and scholarship of open source software (e.g., some key points being the existence of [JOSS](https://joss.theoj.org/) and [`CITATION.cff`](https://citation-file-format.github.io/) native support on GitHub). As RooFit is also effectively absorbed into ROOT (I hope this is safe to say given the [development history on the `rootfit` module in ROOT](https://github.com/root-project/root/tree/master/roofit) and that the [RooFit development GitHub org](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:1749,usability,user,users,1749,"en about the only way to get open source software recognized and (hopefully!) cited (I was not involved with scientific open source then, so someone who was should feel free to correct me if I have the history wrong). However, in the time since there has been significant improvements in the citation and scholarship of open source software (e.g., some key points being the existence of [JOSS](https://joss.theoj.org/) and [`CITATION.cff`](https://citation-file-format.github.io/) native support on GitHub). As RooFit is also effectively absorbed into ROOT (I hope this is safe to say given the [development history on the `rootfit` module in ROOT](https://github.com/root-project/root/tree/master/roofit) and that the [RooFit development GitHub org](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc. $ python -c 'from ROOT import RooFit' # No banner now. ```. or [permanently disabled by passing the compile flag `-D__ROOFIT_NOBANNER` **to RooFit** at compile time](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4) and if building ROOT with CMake you can [pass this flag to RooFit through the `CMAKE_CXX_FLAGS` option](https://root-forum.cern.ch/t/roofit-nobanner-on-cmake-option-seems-to-have-no-effect/48828). Disabling the RooFit banner with. ```. -DCMAKE_CXX_FLAGS=-D__ROOFI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4096,usability,behavi,behavior,4096,"re how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make the CMake build option. ```. -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4241,usability,input,input,4241,". -DCMAKE_CXX_FLAGS=-D__ROOFIT_NOBANNER. ```. the default to disable the RooFit banner from being enabled by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/issues/9954:4347,usability,simpl,simply,4347,"by default. In addition to disabling the banner, there should be some additional action to preserve the copyright and attribution to Wouter and David in a more useful manner, as well as update it to reflect the huge amount of work that has happened since 2013 (here I would suggest a [`CITATION.cff` file](https://citation-file-format.github.io/). I also think ROOT should get one too, but that's another Issue.). As Wouter doesn't appear to have a GitHub account (**edit**: I'm wrong, he's @wverkerke), I'll tag @egpbos as a public member of the RooFit development team (apologies if I should have tagged someone else) as well as @dkirkby to see if they have any particular thoughts on the matter. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. To trigger the RooFit banner simply run any piece of code that uses any part of RooFit. Example:. ```console. $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby. Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. For the examples I've shown above are using ROOT `v6.24/06` built from source. ```console. $ root --version. ROOT Version: 6.24/06. Built for linuxx8664gcc on Feb 18 2022, 00:26:00. From tags/v6-24-06@v6-24-06. ```. ### Additional context. <!--. Add any other context about the problem here. -->. * [ROOT Forum: How to switch off RooFit banner?](https://root-forum.cern.ch/t/how-to-switch-off-roofit-banner/6357/4). * [ROOT Forum: RooFit Banner - can we switch it off somehow?](https://root-foru",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9954
https://github.com/root-project/root/pull/9955:203,deployability,updat,updated,203,[doxy] add some more folders to include path; # This Pull request:. ## Changes or fixes:. Prevents many doxygen warnings regarding 'Streamer' function. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9955
https://github.com/root-project/root/pull/9955:90,safety,Prevent,Prevents,90,[doxy] add some more folders to include path; # This Pull request:. ## Changes or fixes:. Prevents many doxygen warnings regarding 'Streamer' function. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9955
https://github.com/root-project/root/pull/9955:173,safety,test,tested,173,[doxy] add some more folders to include path; # This Pull request:. ## Changes or fixes:. Prevents many doxygen warnings regarding 'Streamer' function. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9955
https://github.com/root-project/root/pull/9955:203,safety,updat,updated,203,[doxy] add some more folders to include path; # This Pull request:. ## Changes or fixes:. Prevents many doxygen warnings regarding 'Streamer' function. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9955
https://github.com/root-project/root/pull/9955:90,security,Preven,Prevents,90,[doxy] add some more folders to include path; # This Pull request:. ## Changes or fixes:. Prevents many doxygen warnings regarding 'Streamer' function. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9955
https://github.com/root-project/root/pull/9955:203,security,updat,updated,203,[doxy] add some more folders to include path; # This Pull request:. ## Changes or fixes:. Prevents many doxygen warnings regarding 'Streamer' function. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9955
https://github.com/root-project/root/pull/9955:173,testability,test,tested,173,[doxy] add some more folders to include path; # This Pull request:. ## Changes or fixes:. Prevents many doxygen warnings regarding 'Streamer' function. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9955
https://github.com/root-project/root/pull/9956:9,deployability,integr,integrals,9,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:113,deployability,integr,integrals,113,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:503,energy efficiency,CPU,CPU,503,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:9,integrability,integr,integrals,9,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:70,integrability,batch,batchmode,70,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:113,integrability,integr,integrals,113,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:268,integrability,inject,injecting,268,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:519,integrability,batch,batch,519,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:9,interoperability,integr,integrals,9,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:113,interoperability,integr,integrals,113,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:9,modifiability,integr,integrals,9,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:113,modifiability,integr,integrals,113,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:70,performance,batch,batchmode,70,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:503,performance,CPU,CPU,503,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:519,performance,batch,batch,519,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:9,reliability,integr,integrals,9,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:113,reliability,integr,integrals,113,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:482,safety,test,tests,482,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:591,safety,test,tests,591,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:9,security,integr,integrals,9,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:113,security,integr,integrals,113,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:228,security,modif,modifying,228,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:268,security,inject,injecting,268,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:382,security,hardcod,hardcoded,382,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:9,testability,integr,integrals,9,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:113,testability,integr,integrals,113,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:477,testability,unit,unit,477,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:482,testability,test,tests,482,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:586,testability,unit,unit,586,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9956:591,testability,test,tests,591,"[RF] Put integrals separately into RooFit computation graph in RooFit batchmode; With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9956
https://github.com/root-project/root/pull/9958:29,deployability,modul,module,29,[DF] Define execute_graph at module level; The execute_graph function logic is currently used both in ActionProxy. and in TransformationProxy when triggering the execution if an instant. action is asked. This commit moves the function at module level so that. both places can use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9958
https://github.com/root-project/root/pull/9958:70,deployability,log,logic,70,[DF] Define execute_graph at module level; The execute_graph function logic is currently used both in ActionProxy. and in TransformationProxy when triggering the execution if an instant. action is asked. This commit moves the function at module level so that. both places can use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9958
https://github.com/root-project/root/pull/9958:238,deployability,modul,module,238,[DF] Define execute_graph at module level; The execute_graph function logic is currently used both in ActionProxy. and in TransformationProxy when triggering the execution if an instant. action is asked. This commit moves the function at module level so that. both places can use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9958
https://github.com/root-project/root/pull/9958:79,energy efficiency,current,currently,79,[DF] Define execute_graph at module level; The execute_graph function logic is currently used both in ActionProxy. and in TransformationProxy when triggering the execution if an instant. action is asked. This commit moves the function at module level so that. both places can use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9958
https://github.com/root-project/root/pull/9958:122,integrability,Transform,TransformationProxy,122,[DF] Define execute_graph at module level; The execute_graph function logic is currently used both in ActionProxy. and in TransformationProxy when triggering the execution if an instant. action is asked. This commit moves the function at module level so that. both places can use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9958
https://github.com/root-project/root/pull/9958:122,interoperability,Transform,TransformationProxy,122,[DF] Define execute_graph at module level; The execute_graph function logic is currently used both in ActionProxy. and in TransformationProxy when triggering the execution if an instant. action is asked. This commit moves the function at module level so that. both places can use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9958
https://github.com/root-project/root/pull/9958:29,modifiability,modul,module,29,[DF] Define execute_graph at module level; The execute_graph function logic is currently used both in ActionProxy. and in TransformationProxy when triggering the execution if an instant. action is asked. This commit moves the function at module level so that. both places can use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9958
https://github.com/root-project/root/pull/9958:238,modifiability,modul,module,238,[DF] Define execute_graph at module level; The execute_graph function logic is currently used both in ActionProxy. and in TransformationProxy when triggering the execution if an instant. action is asked. This commit moves the function at module level so that. both places can use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9958
https://github.com/root-project/root/pull/9958:29,safety,modul,module,29,[DF] Define execute_graph at module level; The execute_graph function logic is currently used both in ActionProxy. and in TransformationProxy when triggering the execution if an instant. action is asked. This commit moves the function at module level so that. both places can use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9958
https://github.com/root-project/root/pull/9958:70,safety,log,logic,70,[DF] Define execute_graph at module level; The execute_graph function logic is currently used both in ActionProxy. and in TransformationProxy when triggering the execution if an instant. action is asked. This commit moves the function at module level so that. both places can use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9958
https://github.com/root-project/root/pull/9958:238,safety,modul,module,238,[DF] Define execute_graph at module level; The execute_graph function logic is currently used both in ActionProxy. and in TransformationProxy when triggering the execution if an instant. action is asked. This commit moves the function at module level so that. both places can use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9958
https://github.com/root-project/root/pull/9958:70,security,log,logic,70,[DF] Define execute_graph at module level; The execute_graph function logic is currently used both in ActionProxy. and in TransformationProxy when triggering the execution if an instant. action is asked. This commit moves the function at module level so that. both places can use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9958
https://github.com/root-project/root/pull/9958:70,testability,log,logic,70,[DF] Define execute_graph at module level; The execute_graph function logic is currently used both in ActionProxy. and in TransformationProxy when triggering the execution if an instant. action is asked. This commit moves the function at module level so that. both places can use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9958
https://github.com/root-project/root/pull/9959:70,availability,error,error,70,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:531,availability,Error,Error,531,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:614,availability,error,error,614,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:558,deployability,build,build,558,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:564,deployability,releas,release,564,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:709,deployability,Fail,Failed,709,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:598,integrability,messag,message,598,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:598,interoperability,messag,message,598,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:70,performance,error,error,70,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:531,performance,Error,Error,531,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:614,performance,error,error,614,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:709,reliability,Fail,Failed,709,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:70,safety,error,error,70,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:166,safety,test,test,166,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:531,safety,Error,Error,531,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:614,safety,error,error,614,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:660,safety,Test,Test,660,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:671,safety,test,test-stressgraphics-interpreted,671,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:53,security,access,access,53,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:626,security,Access,Access,626,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:166,testability,test,test,166,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:660,testability,Test,Test,660,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:671,testability,test,test-stressgraphics-interpreted,671,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:70,usability,error,error,70,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:140,usability,User,Users,140,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:531,usability,Error,Error,531,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:543,usability,User,Users,543,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9959:614,usability,error,error,614,Fix stressgraphics-interpreted on Windows 64; Fix an access violation error when using `fscanf` on Windows 64 bit:. ```. 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx... 243: **********************************************************************. 243: * Starting Graphics - S T R E S S suite *. 243: **********************************************************************. 243: * Starting Basic Graphics - S T R E S S *. 243: **********************************************************************. 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):. 243: error code: Access violation. 243:. 243:. 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9959
https://github.com/root-project/root/pull/9961:35,availability,Operat,Operation,35,"[DF] Subclass AsNumpy and Snapshot Operation tags; Also removing usage of `if operation.name == [""Snapshot"", ""AsNumpy""]`. Leaving out CppWorkflow for now, it will be modified in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9961
https://github.com/root-project/root/pull/9961:78,availability,operat,operation,78,"[DF] Subclass AsNumpy and Snapshot Operation tags; Also removing usage of `if operation.name == [""Snapshot"", ""AsNumpy""]`. Leaving out CppWorkflow for now, it will be modified in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9961
https://github.com/root-project/root/pull/9961:5,integrability,Sub,Subclass,5,"[DF] Subclass AsNumpy and Snapshot Operation tags; Also removing usage of `if operation.name == [""Snapshot"", ""AsNumpy""]`. Leaving out CppWorkflow for now, it will be modified in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9961
https://github.com/root-project/root/pull/9961:166,security,modif,modified,166,"[DF] Subclass AsNumpy and Snapshot Operation tags; Also removing usage of `if operation.name == [""Snapshot"", ""AsNumpy""]`. Leaving out CppWorkflow for now, it will be modified in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9961
https://github.com/root-project/root/pull/9966:563,availability,Monitor,Monitoring,563,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:746,availability,mainten,maintenance,746,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:259,deployability,build,building,259,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:563,deployability,Monitor,Monitoring,563,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:792,deployability,updat,update,792,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:831,deployability,version,version,831,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:899,deployability,version,versions,899,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1042,deployability,automat,automatic,1042,"s Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1227,deployability,build,building,1227,"ot/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1321,deployability,build,build,1321,"-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and Nu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1613,deployability,updat,update,1613,"ynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1705,deployability,Updat,Update,1705," changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x] Upgrade mathjax https://github.com/root-project/root/issues/10067",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1731,deployability,build,build,1731," changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x] Upgrade mathjax https://github.com/root-project/root/issues/10067",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1860,deployability,version,version,1860," changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x] Upgrade mathjax https://github.com/root-project/root/issues/10067",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:2617,deployability,Upgrad,Upgrade,2617," changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x] Upgrade mathjax https://github.com/root-project/root/issues/10067",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:563,energy efficiency,Monitor,Monitoring,563,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:304,integrability,repositor,repository,304,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:831,integrability,version,version,831,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:899,integrability,version,versions,899,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1860,integrability,version,version,1860," changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x] Upgrade mathjax https://github.com/root-project/root/issues/10067",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:2136,integrability,filter,filter,2136," changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x] Upgrade mathjax https://github.com/root-project/root/issues/10067",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:304,interoperability,repositor,repository,304,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:656,interoperability,specif,specifies,656,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:831,modifiability,version,version,831,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:899,modifiability,version,versions,899,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1860,modifiability,version,version,1860," changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x] Upgrade mathjax https://github.com/root-project/root/issues/10067",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:2271,modifiability,variab,variable,2271," changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x] Upgrade mathjax https://github.com/root-project/root/issues/10067",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:2617,modifiability,Upgrad,Upgrade,2617," changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x] Upgrade mathjax https://github.com/root-project/root/issues/10067",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:563,reliability,Monitor,Monitoring,563,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:746,reliability,mainten,maintenance,746,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1304,reliability,doe,does,1304,"pository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1787,reliability,doe,does,1787," changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x] Upgrade mathjax https://github.com/root-project/root/issues/10067",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:330,safety,permiss,permissions,330,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:563,safety,Monitor,Monitoring,563,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:792,safety,updat,update,792,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:851,safety,prevent,prevents,851,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1394,safety,safe,safe,1394,"s. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxy",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1436,safety,input,input,1436," philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assiste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1566,safety,test,tested,1566,"ring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://g",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1613,safety,updat,update,1613,"ynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1705,safety,Updat,Update,1705," changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x] Upgrade mathjax https://github.com/root-project/root/issues/10067",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:2083,safety,prevent,prevent,2083," changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x] Upgrade mathjax https://github.com/root-project/root/issues/10067",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:792,security,updat,update,792,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:851,security,preven,prevents,851,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1613,security,updat,update,1613,"ynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1705,security,Updat,Update,1705," changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x] Upgrade mathjax https://github.com/root-project/root/issues/10067",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:2083,security,preven,prevent,2083," changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://github.com/root-project/root/issues/10066. - [x] Upgrade mathjax https://github.com/root-project/root/issues/10067",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:563,testability,Monitor,Monitoring,563,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1042,testability,automat,automatic,1042,"s Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1566,testability,test,tested,1566,"ring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing. - [ ] Fix strip_from_path in root-tag https://github.com/root-project/root/issues/10059. - [x] Check compress https://g",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:105,usability,statu,status,105,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:121,usability,progress,progress,121,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:272,usability,document,documentation,272,"[docu] Migrate doxygen Makefile to CMake; # This Pull request:. ## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1057,usability,document,documentation,1057,"## Changes or fixes:. This is in a draft status, work in progress... The goals are:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090. - [ ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Im",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1243,usability,document,documentation,1243," ] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listL",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1373,usability,document,documentation,1373,"ithin the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/pull/9966:1436,usability,input,input,1436," philosophy. See https://github.com/root-project/root/issues/8947. - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:. - [ ] https://github.com/root-project/root/issues/9953. - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999. - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process. - [x] Make the doxygen documentation thread-safe. - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally. - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md. - [ ] Update rootspi scripts to build docu in CI accordingly. - [ ] tutorial generation does not work yet as ""out of source"". To-do... - [x] require min doxygen version 1.9.4. - [ ] pre-check that output directory is empty ? - [ ] if GVIZ not found, disable dot. - [ ] Stamp file generation to only recompile when changes. - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source). - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc. - [x] set NUM_PROC_THREADS. - [ ] listLibs pass ROOT_CMD as variable. - [x] check why there are stdout.dat and NumberOfImages not being removed. - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assiste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9966
https://github.com/root-project/root/issues/9967:2543,availability,Operat,Operating,2543,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2618,availability,down,download,2618,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:0,deployability,Updat,Update,0,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:164,deployability,version,version,164,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:229,deployability,releas,releases,229,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:256,deployability,updat,updated,256,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:422,deployability,version,versions,422,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:493,deployability,releas,releases,493,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:515,deployability,releas,released,515,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:608,deployability,version,version,608,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:730,deployability,build,build,730,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:779,deployability,instal,install,779,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:800,deployability,depend,dependence,800,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:839,deployability,instal,install,839,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1483,deployability,updat,updating,1483,"rootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1582,deployability,build,build,1582," enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1640,deployability,build,build,1640,"ly [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it y",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1958,deployability,updat,update,1958,"ect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2031,deployability,releas,releases,2031,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2283,deployability,build,build,2283,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2531,deployability,version,version,2531,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2600,deployability,instal,install,2600,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:148,energy efficiency,current,current,148,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:164,integrability,version,version,164,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:422,integrability,version,versions,422,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:608,integrability,version,version,608,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:800,integrability,depend,dependence,800,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2531,integrability,version,version,2531,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:577,interoperability,bind,bindings,577,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:633,interoperability,specif,specifically,633,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1033,interoperability,bind,bindings,1033,"Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1255,interoperability,specif,specifics,1255,"ted by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1300,interoperability,bind,bindings,1300,"b.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1538,interoperability,bind,bindings,1538,"if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1631,interoperability,bind,bindings,1631,"ecifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you bu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1802,interoperability,share,share,1802,"dence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any ot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2394,interoperability,bind,binding,2394,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:164,modifiability,version,version,164,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:422,modifiability,version,versions,422,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:577,modifiability,bind,bindings,577,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:608,modifiability,version,version,608,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:800,modifiability,depend,dependence,800,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1033,modifiability,bind,bindings,1033,"Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1300,modifiability,bind,bindings,1300,"b.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1538,modifiability,bind,bindings,1538,"if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1631,modifiability,bind,bindings,1631,"ecifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you bu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2394,modifiability,bind,binding,2394,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2531,modifiability,version,version,2531,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:949,reliability,doe,does,949,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:0,safety,Updat,Update,0,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:256,safety,updat,updated,256,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:800,safety,depend,dependence,800,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1483,safety,updat,updating,1483,"rootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1588,safety,safe,safely,1588,"ed with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1958,safety,updat,update,1958,"ect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2245,safety,input,input,2245,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2738,safety,test,tested,2738,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:0,security,Updat,Update,0,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:256,security,updat,updated,256,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1483,security,updat,updating,1483,"rootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1958,security,updat,update,1958,"ect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:800,testability,depend,dependence,800,"Update builtin XRootD to v5.4.1; ### Explain what you would like to see improved. <!--. Explain what isn't as good as it could be and why. -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](ht",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2497,testability,context,context,2497,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2738,testability,test,tested,2738,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2780,testability,context,context,2780,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2809,testability,context,context,2809,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:1780,usability,close,closed,1780,"all path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional con",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2100,usability,behavi,behavior,2100,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/issues/9967:2245,usability,input,input,2245,"thon bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved. <!--. If you already have an idea what we could improve, then please tell us. -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code: build it / `root myMacro.C` / ... -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Not relevant for this issue, but all instances related to the XRootD issues were tested in ROOT `v6.24/06`. ### Additional context. <!--. Add any other context about the problem here. -->. * https://github.com/xrootd/xrootd/issues/1579. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/58. * https://gitlab.cern.ch/atlas-amglab/atlstats/-/merge_requests/64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/9967
https://github.com/root-project/root/pull/9968:639,deployability,updat,updated,639,"Add initializer_list constructor to TVectorT.; Initially, this was to try out the suggestion [in #7151](https://github.com/root-project/root/issues/7151#issuecomment-1047822177), to enable code like. ```c++. TGraph gr({1, 2, 3}, {1, 2, 3});. ```. This doesn't work, unfortunately, because overload resolution cannot disambiguate between the `TVectorF` and `TVectorD` constructors of TGraph. What this enables, however, is this:. ```c++. TVectorD{1., 2., 3.}. ```. or for the TGraph case:. ```c++. TGraph gr(TVectorD{1., 2., 3.}, {1., 2., 3.});. ```. I think it's a nice shortcut to have. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9968
https://github.com/root-project/root/pull/9968:252,reliability,doe,doesn,252,"Add initializer_list constructor to TVectorT.; Initially, this was to try out the suggestion [in #7151](https://github.com/root-project/root/issues/7151#issuecomment-1047822177), to enable code like. ```c++. TGraph gr({1, 2, 3}, {1, 2, 3});. ```. This doesn't work, unfortunately, because overload resolution cannot disambiguate between the `TVectorF` and `TVectorD` constructors of TGraph. What this enables, however, is this:. ```c++. TVectorD{1., 2., 3.}. ```. or for the TGraph case:. ```c++. TGraph gr(TVectorD{1., 2., 3.}, {1., 2., 3.});. ```. I think it's a nice shortcut to have. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9968
https://github.com/root-project/root/pull/9968:609,safety,test,tested,609,"Add initializer_list constructor to TVectorT.; Initially, this was to try out the suggestion [in #7151](https://github.com/root-project/root/issues/7151#issuecomment-1047822177), to enable code like. ```c++. TGraph gr({1, 2, 3}, {1, 2, 3});. ```. This doesn't work, unfortunately, because overload resolution cannot disambiguate between the `TVectorF` and `TVectorD` constructors of TGraph. What this enables, however, is this:. ```c++. TVectorD{1., 2., 3.}. ```. or for the TGraph case:. ```c++. TGraph gr(TVectorD{1., 2., 3.}, {1., 2., 3.});. ```. I think it's a nice shortcut to have. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9968
https://github.com/root-project/root/pull/9968:639,safety,updat,updated,639,"Add initializer_list constructor to TVectorT.; Initially, this was to try out the suggestion [in #7151](https://github.com/root-project/root/issues/7151#issuecomment-1047822177), to enable code like. ```c++. TGraph gr({1, 2, 3}, {1, 2, 3});. ```. This doesn't work, unfortunately, because overload resolution cannot disambiguate between the `TVectorF` and `TVectorD` constructors of TGraph. What this enables, however, is this:. ```c++. TVectorD{1., 2., 3.}. ```. or for the TGraph case:. ```c++. TGraph gr(TVectorD{1., 2., 3.}, {1., 2., 3.});. ```. I think it's a nice shortcut to have. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9968
https://github.com/root-project/root/pull/9968:639,security,updat,updated,639,"Add initializer_list constructor to TVectorT.; Initially, this was to try out the suggestion [in #7151](https://github.com/root-project/root/issues/7151#issuecomment-1047822177), to enable code like. ```c++. TGraph gr({1, 2, 3}, {1, 2, 3});. ```. This doesn't work, unfortunately, because overload resolution cannot disambiguate between the `TVectorF` and `TVectorD` constructors of TGraph. What this enables, however, is this:. ```c++. TVectorD{1., 2., 3.}. ```. or for the TGraph case:. ```c++. TGraph gr(TVectorD{1., 2., 3.}, {1., 2., 3.});. ```. I think it's a nice shortcut to have. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9968
https://github.com/root-project/root/pull/9968:609,testability,test,tested,609,"Add initializer_list constructor to TVectorT.; Initially, this was to try out the suggestion [in #7151](https://github.com/root-project/root/issues/7151#issuecomment-1047822177), to enable code like. ```c++. TGraph gr({1, 2, 3}, {1, 2, 3});. ```. This doesn't work, unfortunately, because overload resolution cannot disambiguate between the `TVectorF` and `TVectorD` constructors of TGraph. What this enables, however, is this:. ```c++. TVectorD{1., 2., 3.}. ```. or for the TGraph case:. ```c++. TGraph gr(TVectorD{1., 2., 3.}, {1., 2., 3.});. ```. I think it's a nice shortcut to have. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9968
https://github.com/root-project/root/pull/9968:570,usability,shortcut,shortcut,570,"Add initializer_list constructor to TVectorT.; Initially, this was to try out the suggestion [in #7151](https://github.com/root-project/root/issues/7151#issuecomment-1047822177), to enable code like. ```c++. TGraph gr({1, 2, 3}, {1, 2, 3});. ```. This doesn't work, unfortunately, because overload resolution cannot disambiguate between the `TVectorF` and `TVectorD` constructors of TGraph. What this enables, however, is this:. ```c++. TVectorD{1., 2., 3.}. ```. or for the TGraph case:. ```c++. TGraph gr(TVectorD{1., 2., 3.}, {1., 2., 3.});. ```. I think it's a nice shortcut to have. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9968
https://github.com/root-project/root/pull/9969:14,integrability,sub,subtraction,14,Avoid pointer subtraction with null pointers; Clang 13 complains that this has undefined behavior.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9969
https://github.com/root-project/root/pull/9969:0,safety,Avoid,Avoid,0,Avoid pointer subtraction with null pointers; Clang 13 complains that this has undefined behavior.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9969
https://github.com/root-project/root/pull/9969:55,safety,compl,complains,55,Avoid pointer subtraction with null pointers; Clang 13 complains that this has undefined behavior.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9969
https://github.com/root-project/root/pull/9969:55,security,compl,complains,55,Avoid pointer subtraction with null pointers; Clang 13 complains that this has undefined behavior.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9969
https://github.com/root-project/root/pull/9969:89,usability,behavi,behavior,89,Avoid pointer subtraction with null pointers; Clang 13 complains that this has undefined behavior.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9969
https://github.com/root-project/root/pull/9970:93,availability,operat,operator,93,"Remove defaulted copy constructors; Clang warns that ""definition of implicit copy assignment operator for '...' is deprecated because it has a user-declared copy constructor"". My understanding is that we should either declare both or none, and the compiler will default both unless there is a custom destructor.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9970
https://github.com/root-project/root/pull/9970:179,testability,understand,understanding,179,"Remove defaulted copy constructors; Clang warns that ""definition of implicit copy assignment operator for '...' is deprecated because it has a user-declared copy constructor"". My understanding is that we should either declare both or none, and the compiler will default both unless there is a custom destructor.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9970
https://github.com/root-project/root/pull/9970:143,usability,user,user-declared,143,"Remove defaulted copy constructors; Clang warns that ""definition of implicit copy assignment operator for '...' is deprecated because it has a user-declared copy constructor"". My understanding is that we should either declare both or none, and the compiler will default both unless there is a custom destructor.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9970
https://github.com/root-project/root/pull/9970:293,usability,custom,custom,293,"Remove defaulted copy constructors; Clang warns that ""definition of implicit copy assignment operator for '...' is deprecated because it has a user-declared copy constructor"". My understanding is that we should either declare both or none, and the compiler will default both unless there is a custom destructor.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9970
https://github.com/root-project/root/pull/9971:55,interoperability,specif,specified,55,"Correct example in TChain docs; basketsize needs to be specified in `TChain::Merge(TFile* file, Int_t basketsize, Option_t* option)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9971
https://github.com/root-project/root/pull/9972:287,availability,cluster,cluster,287,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:67,deployability,log,logic,67,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:287,deployability,cluster,cluster,287,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:306,deployability,Modul,ModuleNotFoundError,306,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:364,deployability,modul,module,364,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:24,interoperability,distribut,distributed,24,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:200,interoperability,distribut,distributed,200,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:258,interoperability,specif,specifically,258,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:306,modifiability,Modul,ModuleNotFoundError,306,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:364,modifiability,modul,module,364,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:400,reliability,doe,doesn,400,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:5,safety,Isol,Isolate,5,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:67,safety,log,logic,67,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:102,safety,test,test,102,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:306,safety,Modul,ModuleNotFoundError,306,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:364,safety,modul,module,364,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:5,security,Iso,Isolate,5,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:67,security,log,logic,67,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:5,testability,Isol,Isolate,5,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:67,testability,log,logic,67,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9972:102,testability,test,test,102,"[DF] Isolate imports in distributed backend classes; Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: . When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9972
https://github.com/root-project/root/pull/9973:480,deployability,STACK,STACKTRACE,480,"[skip-ci][win64] Fix potential crash when using fscanf from the interpreter; Forward declare `fscanf` used in `mixmax.icc`. This fixes this kind of crash when using `fscanf` in the interpreter:. ```. C:\Users\sftnight\git\roottest\cling\bytecode>root -l. root [0] double x(0), y(0), xE(0), yE(0);. root [1] FILE *d = fopen(""henry.dat"", ""r""). (FILE *) 0x7ffffaa5fa90. root [2] fscanf(d, ""%lf %lf %lf %lf"",&x,&xE,&y,&yE). ==========================================. =============== STACKTRACE ===============. ==========================================. ================ Thread 0 ================. libCore!TWinNTSystem::DispatchSignals(). ucrtbase!seh_filter_exe(). root!Init_thread_header(). VCRUNTIME140!_C_specific_handler(). ntdll!_chkstk(). ntdll!RtlRaiseException(). ntdll!KiUserExceptionDispatcher(). ntdll!RtlWaitOnAddress(). ntdll!RtlEnterCriticalSection(). ntdll!RtlEnterCriticalSection(). ucrtbase!getw(). ucrtbase!_stdio_common_vfscanf(). libMathCore!fscanf(). 0x2332c6f411f ?? 0xb8450d993a87 ?? 0x2332c704000 ?? 0x23335b00040 ?? 0x23335b00050 ?? 0x23335b00048 ?? 0x23335b00058 ?? ```. Note this line:. ```. libMathCore!fscanf(). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9973
https://github.com/root-project/root/pull/9973:203,usability,User,Users,203,"[skip-ci][win64] Fix potential crash when using fscanf from the interpreter; Forward declare `fscanf` used in `mixmax.icc`. This fixes this kind of crash when using `fscanf` in the interpreter:. ```. C:\Users\sftnight\git\roottest\cling\bytecode>root -l. root [0] double x(0), y(0), xE(0), yE(0);. root [1] FILE *d = fopen(""henry.dat"", ""r""). (FILE *) 0x7ffffaa5fa90. root [2] fscanf(d, ""%lf %lf %lf %lf"",&x,&xE,&y,&yE). ==========================================. =============== STACKTRACE ===============. ==========================================. ================ Thread 0 ================. libCore!TWinNTSystem::DispatchSignals(). ucrtbase!seh_filter_exe(). root!Init_thread_header(). VCRUNTIME140!_C_specific_handler(). ntdll!_chkstk(). ntdll!RtlRaiseException(). ntdll!KiUserExceptionDispatcher(). ntdll!RtlWaitOnAddress(). ntdll!RtlEnterCriticalSection(). ntdll!RtlEnterCriticalSection(). ucrtbase!getw(). ucrtbase!_stdio_common_vfscanf(). libMathCore!fscanf(). 0x2332c6f411f ?? 0xb8450d993a87 ?? 0x2332c704000 ?? 0x23335b00040 ?? 0x23335b00050 ?? 0x23335b00048 ?? 0x23335b00058 ?? ```. Note this line:. ```. libMathCore!fscanf(). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9973
https://github.com/root-project/root/pull/9974:164,deployability,updat,updated,164,[cling] DynamicLibraryManagerSymbol.cpp formatting (NFC). [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9974
https://github.com/root-project/root/pull/9974:40,interoperability,format,formatting,40,[cling] DynamicLibraryManagerSymbol.cpp formatting (NFC). [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9974
https://github.com/root-project/root/pull/9974:134,safety,test,tested,134,[cling] DynamicLibraryManagerSymbol.cpp formatting (NFC). [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9974
https://github.com/root-project/root/pull/9974:164,safety,updat,updated,164,[cling] DynamicLibraryManagerSymbol.cpp formatting (NFC). [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9974
https://github.com/root-project/root/pull/9974:164,security,updat,updated,164,[cling] DynamicLibraryManagerSymbol.cpp formatting (NFC). [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9974
https://github.com/root-project/root/pull/9974:134,testability,test,tested,134,[cling] DynamicLibraryManagerSymbol.cpp formatting (NFC). [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9974
https://github.com/root-project/root/pull/9979:42,modifiability,variab,variables,42,[math/tmva] Resolve warnings about unused variables; Either remove or uncomment output.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9979
https://github.com/root-project/root/pull/9981:72,modifiability,variab,variables,72,"[RF] Guard debugging code to avoid warning; If `NDEBUG` is defined, the variables are unused and Clang warns about them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9981
https://github.com/root-project/root/pull/9981:29,safety,avoid,avoid,29,"[RF] Guard debugging code to avoid warning; If `NDEBUG` is defined, the variables are unused and Clang warns about them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9981
https://github.com/root-project/root/pull/9983:179,deployability,build,builds,179,"[doxy] Check non-NULL result of fopen, to prevent crash; # This Pull request:. ## Changes or fixes:. In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9983
https://github.com/root-project/root/pull/9983:210,deployability,fail,fails,210,"[doxy] Check non-NULL result of fopen, to prevent crash; # This Pull request:. ## Changes or fixes:. In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9983
https://github.com/root-project/root/pull/9983:373,deployability,updat,updated,373,"[doxy] Check non-NULL result of fopen, to prevent crash; # This Pull request:. ## Changes or fixes:. In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9983
https://github.com/root-project/root/pull/9983:254,integrability,filter,filter,254,"[doxy] Check non-NULL result of fopen, to prevent crash; # This Pull request:. ## Changes or fixes:. In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9983
https://github.com/root-project/root/pull/9983:210,reliability,fail,fails,210,"[doxy] Check non-NULL result of fopen, to prevent crash; # This Pull request:. ## Changes or fixes:. In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9983
https://github.com/root-project/root/pull/9983:42,safety,prevent,prevent,42,"[doxy] Check non-NULL result of fopen, to prevent crash; # This Pull request:. ## Changes or fixes:. In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9983
https://github.com/root-project/root/pull/9983:297,safety,prevent,prevents,297,"[doxy] Check non-NULL result of fopen, to prevent crash; # This Pull request:. ## Changes or fixes:. In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9983
https://github.com/root-project/root/pull/9983:343,safety,test,tested,343,"[doxy] Check non-NULL result of fopen, to prevent crash; # This Pull request:. ## Changes or fixes:. In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9983
https://github.com/root-project/root/pull/9983:373,safety,updat,updated,373,"[doxy] Check non-NULL result of fopen, to prevent crash; # This Pull request:. ## Changes or fixes:. In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9983
https://github.com/root-project/root/pull/9983:42,security,preven,prevent,42,"[doxy] Check non-NULL result of fopen, to prevent crash; # This Pull request:. ## Changes or fixes:. In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9983
https://github.com/root-project/root/pull/9983:297,security,preven,prevents,297,"[doxy] Check non-NULL result of fopen, to prevent crash; # This Pull request:. ## Changes or fixes:. In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9983
https://github.com/root-project/root/pull/9983:373,security,updat,updated,373,"[doxy] Check non-NULL result of fopen, to prevent crash; # This Pull request:. ## Changes or fixes:. In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9983
https://github.com/root-project/root/pull/9983:343,testability,test,tested,343,"[doxy] Check non-NULL result of fopen, to prevent crash; # This Pull request:. ## Changes or fixes:. In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9983
https://github.com/root-project/root/pull/9983:165,usability,document,documentation,165,"[doxy] Check non-NULL result of fopen, to prevent crash; # This Pull request:. ## Changes or fixes:. In the Doxyfile, when setting NUM_PROC_THREADS to 8 so that the documentation builds faster, sometimes fopen fails and returns NULL, and after that the ""filter"" process crashes. This guard partly prevents that situation. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9983
https://github.com/root-project/root/pull/9984:100,security,access,access,100,[RF] Fix RooDataHist interpolation for larger interpolation order; This Pull request fixes an array access overflow then the interpolation order used in the RooDataHist is >= 10. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9984
https://github.com/root-project/root/pull/9986:459,availability,restor,restored,459,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:796,deployability,observ,observed,796,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:1060,deployability,patch,patch,1060,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:1066,deployability,releas,release,1066,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:960,energy efficiency,CPU,CPU,960,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:40,integrability,batch,batch,40,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:185,integrability,batch,batch,185,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:446,integrability,Batch,BatchMode,446,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:964,integrability,batch,batch,964,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:291,modifiability,scal,scalar,291,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:40,performance,batch,batch,40,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:185,performance,batch,batch,185,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:312,performance,time,time,312,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:446,performance,Batch,BatchMode,446,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:764,performance,perform,performance,764,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:859,performance,perform,performance,859,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:939,performance,overhead,overhead,939,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:960,performance,CPU,CPU,960,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:964,performance,batch,batch,964,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:459,reliability,restor,restored,459,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:827,safety,test,tests,827,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:882,safety,compl,completely,882,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:928,safety,avoid,avoid,928,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:1060,safety,patch,patch,1060,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:882,security,compl,completely,882,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:1060,security,patch,patch,1060,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:776,testability,regress,regression,776,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:796,testability,observ,observed,796,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:827,testability,test,tests,827,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:871,testability,regress,regression,871,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:423,usability,behavi,behavior,423,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:764,usability,perform,performance,764,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9986:859,usability,perform,performance,859,"[RF] Make RooAbsReal::getValues use the batch mode via RooFitDriver; The `RooAbsReal::getValues` has already been established as the entry. point for evaluating RooFit objects with the batch mode and it should. not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar. mode all the time, because the `evaluateSpan` funtions it used got. replaced by `computeBatch`. In this commit, the desired behavior of. using the BatchMode is restored by using the RooFitDriver. To that end, a. new constructor has been added to the RooFitDriver that takes a. `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because. it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9986
https://github.com/root-project/root/pull/9987:197,availability,operat,operations,197,"Core Library Atomic Fixes, master branch (2022.02.25.); # This Pull request:. Explicitly linked the core library against `libatomic`. This is necessary on some platforms in order to use the atomic operations performed by the library. ## Changes or fixes:. The current master branch, without the fix, produces the following build error on Raspberry Pi OS with GCC 11. (Though the exact GCC version doesn't matter much, just that it would not be the built-in GCC 6.3 coming with the OS.). ```. [100%] Linking CXX executable src/rootcling_stage1. ../foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o: In function `ROOT::Experimental::RLogManager::Emit(ROOT::Experimental::RLogEntry const&)':. RLogger.cxx:(.text+0x99c): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0x9c8): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0x9e8): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0xa08): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0xa30): undefined reference to `__atomic_fetch_add_8'. ../foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o:RLogger.cxx:(.text+0xa58): more undefined references to `__atomic_fetch_add_8' follow. collect2: error: ld returned 1 exit status. core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/build.make:242: recipe for target 'core/rootcling_stage1/src/rootcling_stage1' failed. make[3]: *** [core/rootcling_stage1/src/rootcling_stage1] Error 1. CMakeFiles/Makefile2:26106: recipe for target 'core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all' failed. make[2]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all] Error 2. CMakeFiles/Makefile2:26113: recipe for target 'core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/rule' failed. make[1]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/rule] Error 2. Makefile:8132: recipe for target 'rootcling_stage1' failed. make: *** [rootcling_stage1] Error 2. ```. ## Checklist:. - [x] tested",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9987
https://github.com/root-project/root/pull/9987:329,availability,error,error,329,"Core Library Atomic Fixes, master branch (2022.02.25.); # This Pull request:. Explicitly linked the core library against `libatomic`. This is necessary on some platforms in order to use the atomic operations performed by the library. ## Changes or fixes:. The current master branch, without the fix, produces the following build error on Raspberry Pi OS with GCC 11. (Though the exact GCC version doesn't matter much, just that it would not be the built-in GCC 6.3 coming with the OS.). ```. [100%] Linking CXX executable src/rootcling_stage1. ../foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o: In function `ROOT::Experimental::RLogManager::Emit(ROOT::Experimental::RLogEntry const&)':. RLogger.cxx:(.text+0x99c): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0x9c8): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0x9e8): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0xa08): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0xa30): undefined reference to `__atomic_fetch_add_8'. ../foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o:RLogger.cxx:(.text+0xa58): more undefined references to `__atomic_fetch_add_8' follow. collect2: error: ld returned 1 exit status. core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/build.make:242: recipe for target 'core/rootcling_stage1/src/rootcling_stage1' failed. make[3]: *** [core/rootcling_stage1/src/rootcling_stage1] Error 1. CMakeFiles/Makefile2:26106: recipe for target 'core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all' failed. make[2]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all] Error 2. CMakeFiles/Makefile2:26113: recipe for target 'core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/rule' failed. make[1]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/rule] Error 2. Makefile:8132: recipe for target 'rootcling_stage1' failed. make: *** [rootcling_stage1] Error 2. ```. ## Checklist:. - [x] tested",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9987
https://github.com/root-project/root/pull/9987:1234,availability,error,error,1234," Explicitly linked the core library against `libatomic`. This is necessary on some platforms in order to use the atomic operations performed by the library. ## Changes or fixes:. The current master branch, without the fix, produces the following build error on Raspberry Pi OS with GCC 11. (Though the exact GCC version doesn't matter much, just that it would not be the built-in GCC 6.3 coming with the OS.). ```. [100%] Linking CXX executable src/rootcling_stage1. ../foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o: In function `ROOT::Experimental::RLogManager::Emit(ROOT::Experimental::RLogEntry const&)':. RLogger.cxx:(.text+0x99c): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0x9c8): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0x9e8): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0xa08): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0xa30): undefined reference to `__atomic_fetch_add_8'. ../foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o:RLogger.cxx:(.text+0xa58): more undefined references to `__atomic_fetch_add_8' follow. collect2: error: ld returned 1 exit status. core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/build.make:242: recipe for target 'core/rootcling_stage1/src/rootcling_stage1' failed. make[3]: *** [core/rootcling_stage1/src/rootcling_stage1] Error 1. CMakeFiles/Makefile2:26106: recipe for target 'core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all' failed. make[2]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all] Error 2. CMakeFiles/Makefile2:26113: recipe for target 'core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/rule' failed. make[1]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/rule] Error 2. Makefile:8132: recipe for target 'rootcling_stage1' failed. make: *** [rootcling_stage1] Error 2. ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - **Not applicable**.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9987
https://github.com/root-project/root/pull/9987:1467,availability,Error,Error,1467," Explicitly linked the core library against `libatomic`. This is necessary on some platforms in order to use the atomic operations performed by the library. ## Changes or fixes:. The current master branch, without the fix, produces the following build error on Raspberry Pi OS with GCC 11. (Though the exact GCC version doesn't matter much, just that it would not be the built-in GCC 6.3 coming with the OS.). ```. [100%] Linking CXX executable src/rootcling_stage1. ../foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o: In function `ROOT::Experimental::RLogManager::Emit(ROOT::Experimental::RLogEntry const&)':. RLogger.cxx:(.text+0x99c): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0x9c8): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0x9e8): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0xa08): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0xa30): undefined reference to `__atomic_fetch_add_8'. ../foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o:RLogger.cxx:(.text+0xa58): more undefined references to `__atomic_fetch_add_8' follow. collect2: error: ld returned 1 exit status. core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/build.make:242: recipe for target 'core/rootcling_stage1/src/rootcling_stage1' failed. make[3]: *** [core/rootcling_stage1/src/rootcling_stage1] Error 1. CMakeFiles/Makefile2:26106: recipe for target 'core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all' failed. make[2]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all] Error 2. CMakeFiles/Makefile2:26113: recipe for target 'core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/rule' failed. make[1]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/rule] Error 2. Makefile:8132: recipe for target 'rootcling_stage1' failed. make: *** [rootcling_stage1] Error 2. ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - **Not applicable**.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9987
https://github.com/root-project/root/pull/9987:1663,availability,Error,Error,1663," Explicitly linked the core library against `libatomic`. This is necessary on some platforms in order to use the atomic operations performed by the library. ## Changes or fixes:. The current master branch, without the fix, produces the following build error on Raspberry Pi OS with GCC 11. (Though the exact GCC version doesn't matter much, just that it would not be the built-in GCC 6.3 coming with the OS.). ```. [100%] Linking CXX executable src/rootcling_stage1. ../foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o: In function `ROOT::Experimental::RLogManager::Emit(ROOT::Experimental::RLogEntry const&)':. RLogger.cxx:(.text+0x99c): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0x9c8): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0x9e8): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0xa08): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0xa30): undefined reference to `__atomic_fetch_add_8'. ../foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o:RLogger.cxx:(.text+0xa58): more undefined references to `__atomic_fetch_add_8' follow. collect2: error: ld returned 1 exit status. core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/build.make:242: recipe for target 'core/rootcling_stage1/src/rootcling_stage1' failed. make[3]: *** [core/rootcling_stage1/src/rootcling_stage1] Error 1. CMakeFiles/Makefile2:26106: recipe for target 'core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all' failed. make[2]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all] Error 2. CMakeFiles/Makefile2:26113: recipe for target 'core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/rule' failed. make[1]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/rule] Error 2. Makefile:8132: recipe for target 'rootcling_stage1' failed. make: *** [rootcling_stage1] Error 2. ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - **Not applicable**.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9987
https://github.com/root-project/root/pull/9987:1861,availability,Error,Error,1861," Explicitly linked the core library against `libatomic`. This is necessary on some platforms in order to use the atomic operations performed by the library. ## Changes or fixes:. The current master branch, without the fix, produces the following build error on Raspberry Pi OS with GCC 11. (Though the exact GCC version doesn't matter much, just that it would not be the built-in GCC 6.3 coming with the OS.). ```. [100%] Linking CXX executable src/rootcling_stage1. ../foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o: In function `ROOT::Experimental::RLogManager::Emit(ROOT::Experimental::RLogEntry const&)':. RLogger.cxx:(.text+0x99c): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0x9c8): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0x9e8): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0xa08): undefined reference to `__atomic_fetch_add_8'. RLogger.cxx:(.text+0xa30): undefined reference to `__atomic_fetch_add_8'. ../foundation/CMakeFiles/Foundation_Stage1.dir/src/RLogger.cxx.o:RLogger.cxx:(.text+0xa58): more undefined references to `__atomic_fetch_add_8' follow. collect2: error: ld returned 1 exit status. core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/build.make:242: recipe for target 'core/rootcling_stage1/src/rootcling_stage1' failed. make[3]: *** [core/rootcling_stage1/src/rootcling_stage1] Error 1. CMakeFiles/Makefile2:26106: recipe for target 'core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all' failed. make[2]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all] Error 2. CMakeFiles/Makefile2:26113: recipe for target 'core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/rule' failed. make[1]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/rule] Error 2. Makefile:8132: recipe for target 'rootcling_stage1' failed. make: *** [rootcling_stage1] Error 2. ```. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary) - **Not applicable**.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/9987
