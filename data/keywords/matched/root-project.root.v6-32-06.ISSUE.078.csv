id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/12067:1011,safety,modul,module,1011,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:1088,safety,modul,module,1088,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:1168,safety,modul,module,1168,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:1255,safety,modul,module,1255,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:17,security,compl,complain,17,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:132,security,compl,complaining,132,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:249,security,compl,complain,249,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:236,testability,Simpl,Simply,236,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:236,usability,Simpl,Simply,236,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12069:176,deployability,Stack,Stack,176,"Reset function sections before JITting; This makes all functions end up in the same text section, which is important for TCling on macOS to catch exceptions from constructors: Stack unwinding requires information about program addresses to find out which objects to destroy and what code should be called to handle the exception. These addresses are relocated against a single __text section when loading the produced MachO binary, which breaks if the call sites of global constructors end up in a separate init section. Fixes ROOT-10703 and ROOT-10962. (cherry picked from commit 028fcca0fa76111877751df876cf13968be602f9)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12069
https://github.com/root-project/root/pull/12069:397,energy efficiency,load,loading,397,"Reset function sections before JITting; This makes all functions end up in the same text section, which is important for TCling on macOS to catch exceptions from constructors: Stack unwinding requires information about program addresses to find out which objects to destroy and what code should be called to handle the exception. These addresses are relocated against a single __text section when loading the produced MachO binary, which breaks if the call sites of global constructors end up in a separate init section. Fixes ROOT-10703 and ROOT-10962. (cherry picked from commit 028fcca0fa76111877751df876cf13968be602f9)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12069
https://github.com/root-project/root/pull/12069:397,performance,load,loading,397,"Reset function sections before JITting; This makes all functions end up in the same text section, which is important for TCling on macOS to catch exceptions from constructors: Stack unwinding requires information about program addresses to find out which objects to destroy and what code should be called to handle the exception. These addresses are relocated against a single __text section when loading the produced MachO binary, which breaks if the call sites of global constructors end up in a separate init section. Fixes ROOT-10703 and ROOT-10962. (cherry picked from commit 028fcca0fa76111877751df876cf13968be602f9)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12069
https://github.com/root-project/root/pull/12069:146,safety,except,exceptions,146,"Reset function sections before JITting; This makes all functions end up in the same text section, which is important for TCling on macOS to catch exceptions from constructors: Stack unwinding requires information about program addresses to find out which objects to destroy and what code should be called to handle the exception. These addresses are relocated against a single __text section when loading the produced MachO binary, which breaks if the call sites of global constructors end up in a separate init section. Fixes ROOT-10703 and ROOT-10962. (cherry picked from commit 028fcca0fa76111877751df876cf13968be602f9)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12069
https://github.com/root-project/root/pull/12069:319,safety,except,exception,319,"Reset function sections before JITting; This makes all functions end up in the same text section, which is important for TCling on macOS to catch exceptions from constructors: Stack unwinding requires information about program addresses to find out which objects to destroy and what code should be called to handle the exception. These addresses are relocated against a single __text section when loading the produced MachO binary, which breaks if the call sites of global constructors end up in a separate init section. Fixes ROOT-10703 and ROOT-10962. (cherry picked from commit 028fcca0fa76111877751df876cf13968be602f9)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12069
https://github.com/root-project/root/pull/12070:35,deployability,configurat,configuration,35,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:321,deployability,automat,automatically,321,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:246,energy efficiency,load,loading,246,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:35,integrability,configur,configuration,35,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:35,modifiability,configur,configuration,35,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:246,performance,load,loading,246,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:29,safety,test,tests,29,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:92,safety,input,input,92,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:221,safety,avoid,avoid,221,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:361,safety,input,input,361,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:35,security,configur,configuration,35,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:300,security,modif,modified,300,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:29,testability,test,tests,29,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:321,testability,automat,automatically,321,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:92,usability,input,input,92,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12070:361,usability,input,input,361,"[tmva][sofie] Speed up SOFIE tests configuration; Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12070
https://github.com/root-project/root/pull/12071:16,integrability,schema,schema-evolved,16,[RF] RooProduct schema-evolved i/o bug fix; handle case where p0 or p1 are null -> ensure not null by time expectProxyIs is called.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12071
https://github.com/root-project/root/pull/12071:23,modifiability,evolv,evolved,23,[RF] RooProduct schema-evolved i/o bug fix; handle case where p0 or p1 are null -> ensure not null by time expectProxyIs is called.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12071
https://github.com/root-project/root/pull/12071:31,performance,i/o,i/o,31,[RF] RooProduct schema-evolved i/o bug fix; handle case where p0 or p1 are null -> ensure not null by time expectProxyIs is called.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12071
https://github.com/root-project/root/pull/12071:102,performance,time,time,102,[RF] RooProduct schema-evolved i/o bug fix; handle case where p0 or p1 are null -> ensure not null by time expectProxyIs is called.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12071
https://github.com/root-project/root/pull/12072:595,deployability,updat,update,595,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:786,deployability,updat,update,786,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:951,deployability,releas,release,951,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:586,performance,lock,lock,586,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:668,performance,lock,lock,668,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:776,performance,time,time,776,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:968,performance,lock,lock,968,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:1088,performance,memor,memory,1088,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:1295,performance,memor,memory,1295,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:1329,performance,lock,lock,1329,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:595,safety,updat,update,595,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:786,safety,updat,update,786,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:586,security,lock,lock,586,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:595,security,updat,update,595,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:668,security,lock,lock,668,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:786,security,updat,update,786,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:968,security,lock,lock,968,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:1074,security,access,access,1074,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:1329,security,lock,lock,1329,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:1088,usability,memor,memory,1088,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12072:1295,usability,memor,memory,1295,"v628: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12072
https://github.com/root-project/root/pull/12073:115,deployability,contain,containing,115,[ntuple] Fix loading of class for split collections; This PR fixes the incorrect fetching of the type for branches containing split collections of user-defined classes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12073
https://github.com/root-project/root/pull/12073:220,deployability,updat,updated,220,[ntuple] Fix loading of class for split collections; This PR fixes the incorrect fetching of the type for branches containing split collections of user-defined classes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12073
https://github.com/root-project/root/pull/12073:13,energy efficiency,load,loading,13,[ntuple] Fix loading of class for split collections; This PR fixes the incorrect fetching of the type for branches containing split collections of user-defined classes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12073
https://github.com/root-project/root/pull/12073:13,performance,load,loading,13,[ntuple] Fix loading of class for split collections; This PR fixes the incorrect fetching of the type for branches containing split collections of user-defined classes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12073
https://github.com/root-project/root/pull/12073:190,safety,test,tested,190,[ntuple] Fix loading of class for split collections; This PR fixes the incorrect fetching of the type for branches containing split collections of user-defined classes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12073
https://github.com/root-project/root/pull/12073:220,safety,updat,updated,220,[ntuple] Fix loading of class for split collections; This PR fixes the incorrect fetching of the type for branches containing split collections of user-defined classes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12073
https://github.com/root-project/root/pull/12073:220,security,updat,updated,220,[ntuple] Fix loading of class for split collections; This PR fixes the incorrect fetching of the type for branches containing split collections of user-defined classes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12073
https://github.com/root-project/root/pull/12073:190,testability,test,tested,190,[ntuple] Fix loading of class for split collections; This PR fixes the incorrect fetching of the type for branches containing split collections of user-defined classes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12073
https://github.com/root-project/root/pull/12073:147,usability,user,user-defined,147,[ntuple] Fix loading of class for split collections; This PR fixes the incorrect fetching of the type for branches containing split collections of user-defined classes. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12073
https://github.com/root-project/root/pull/12074:20,deployability,patch,patch,20,Revert another LLVM patch; Replace it by two proper backports of https://reviews.llvm.org/D142352 and https://reviews.llvm.org/D142443.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12074
https://github.com/root-project/root/pull/12074:20,safety,patch,patch,20,Revert another LLVM patch; Replace it by two proper backports of https://reviews.llvm.org/D142352 and https://reviews.llvm.org/D142443.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12074
https://github.com/root-project/root/pull/12074:73,safety,review,reviews,73,Revert another LLVM patch; Replace it by two proper backports of https://reviews.llvm.org/D142352 and https://reviews.llvm.org/D142443.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12074
https://github.com/root-project/root/pull/12074:110,safety,review,reviews,110,Revert another LLVM patch; Replace it by two proper backports of https://reviews.llvm.org/D142352 and https://reviews.llvm.org/D142443.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12074
https://github.com/root-project/root/pull/12074:20,security,patch,patch,20,Revert another LLVM patch; Replace it by two proper backports of https://reviews.llvm.org/D142352 and https://reviews.llvm.org/D142443.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12074
https://github.com/root-project/root/pull/12074:73,testability,review,reviews,73,Revert another LLVM patch; Replace it by two proper backports of https://reviews.llvm.org/D142352 and https://reviews.llvm.org/D142443.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12074
https://github.com/root-project/root/pull/12074:110,testability,review,reviews,110,Revert another LLVM patch; Replace it by two proper backports of https://reviews.llvm.org/D142352 and https://reviews.llvm.org/D142443.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12074
https://github.com/root-project/root/pull/12075:125,availability,Error,Error,125,[clad] Bump clad version to v1.1.; This new release includes some improvements:. * Improvements in the array handling in the Error Estimation Framework. * Fixed numerical stability of the pow pushforward. * Fixed handling of for-loop conditions in reverse mode. * LLVM15 Support. See more at: https://github.com/vgvassilev/clad/blob/v1.1/docs/internalDocs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12075
https://github.com/root-project/root/pull/12075:17,deployability,version,version,17,[clad] Bump clad version to v1.1.; This new release includes some improvements:. * Improvements in the array handling in the Error Estimation Framework. * Fixed numerical stability of the pow pushforward. * Fixed handling of for-loop conditions in reverse mode. * LLVM15 Support. See more at: https://github.com/vgvassilev/clad/blob/v1.1/docs/internalDocs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12075
https://github.com/root-project/root/pull/12075:44,deployability,releas,release,44,[clad] Bump clad version to v1.1.; This new release includes some improvements:. * Improvements in the array handling in the Error Estimation Framework. * Fixed numerical stability of the pow pushforward. * Fixed handling of for-loop conditions in reverse mode. * LLVM15 Support. See more at: https://github.com/vgvassilev/clad/blob/v1.1/docs/internalDocs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12075
https://github.com/root-project/root/pull/12075:356,deployability,Releas,ReleaseNotes,356,[clad] Bump clad version to v1.1.; This new release includes some improvements:. * Improvements in the array handling in the Error Estimation Framework. * Fixed numerical stability of the pow pushforward. * Fixed handling of for-loop conditions in reverse mode. * LLVM15 Support. See more at: https://github.com/vgvassilev/clad/blob/v1.1/docs/internalDocs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12075
https://github.com/root-project/root/pull/12075:131,energy efficiency,Estimat,Estimation,131,[clad] Bump clad version to v1.1.; This new release includes some improvements:. * Improvements in the array handling in the Error Estimation Framework. * Fixed numerical stability of the pow pushforward. * Fixed handling of for-loop conditions in reverse mode. * LLVM15 Support. See more at: https://github.com/vgvassilev/clad/blob/v1.1/docs/internalDocs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12075
https://github.com/root-project/root/pull/12075:17,integrability,version,version,17,[clad] Bump clad version to v1.1.; This new release includes some improvements:. * Improvements in the array handling in the Error Estimation Framework. * Fixed numerical stability of the pow pushforward. * Fixed handling of for-loop conditions in reverse mode. * LLVM15 Support. See more at: https://github.com/vgvassilev/clad/blob/v1.1/docs/internalDocs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12075
https://github.com/root-project/root/pull/12075:17,modifiability,version,version,17,[clad] Bump clad version to v1.1.; This new release includes some improvements:. * Improvements in the array handling in the Error Estimation Framework. * Fixed numerical stability of the pow pushforward. * Fixed handling of for-loop conditions in reverse mode. * LLVM15 Support. See more at: https://github.com/vgvassilev/clad/blob/v1.1/docs/internalDocs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12075
https://github.com/root-project/root/pull/12075:125,performance,Error,Error,125,[clad] Bump clad version to v1.1.; This new release includes some improvements:. * Improvements in the array handling in the Error Estimation Framework. * Fixed numerical stability of the pow pushforward. * Fixed handling of for-loop conditions in reverse mode. * LLVM15 Support. See more at: https://github.com/vgvassilev/clad/blob/v1.1/docs/internalDocs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12075
https://github.com/root-project/root/pull/12075:171,reliability,stabil,stability,171,[clad] Bump clad version to v1.1.; This new release includes some improvements:. * Improvements in the array handling in the Error Estimation Framework. * Fixed numerical stability of the pow pushforward. * Fixed handling of for-loop conditions in reverse mode. * LLVM15 Support. See more at: https://github.com/vgvassilev/clad/blob/v1.1/docs/internalDocs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12075
https://github.com/root-project/root/pull/12075:125,safety,Error,Error,125,[clad] Bump clad version to v1.1.; This new release includes some improvements:. * Improvements in the array handling in the Error Estimation Framework. * Fixed numerical stability of the pow pushforward. * Fixed handling of for-loop conditions in reverse mode. * LLVM15 Support. See more at: https://github.com/vgvassilev/clad/blob/v1.1/docs/internalDocs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12075
https://github.com/root-project/root/pull/12075:125,usability,Error,Error,125,[clad] Bump clad version to v1.1.; This new release includes some improvements:. * Improvements in the array handling in the Error Estimation Framework. * Fixed numerical stability of the pow pushforward. * Fixed handling of for-loop conditions in reverse mode. * LLVM15 Support. See more at: https://github.com/vgvassilev/clad/blob/v1.1/docs/internalDocs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12075
https://github.com/root-project/root/pull/12075:271,usability,Support,Support,271,[clad] Bump clad version to v1.1.; This new release includes some improvements:. * Improvements in the array handling in the Error Estimation Framework. * Fixed numerical stability of the pow pushforward. * Fixed handling of for-loop conditions in reverse mode. * LLVM15 Support. See more at: https://github.com/vgvassilev/clad/blob/v1.1/docs/internalDocs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12075
https://github.com/root-project/root/pull/12076:222,availability,operat,operator,222,"[TMVA][SOFIE] Handling Dropout layer in SOFIE Keras Parser; This PR adds the handling of the Dropout layer in SOFIE Keras Parser. As dropout will not have any effect on inference, thus it should be mimicked as an identity operator while parsing and in the generated inference code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12076
https://github.com/root-project/root/pull/12076:31,modifiability,layer,layer,31,"[TMVA][SOFIE] Handling Dropout layer in SOFIE Keras Parser; This PR adds the handling of the Dropout layer in SOFIE Keras Parser. As dropout will not have any effect on inference, thus it should be mimicked as an identity operator while parsing and in the generated inference code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12076
https://github.com/root-project/root/pull/12076:101,modifiability,layer,layer,101,"[TMVA][SOFIE] Handling Dropout layer in SOFIE Keras Parser; This PR adds the handling of the Dropout layer in SOFIE Keras Parser. As dropout will not have any effect on inference, thus it should be mimicked as an identity operator while parsing and in the generated inference code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12076
https://github.com/root-project/root/pull/12076:213,security,ident,identity,213,"[TMVA][SOFIE] Handling Dropout layer in SOFIE Keras Parser; This PR adds the handling of the Dropout layer in SOFIE Keras Parser. As dropout will not have any effect on inference, thus it should be mimicked as an identity operator while parsing and in the generated inference code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12076
https://github.com/root-project/root/pull/12079:473,deployability,integr,integrals,473,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:868,deployability,depend,dependencies,868,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1546,deployability,integr,integrals,1546," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1741,deployability,contain,contains,1741," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1758,deployability,log,logic,1758," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:2470,deployability,modul,modular,2470," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:107,energy efficiency,model,model,107,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1193,energy efficiency,model,model,1193,"he RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:2306,energy efficiency,GPU,GPU,2306," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:92,integrability,Batch,BatchMode,92,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:418,integrability,Batch,BatchMode,418,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:473,integrability,integr,integrals,473,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:588,integrability,transform,transformation,588,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:868,integrability,depend,dependencies,868,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1546,integrability,integr,integrals,1546," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1867,integrability,interfac,interface,1867," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:2051,integrability,Batch,BatchMode,2051," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:2114,integrability,Batch,BatchMode,2114," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:2172,integrability,Batch,BatchMode,2172," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:2470,integrability,modular,modular,2470," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:473,interoperability,integr,integrals,473,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:588,interoperability,transform,transformation,588,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1546,interoperability,integr,integrals,1546," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1663,interoperability,specif,specific,1663," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1867,interoperability,interfac,interface,1867," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:473,modifiability,integr,integrals,473,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:868,modifiability,depend,dependencies,868,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1546,modifiability,integr,integrals,1546," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1867,modifiability,interfac,interface,1867," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:2470,modifiability,modul,modular,2470," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:92,performance,Batch,BatchMode,92,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:418,performance,Batch,BatchMode,418,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:698,performance,cach,cached,698,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:2051,performance,Batch,BatchMode,2051," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:2114,performance,Batch,BatchMode,2114," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:2172,performance,Batch,BatchMode,2172," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:2306,performance,GPU,GPU,2306," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:473,reliability,integr,integrals,473,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1546,reliability,integr,integrals,1546," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:868,safety,depend,dependencies,868,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1758,safety,log,logic,1758," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:2470,safety,modul,modular,2470," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:107,security,model,model,107,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:252,security,hack,hacky,252,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:473,security,integr,integrals,473,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:647,security,expos,exposes,647,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1193,security,model,model,1193,"he RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1546,security,integr,integrals,1546," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1758,security,log,logic,1758," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:473,testability,integr,integrals,473,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:868,testability,depend,dependencies,868,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1384,testability,context,context,1384," before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. con",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1503,testability,context,context,1503," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1546,testability,integr,integrals,1546," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1758,testability,log,logic,1758," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1996,testability,understand,understand,1996," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:2470,testability,modula,modular,2470," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:287,usability,clear,clear,287,"[RF] New way to fix compute graph with `RooAbsArg::compileForNormSet()`; For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to unde",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:1126,usability,learn,learned,1126,"mpiled"" for a. fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became. clear gradually how important this step is, as many changes need to be. done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12079:2290,usability,support,support,2290," such that they are. separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new. object that exposes the full intenal computation graph that is cached by. the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute. graph, and there was also a third pass to figure out dependencies and. normalization sets in the graph, and some more recursive passes the. attach new servers. This all became very compilcated and hard to debug, as the separate. passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general. way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the. newly-proposed function. `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set. is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing. the RooProdPdfs can be implemented in the overload for this function of. the specific class. There is even an overload for the RooSimultaneous. now, which contains all the logic of making the RooSimultaenous ready. for the NLL creation. There are still some rough edges in the new interface, but it is already. a big step forward that will make debugging much easier because it's now. much less compilcated to understand how the computation graph is set up. by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par. with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit. developments, like the analytical convolution support for the GPU. To. implement this, it will also be beneficial to compile the analytical. convolution classes for a given normalization set, which can now be done. in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12079
https://github.com/root-project/root/pull/12080:32,deployability,patch,patches,32,REve backport fixes in v6-28-00-patches; This PR is back port of #12060,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12080
https://github.com/root-project/root/pull/12080:32,safety,patch,patches,32,REve backport fixes in v6-28-00-patches; This PR is back port of #12060,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12080
https://github.com/root-project/root/pull/12080:32,security,patch,patches,32,REve backport fixes in v6-28-00-patches; This PR is back port of #12060,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12080
https://github.com/root-project/root/pull/12081:595,deployability,updat,update,595,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:786,deployability,updat,update,786,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:951,deployability,releas,release,951,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:586,performance,lock,lock,586,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:668,performance,lock,lock,668,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:776,performance,time,time,776,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:968,performance,lock,lock,968,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:1088,performance,memor,memory,1088,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:1295,performance,memor,memory,1295,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:1329,performance,lock,lock,1329,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:595,safety,updat,update,595,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:786,safety,updat,update,786,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:586,security,lock,lock,586,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:595,security,updat,update,595,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:668,security,lock,lock,668,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:786,security,updat,update,786,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:968,security,lock,lock,968,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:1074,security,access,access,1074,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:1329,security,lock,lock,1329,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:1088,usability,memor,memory,1088,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12081:1295,usability,memor,memory,1295,"v626: Reenable the cleanup of gDirectory in other threads upon file deletion.; This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other. threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file. (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase. (a) take the TFile spin lock and update all the TContext that points to the file. (b) still hold the spin lock, clean the other thread's directory. (c) deal with the TContext that were being destructed at the same time. (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and. is held at the start of RegisterContext after thread 2 release the spin lock,. thread 1 might awaken only after the TFile object has been deleted and thus. RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the. creation of a TContext, but is suspended right before the start of RegisterContext,. when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12081
https://github.com/root-project/root/pull/12083:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 6; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12048. 2. https://github.com/root-project/root/pull/12061. 3. https://github.com/root-project/root/pull/12071. Only the first commit that is not a fixup to a recent typo is `master`. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12083
https://github.com/root-project/root/pull/12083:164,deployability,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 6; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12048. 2. https://github.com/root-project/root/pull/12061. 3. https://github.com/root-project/root/pull/12071. Only the first commit that is not a fixup to a recent typo is `master`. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12083
https://github.com/root-project/root/pull/12083:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 6; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12048. 2. https://github.com/root-project/root/pull/12061. 3. https://github.com/root-project/root/pull/12071. Only the first commit that is not a fixup to a recent typo is `master`. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12083
https://github.com/root-project/root/pull/12083:164,safety,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 6; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12048. 2. https://github.com/root-project/root/pull/12061. 3. https://github.com/root-project/root/pull/12071. Only the first commit that is not a fixup to a recent typo is `master`. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12083
https://github.com/root-project/root/pull/12083:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 6; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12048. 2. https://github.com/root-project/root/pull/12061. 3. https://github.com/root-project/root/pull/12071. Only the first commit that is not a fixup to a recent typo is `master`. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12083
https://github.com/root-project/root/pull/12083:164,security,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 6; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12048. 2. https://github.com/root-project/root/pull/12061. 3. https://github.com/root-project/root/pull/12071. Only the first commit that is not a fixup to a recent typo is `master`. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12083
https://github.com/root-project/root/pull/12084:111,deployability,automat,automatically,111,"Fix gcc13 warning in TMVA Sofie includes; Properly initialize `std::vector<std::string>`, gcc13 do not like to automatically convert array of const char* to it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12084
https://github.com/root-project/root/pull/12084:111,testability,automat,automatically,111,"Fix gcc13 warning in TMVA Sofie includes; Properly initialize `std::vector<std::string>`, gcc13 do not like to automatically convert array of const char* to it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12084
https://github.com/root-project/root/pull/12087:38,safety,compl,complains,38,Fix gcc13 warning in TPaveText; gcc13 complains that `name` can be null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12087
https://github.com/root-project/root/pull/12087:38,security,compl,complains,38,Fix gcc13 warning in TPaveText; gcc13 complains that `name` can be null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12087
https://github.com/root-project/root/pull/12088:462,deployability,updat,updated,462,Fix GL viewer camera center picking for retina displays.; # This Pull request:. Corrects camera center picking feature in GL-based geometry display. The bug is described in #12035 . ## Changes or fixes:. Applies the screen scaling factor for camera center picked screen coordinates. Fixes the bug reported in this forum [subject](https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12035 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12088
https://github.com/root-project/root/pull/12088:321,integrability,sub,subject,321,Fix GL viewer camera center picking for retina displays.; # This Pull request:. Corrects camera center picking feature in GL-based geometry display. The bug is described in #12035 . ## Changes or fixes:. Applies the screen scaling factor for camera center picked screen coordinates. Fixes the bug reported in this forum [subject](https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12035 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12088
https://github.com/root-project/root/pull/12088:270,interoperability,coordinat,coordinates,270,Fix GL viewer camera center picking for retina displays.; # This Pull request:. Corrects camera center picking feature in GL-based geometry display. The bug is described in #12035 . ## Changes or fixes:. Applies the screen scaling factor for camera center picked screen coordinates. Fixes the bug reported in this forum [subject](https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12035 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12088
https://github.com/root-project/root/pull/12088:223,modifiability,scal,scaling,223,Fix GL viewer camera center picking for retina displays.; # This Pull request:. Corrects camera center picking feature in GL-based geometry display. The bug is described in #12035 . ## Changes or fixes:. Applies the screen scaling factor for camera center picked screen coordinates. Fixes the bug reported in this forum [subject](https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12035 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12088
https://github.com/root-project/root/pull/12088:432,safety,test,tested,432,Fix GL viewer camera center picking for retina displays.; # This Pull request:. Corrects camera center picking feature in GL-based geometry display. The bug is described in #12035 . ## Changes or fixes:. Applies the screen scaling factor for camera center picked screen coordinates. Fixes the bug reported in this forum [subject](https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12035 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12088
https://github.com/root-project/root/pull/12088:462,safety,updat,updated,462,Fix GL viewer camera center picking for retina displays.; # This Pull request:. Corrects camera center picking feature in GL-based geometry display. The bug is described in #12035 . ## Changes or fixes:. Applies the screen scaling factor for camera center picked screen coordinates. Fixes the bug reported in this forum [subject](https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12035 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12088
https://github.com/root-project/root/pull/12088:462,security,updat,updated,462,Fix GL viewer camera center picking for retina displays.; # This Pull request:. Corrects camera center picking feature in GL-based geometry display. The bug is described in #12035 . ## Changes or fixes:. Applies the screen scaling factor for camera center picked screen coordinates. Fixes the bug reported in this forum [subject](https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12035 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12088
https://github.com/root-project/root/pull/12088:432,testability,test,tested,432,Fix GL viewer camera center picking for retina displays.; # This Pull request:. Corrects camera center picking feature in GL-based geometry display. The bug is described in #12035 . ## Changes or fixes:. Applies the screen scaling factor for camera center picked screen coordinates. Fixes the bug reported in this forum [subject](https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12035 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12088
https://github.com/root-project/root/pull/12088:359,usability,mous,mouse-position-shifts-in-geometry-display,359,Fix GL viewer camera center picking for retina displays.; # This Pull request:. Corrects camera center picking feature in GL-based geometry display. The bug is described in #12035 . ## Changes or fixes:. Applies the screen scaling factor for camera center picked screen coordinates. Fixes the bug reported in this forum [subject](https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12035 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12088
https://github.com/root-project/root/pull/12089:172,availability,operat,operators,172,"[math] KahanSum release notes for 6.28; # This Pull request:. ## Changes or fixes:. Adds release notes for 6.28, as requested in #11856. Additionally, it adds two equality operators and a note in the documentation of an existing operator. These operators will be used in a later PR. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12089
https://github.com/root-project/root/pull/12089:229,availability,operat,operator,229,"[math] KahanSum release notes for 6.28; # This Pull request:. ## Changes or fixes:. Adds release notes for 6.28, as requested in #11856. Additionally, it adds two equality operators and a note in the documentation of an existing operator. These operators will be used in a later PR. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12089
https://github.com/root-project/root/pull/12089:245,availability,operat,operators,245,"[math] KahanSum release notes for 6.28; # This Pull request:. ## Changes or fixes:. Adds release notes for 6.28, as requested in #11856. Additionally, it adds two equality operators and a note in the documentation of an existing operator. These operators will be used in a later PR. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12089
https://github.com/root-project/root/pull/12089:16,deployability,releas,release,16,"[math] KahanSum release notes for 6.28; # This Pull request:. ## Changes or fixes:. Adds release notes for 6.28, as requested in #11856. Additionally, it adds two equality operators and a note in the documentation of an existing operator. These operators will be used in a later PR. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12089
https://github.com/root-project/root/pull/12089:89,deployability,releas,release,89,"[math] KahanSum release notes for 6.28; # This Pull request:. ## Changes or fixes:. Adds release notes for 6.28, as requested in #11856. Additionally, it adds two equality operators and a note in the documentation of an existing operator. These operators will be used in a later PR. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12089
https://github.com/root-project/root/pull/12089:334,deployability,updat,updated,334,"[math] KahanSum release notes for 6.28; # This Pull request:. ## Changes or fixes:. Adds release notes for 6.28, as requested in #11856. Additionally, it adds two equality operators and a note in the documentation of an existing operator. These operators will be used in a later PR. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12089
https://github.com/root-project/root/pull/12089:304,safety,test,tested,304,"[math] KahanSum release notes for 6.28; # This Pull request:. ## Changes or fixes:. Adds release notes for 6.28, as requested in #11856. Additionally, it adds two equality operators and a note in the documentation of an existing operator. These operators will be used in a later PR. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12089
https://github.com/root-project/root/pull/12089:334,safety,updat,updated,334,"[math] KahanSum release notes for 6.28; # This Pull request:. ## Changes or fixes:. Adds release notes for 6.28, as requested in #11856. Additionally, it adds two equality operators and a note in the documentation of an existing operator. These operators will be used in a later PR. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12089
https://github.com/root-project/root/pull/12089:334,security,updat,updated,334,"[math] KahanSum release notes for 6.28; # This Pull request:. ## Changes or fixes:. Adds release notes for 6.28, as requested in #11856. Additionally, it adds two equality operators and a note in the documentation of an existing operator. These operators will be used in a later PR. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12089
https://github.com/root-project/root/pull/12089:304,testability,test,tested,304,"[math] KahanSum release notes for 6.28; # This Pull request:. ## Changes or fixes:. Adds release notes for 6.28, as requested in #11856. Additionally, it adds two equality operators and a note in the documentation of an existing operator. These operators will be used in a later PR. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12089
https://github.com/root-project/root/pull/12089:200,usability,document,documentation,200,"[math] KahanSum release notes for 6.28; # This Pull request:. ## Changes or fixes:. Adds release notes for 6.28, as requested in #11856. Additionally, it adds two equality operators and a note in the documentation of an existing operator. These operators will be used in a later PR. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12089
https://github.com/root-project/root/pull/12090:10,interoperability,registr,registration,10,"Re-enable registration of thread-local gDirectory to gROOT.; Registrering the thread-local gDirectory with the gROOT (which is special TDirectory) allows to keep the. shared_pointer alive until gROOT is destructed. Technically we would only need to keep around the one associated with the main thread. Thread local. storage (and hence the original shared_ptr for the thread local gDirectory) is destructed. (even for the thread local associated with the main thread) before the static storage is destructed. So prior to this commit, the main thread's gDirectory shared pointer was destructed before. the start of the TROOT destructor and then TDirectory::CleanTargets when using explicitly. 'gDirectory' was reading deleted memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12090
https://github.com/root-project/root/pull/12090:61,interoperability,Registr,Registrering,61,"Re-enable registration of thread-local gDirectory to gROOT.; Registrering the thread-local gDirectory with the gROOT (which is special TDirectory) allows to keep the. shared_pointer alive until gROOT is destructed. Technically we would only need to keep around the one associated with the main thread. Thread local. storage (and hence the original shared_ptr for the thread local gDirectory) is destructed. (even for the thread local associated with the main thread) before the static storage is destructed. So prior to this commit, the main thread's gDirectory shared pointer was destructed before. the start of the TROOT destructor and then TDirectory::CleanTargets when using explicitly. 'gDirectory' was reading deleted memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12090
https://github.com/root-project/root/pull/12090:562,interoperability,share,shared,562,"Re-enable registration of thread-local gDirectory to gROOT.; Registrering the thread-local gDirectory with the gROOT (which is special TDirectory) allows to keep the. shared_pointer alive until gROOT is destructed. Technically we would only need to keep around the one associated with the main thread. Thread local. storage (and hence the original shared_ptr for the thread local gDirectory) is destructed. (even for the thread local associated with the main thread) before the static storage is destructed. So prior to this commit, the main thread's gDirectory shared pointer was destructed before. the start of the TROOT destructor and then TDirectory::CleanTargets when using explicitly. 'gDirectory' was reading deleted memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12090
https://github.com/root-project/root/pull/12090:724,performance,memor,memory,724,"Re-enable registration of thread-local gDirectory to gROOT.; Registrering the thread-local gDirectory with the gROOT (which is special TDirectory) allows to keep the. shared_pointer alive until gROOT is destructed. Technically we would only need to keep around the one associated with the main thread. Thread local. storage (and hence the original shared_ptr for the thread local gDirectory) is destructed. (even for the thread local associated with the main thread) before the static storage is destructed. So prior to this commit, the main thread's gDirectory shared pointer was destructed before. the start of the TROOT destructor and then TDirectory::CleanTargets when using explicitly. 'gDirectory' was reading deleted memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12090
https://github.com/root-project/root/pull/12090:724,usability,memor,memory,724,"Re-enable registration of thread-local gDirectory to gROOT.; Registrering the thread-local gDirectory with the gROOT (which is special TDirectory) allows to keep the. shared_pointer alive until gROOT is destructed. Technically we would only need to keep around the one associated with the main thread. Thread local. storage (and hence the original shared_ptr for the thread local gDirectory) is destructed. (even for the thread local associated with the main thread) before the static storage is destructed. So prior to this commit, the main thread's gDirectory shared pointer was destructed before. the start of the TROOT destructor and then TDirectory::CleanTargets when using explicitly. 'gDirectory' was reading deleted memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12090
https://github.com/root-project/root/issues/12091:1274,deployability,observ,observed,1274,"TSpline SaveAs not using equidistant and loss of precision; The TSpline3::SaveAs and TSpline5::SaveAs methods have two types of bugs. 1). if (klow > fNp-1) klow = fNp-1 is generally true such that equidistant knots are not used. if (klow > fNp-1) klow = fNp-1 looks ok, to be used in lines 931, 1737. 2) double constants are written with %g resulting in a major loss of precision. Proposed fix :. replace %g with %.17g. replace char numb[20] --> char numb[30]. replace snprintf(numb,20, --> snprintf(numb,30,. Can be checked as follows :. ```. const int n=11;. Double_t x[n],y[n];. for(int i=0; i<n; ++i) {. x[i]=i*0.1;. y[i]=sqrt(2.)*pow(x[i],2); // simple quadratic polynomial. }. //TSpline3* s=new TSpline3(""spline"", 0, 1, y, n);. TSpline5* s=new TSpline5(""spline"", 0, 1, y, n);. s->SaveAs(""spline.cc"");. int prec=15,wid=prec+7;. .L spline.cc. std::cout << "" x"" << setw(wid) << ""y"" << setw(wid) << ""spline"" << setw(wid) << ""diff"" << '\n';. for(int i=0; i<n; ++i) {. std::cout << setw(5) << x[i] << setw(wid) << y[i] << setw(wid) << spline(x[i]) << setw(wid) << y[i]-spline(x[i]) << std::endl;. }. ```. With the proposed changes, function and spline values agree, diff = 0. Loss in precision by writing double values with an insufficient number of digits in root has been observed before, see https://sft.its.cern.ch/jira/browse/ROOT-8844. Maybe a good idea to check this more generally. Cheers, Helmut Burkhardt. [TSpline.cxx.zip](https://github.com/root-project/root/files/10480476/TSpline.cxx.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12091
https://github.com/root-project/root/issues/12091:41,security,loss,loss,41,"TSpline SaveAs not using equidistant and loss of precision; The TSpline3::SaveAs and TSpline5::SaveAs methods have two types of bugs. 1). if (klow > fNp-1) klow = fNp-1 is generally true such that equidistant knots are not used. if (klow > fNp-1) klow = fNp-1 looks ok, to be used in lines 931, 1737. 2) double constants are written with %g resulting in a major loss of precision. Proposed fix :. replace %g with %.17g. replace char numb[20] --> char numb[30]. replace snprintf(numb,20, --> snprintf(numb,30,. Can be checked as follows :. ```. const int n=11;. Double_t x[n],y[n];. for(int i=0; i<n; ++i) {. x[i]=i*0.1;. y[i]=sqrt(2.)*pow(x[i],2); // simple quadratic polynomial. }. //TSpline3* s=new TSpline3(""spline"", 0, 1, y, n);. TSpline5* s=new TSpline5(""spline"", 0, 1, y, n);. s->SaveAs(""spline.cc"");. int prec=15,wid=prec+7;. .L spline.cc. std::cout << "" x"" << setw(wid) << ""y"" << setw(wid) << ""spline"" << setw(wid) << ""diff"" << '\n';. for(int i=0; i<n; ++i) {. std::cout << setw(5) << x[i] << setw(wid) << y[i] << setw(wid) << spline(x[i]) << setw(wid) << y[i]-spline(x[i]) << std::endl;. }. ```. With the proposed changes, function and spline values agree, diff = 0. Loss in precision by writing double values with an insufficient number of digits in root has been observed before, see https://sft.its.cern.ch/jira/browse/ROOT-8844. Maybe a good idea to check this more generally. Cheers, Helmut Burkhardt. [TSpline.cxx.zip](https://github.com/root-project/root/files/10480476/TSpline.cxx.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12091
https://github.com/root-project/root/issues/12091:362,security,loss,loss,362,"TSpline SaveAs not using equidistant and loss of precision; The TSpline3::SaveAs and TSpline5::SaveAs methods have two types of bugs. 1). if (klow > fNp-1) klow = fNp-1 is generally true such that equidistant knots are not used. if (klow > fNp-1) klow = fNp-1 looks ok, to be used in lines 931, 1737. 2) double constants are written with %g resulting in a major loss of precision. Proposed fix :. replace %g with %.17g. replace char numb[20] --> char numb[30]. replace snprintf(numb,20, --> snprintf(numb,30,. Can be checked as follows :. ```. const int n=11;. Double_t x[n],y[n];. for(int i=0; i<n; ++i) {. x[i]=i*0.1;. y[i]=sqrt(2.)*pow(x[i],2); // simple quadratic polynomial. }. //TSpline3* s=new TSpline3(""spline"", 0, 1, y, n);. TSpline5* s=new TSpline5(""spline"", 0, 1, y, n);. s->SaveAs(""spline.cc"");. int prec=15,wid=prec+7;. .L spline.cc. std::cout << "" x"" << setw(wid) << ""y"" << setw(wid) << ""spline"" << setw(wid) << ""diff"" << '\n';. for(int i=0; i<n; ++i) {. std::cout << setw(5) << x[i] << setw(wid) << y[i] << setw(wid) << spline(x[i]) << setw(wid) << y[i]-spline(x[i]) << std::endl;. }. ```. With the proposed changes, function and spline values agree, diff = 0. Loss in precision by writing double values with an insufficient number of digits in root has been observed before, see https://sft.its.cern.ch/jira/browse/ROOT-8844. Maybe a good idea to check this more generally. Cheers, Helmut Burkhardt. [TSpline.cxx.zip](https://github.com/root-project/root/files/10480476/TSpline.cxx.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12091
https://github.com/root-project/root/issues/12091:1176,security,Loss,Loss,1176,"TSpline SaveAs not using equidistant and loss of precision; The TSpline3::SaveAs and TSpline5::SaveAs methods have two types of bugs. 1). if (klow > fNp-1) klow = fNp-1 is generally true such that equidistant knots are not used. if (klow > fNp-1) klow = fNp-1 looks ok, to be used in lines 931, 1737. 2) double constants are written with %g resulting in a major loss of precision. Proposed fix :. replace %g with %.17g. replace char numb[20] --> char numb[30]. replace snprintf(numb,20, --> snprintf(numb,30,. Can be checked as follows :. ```. const int n=11;. Double_t x[n],y[n];. for(int i=0; i<n; ++i) {. x[i]=i*0.1;. y[i]=sqrt(2.)*pow(x[i],2); // simple quadratic polynomial. }. //TSpline3* s=new TSpline3(""spline"", 0, 1, y, n);. TSpline5* s=new TSpline5(""spline"", 0, 1, y, n);. s->SaveAs(""spline.cc"");. int prec=15,wid=prec+7;. .L spline.cc. std::cout << "" x"" << setw(wid) << ""y"" << setw(wid) << ""spline"" << setw(wid) << ""diff"" << '\n';. for(int i=0; i<n; ++i) {. std::cout << setw(5) << x[i] << setw(wid) << y[i] << setw(wid) << spline(x[i]) << setw(wid) << y[i]-spline(x[i]) << std::endl;. }. ```. With the proposed changes, function and spline values agree, diff = 0. Loss in precision by writing double values with an insufficient number of digits in root has been observed before, see https://sft.its.cern.ch/jira/browse/ROOT-8844. Maybe a good idea to check this more generally. Cheers, Helmut Burkhardt. [TSpline.cxx.zip](https://github.com/root-project/root/files/10480476/TSpline.cxx.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12091
https://github.com/root-project/root/issues/12091:651,testability,simpl,simple,651,"TSpline SaveAs not using equidistant and loss of precision; The TSpline3::SaveAs and TSpline5::SaveAs methods have two types of bugs. 1). if (klow > fNp-1) klow = fNp-1 is generally true such that equidistant knots are not used. if (klow > fNp-1) klow = fNp-1 looks ok, to be used in lines 931, 1737. 2) double constants are written with %g resulting in a major loss of precision. Proposed fix :. replace %g with %.17g. replace char numb[20] --> char numb[30]. replace snprintf(numb,20, --> snprintf(numb,30,. Can be checked as follows :. ```. const int n=11;. Double_t x[n],y[n];. for(int i=0; i<n; ++i) {. x[i]=i*0.1;. y[i]=sqrt(2.)*pow(x[i],2); // simple quadratic polynomial. }. //TSpline3* s=new TSpline3(""spline"", 0, 1, y, n);. TSpline5* s=new TSpline5(""spline"", 0, 1, y, n);. s->SaveAs(""spline.cc"");. int prec=15,wid=prec+7;. .L spline.cc. std::cout << "" x"" << setw(wid) << ""y"" << setw(wid) << ""spline"" << setw(wid) << ""diff"" << '\n';. for(int i=0; i<n; ++i) {. std::cout << setw(5) << x[i] << setw(wid) << y[i] << setw(wid) << spline(x[i]) << setw(wid) << y[i]-spline(x[i]) << std::endl;. }. ```. With the proposed changes, function and spline values agree, diff = 0. Loss in precision by writing double values with an insufficient number of digits in root has been observed before, see https://sft.its.cern.ch/jira/browse/ROOT-8844. Maybe a good idea to check this more generally. Cheers, Helmut Burkhardt. [TSpline.cxx.zip](https://github.com/root-project/root/files/10480476/TSpline.cxx.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12091
https://github.com/root-project/root/issues/12091:1274,testability,observ,observed,1274,"TSpline SaveAs not using equidistant and loss of precision; The TSpline3::SaveAs and TSpline5::SaveAs methods have two types of bugs. 1). if (klow > fNp-1) klow = fNp-1 is generally true such that equidistant knots are not used. if (klow > fNp-1) klow = fNp-1 looks ok, to be used in lines 931, 1737. 2) double constants are written with %g resulting in a major loss of precision. Proposed fix :. replace %g with %.17g. replace char numb[20] --> char numb[30]. replace snprintf(numb,20, --> snprintf(numb,30,. Can be checked as follows :. ```. const int n=11;. Double_t x[n],y[n];. for(int i=0; i<n; ++i) {. x[i]=i*0.1;. y[i]=sqrt(2.)*pow(x[i],2); // simple quadratic polynomial. }. //TSpline3* s=new TSpline3(""spline"", 0, 1, y, n);. TSpline5* s=new TSpline5(""spline"", 0, 1, y, n);. s->SaveAs(""spline.cc"");. int prec=15,wid=prec+7;. .L spline.cc. std::cout << "" x"" << setw(wid) << ""y"" << setw(wid) << ""spline"" << setw(wid) << ""diff"" << '\n';. for(int i=0; i<n; ++i) {. std::cout << setw(5) << x[i] << setw(wid) << y[i] << setw(wid) << spline(x[i]) << setw(wid) << y[i]-spline(x[i]) << std::endl;. }. ```. With the proposed changes, function and spline values agree, diff = 0. Loss in precision by writing double values with an insufficient number of digits in root has been observed before, see https://sft.its.cern.ch/jira/browse/ROOT-8844. Maybe a good idea to check this more generally. Cheers, Helmut Burkhardt. [TSpline.cxx.zip](https://github.com/root-project/root/files/10480476/TSpline.cxx.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12091
https://github.com/root-project/root/issues/12091:651,usability,simpl,simple,651,"TSpline SaveAs not using equidistant and loss of precision; The TSpline3::SaveAs and TSpline5::SaveAs methods have two types of bugs. 1). if (klow > fNp-1) klow = fNp-1 is generally true such that equidistant knots are not used. if (klow > fNp-1) klow = fNp-1 looks ok, to be used in lines 931, 1737. 2) double constants are written with %g resulting in a major loss of precision. Proposed fix :. replace %g with %.17g. replace char numb[20] --> char numb[30]. replace snprintf(numb,20, --> snprintf(numb,30,. Can be checked as follows :. ```. const int n=11;. Double_t x[n],y[n];. for(int i=0; i<n; ++i) {. x[i]=i*0.1;. y[i]=sqrt(2.)*pow(x[i],2); // simple quadratic polynomial. }. //TSpline3* s=new TSpline3(""spline"", 0, 1, y, n);. TSpline5* s=new TSpline5(""spline"", 0, 1, y, n);. s->SaveAs(""spline.cc"");. int prec=15,wid=prec+7;. .L spline.cc. std::cout << "" x"" << setw(wid) << ""y"" << setw(wid) << ""spline"" << setw(wid) << ""diff"" << '\n';. for(int i=0; i<n; ++i) {. std::cout << setw(5) << x[i] << setw(wid) << y[i] << setw(wid) << spline(x[i]) << setw(wid) << y[i]-spline(x[i]) << std::endl;. }. ```. With the proposed changes, function and spline values agree, diff = 0. Loss in precision by writing double values with an insufficient number of digits in root has been observed before, see https://sft.its.cern.ch/jira/browse/ROOT-8844. Maybe a good idea to check this more generally. Cheers, Helmut Burkhardt. [TSpline.cxx.zip](https://github.com/root-project/root/files/10480476/TSpline.cxx.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12091
https://github.com/root-project/root/pull/12092:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 7; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12089. 2. https://github.com/root-project/root/pull/12022. Commits 3 and 4 that have not been backported yet, as the next PR in this list depends on that change (everything is backported from that PR now except the last commit). 4. https://github.com/root-project/root/pull/12079. 5. https://github.com/root-project/root/pull/12040. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12092
https://github.com/root-project/root/pull/12092:164,deployability,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 7; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12089. 2. https://github.com/root-project/root/pull/12022. Commits 3 and 4 that have not been backported yet, as the next PR in this list depends on that change (everything is backported from that PR now except the last commit). 4. https://github.com/root-project/root/pull/12079. 5. https://github.com/root-project/root/pull/12040. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12092
https://github.com/root-project/root/pull/12092:426,deployability,depend,depends,426,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 7; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12089. 2. https://github.com/root-project/root/pull/12022. Commits 3 and 4 that have not been backported yet, as the next PR in this list depends on that change (everything is backported from that PR now except the last commit). 4. https://github.com/root-project/root/pull/12079. 5. https://github.com/root-project/root/pull/12040. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12092
https://github.com/root-project/root/pull/12092:426,integrability,depend,depends,426,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 7; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12089. 2. https://github.com/root-project/root/pull/12022. Commits 3 and 4 that have not been backported yet, as the next PR in this list depends on that change (everything is backported from that PR now except the last commit). 4. https://github.com/root-project/root/pull/12079. 5. https://github.com/root-project/root/pull/12040. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12092
https://github.com/root-project/root/pull/12092:426,modifiability,depend,depends,426,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 7; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12089. 2. https://github.com/root-project/root/pull/12022. Commits 3 and 4 that have not been backported yet, as the next PR in this list depends on that change (everything is backported from that PR now except the last commit). 4. https://github.com/root-project/root/pull/12079. 5. https://github.com/root-project/root/pull/12040. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12092
https://github.com/root-project/root/pull/12092:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 7; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12089. 2. https://github.com/root-project/root/pull/12022. Commits 3 and 4 that have not been backported yet, as the next PR in this list depends on that change (everything is backported from that PR now except the last commit). 4. https://github.com/root-project/root/pull/12079. 5. https://github.com/root-project/root/pull/12040. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12092
https://github.com/root-project/root/pull/12092:164,safety,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 7; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12089. 2. https://github.com/root-project/root/pull/12022. Commits 3 and 4 that have not been backported yet, as the next PR in this list depends on that change (everything is backported from that PR now except the last commit). 4. https://github.com/root-project/root/pull/12079. 5. https://github.com/root-project/root/pull/12040. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12092
https://github.com/root-project/root/pull/12092:426,safety,depend,depends,426,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 7; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12089. 2. https://github.com/root-project/root/pull/12022. Commits 3 and 4 that have not been backported yet, as the next PR in this list depends on that change (everything is backported from that PR now except the last commit). 4. https://github.com/root-project/root/pull/12079. 5. https://github.com/root-project/root/pull/12040. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12092
https://github.com/root-project/root/pull/12092:492,safety,except,except,492,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 7; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12089. 2. https://github.com/root-project/root/pull/12022. Commits 3 and 4 that have not been backported yet, as the next PR in this list depends on that change (everything is backported from that PR now except the last commit). 4. https://github.com/root-project/root/pull/12079. 5. https://github.com/root-project/root/pull/12040. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12092
https://github.com/root-project/root/pull/12092:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 7; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12089. 2. https://github.com/root-project/root/pull/12022. Commits 3 and 4 that have not been backported yet, as the next PR in this list depends on that change (everything is backported from that PR now except the last commit). 4. https://github.com/root-project/root/pull/12079. 5. https://github.com/root-project/root/pull/12040. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12092
https://github.com/root-project/root/pull/12092:164,security,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 7; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12089. 2. https://github.com/root-project/root/pull/12022. Commits 3 and 4 that have not been backported yet, as the next PR in this list depends on that change (everything is backported from that PR now except the last commit). 4. https://github.com/root-project/root/pull/12079. 5. https://github.com/root-project/root/pull/12040. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12092
https://github.com/root-project/root/pull/12092:426,testability,depend,depends,426,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 7; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12089. 2. https://github.com/root-project/root/pull/12022. Commits 3 and 4 that have not been backported yet, as the next PR in this list depends on that change (everything is backported from that PR now except the last commit). 4. https://github.com/root-project/root/pull/12079. 5. https://github.com/root-project/root/pull/12040. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12092
https://github.com/root-project/root/pull/12096:493,availability,slo,slow-down,493,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:55,deployability,upgrad,upgrade,55,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:74,deployability,upgrad,upgrade,74,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:401,deployability,upgrad,upgrade,401,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:765,deployability,updat,updated,765,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:310,energy efficiency,reduc,reduces,310,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:55,modifiability,upgrad,upgrade,55,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:74,modifiability,upgrad,upgrade,74,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:401,modifiability,upgrad,upgrade,401,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:493,reliability,slo,slow-down,493,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:735,safety,test,tested,735,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:765,safety,updat,updated,765,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:101,security,modif,modifying,101,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:291,security,access,access,291,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:765,security,updat,updated,765,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:148,testability,Simpl,SimpleCompiler,148,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:190,testability,Simpl,SimpleCompiler,190,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:735,testability,test,tested,735,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:148,usability,Simpl,SimpleCompiler,148,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:190,usability,Simpl,SimpleCompiler,190,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12096:585,usability,confirm,confirmed,585,"v6.28: [cling] Re-enable CodeGen-OptLevel after llvm13 upgrade:; With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by. - using a SimpleCompiler that uses IncrementalJIT::TM;. - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to. - before llvm upgrade: 2.69s. - llvm13, without this commit: ??? - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12096
https://github.com/root-project/root/pull/12097:77,deployability,build,build,77,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:106,deployability,modul,modules,106,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:611,deployability,modul,module,611,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:668,deployability,modul,module,668,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:714,deployability,modul,module,714,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:781,deployability,modul,module,781,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:848,deployability,modul,module,848,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:929,deployability,modul,module,929,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1018,deployability,modul,module,1018,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1095,deployability,modul,module,1095,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1175,deployability,modul,module,1175,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1262,deployability,modul,module,1262,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1473,deployability,updat,updated,1473,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:86,energy efficiency,Core,Core,86,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:187,energy efficiency,Core,Core,187,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:555,energy efficiency,Core,Core,555,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:619,energy efficiency,Core,Core,619,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:106,modifiability,modul,modules,106,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:611,modifiability,modul,module,611,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:668,modifiability,modul,module,668,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:714,modifiability,modul,module,714,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:781,modifiability,modul,module,781,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:848,modifiability,modul,module,848,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:929,modifiability,modul,module,929,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1018,modifiability,modul,module,1018,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1095,modifiability,modul,module,1095,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1175,modifiability,modul,module,1175,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1262,modifiability,modul,module,1262,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:24,safety,compl,complain,24,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:106,safety,modul,modules,106,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:139,safety,compl,complaining,139,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:256,safety,compl,complain,256,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:611,safety,modul,module,611,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:668,safety,modul,module,668,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:714,safety,modul,module,714,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:781,safety,modul,module,781,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:848,safety,modul,module,848,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:929,safety,modul,module,929,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1018,safety,modul,module,1018,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1095,safety,modul,module,1095,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1175,safety,modul,module,1175,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1262,safety,modul,module,1262,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1443,safety,test,tested,1443,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1473,safety,updat,updated,1473,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:24,security,compl,complain,24,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:139,security,compl,complaining,139,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:256,security,compl,complain,256,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1473,security,updat,updated,1473,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:243,testability,Simpl,Simply,243,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:1443,testability,test,tested,1443,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12097:243,usability,Simpl,Simply,243,"v6.28: [dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5cf047445a952108763adc66908a17649ba). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12097
https://github.com/root-project/root/pull/12098:76,deployability,build,build,76,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:105,deployability,modul,modules,105,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:614,deployability,modul,module,614,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:671,deployability,modul,module,671,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:717,deployability,modul,module,717,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:784,deployability,modul,module,784,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:851,deployability,modul,module,851,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:932,deployability,modul,module,932,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1021,deployability,modul,module,1021,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1098,deployability,modul,module,1098,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1178,deployability,modul,module,1178,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1265,deployability,modul,module,1265,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1441,deployability,updat,updated,1441,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:85,energy efficiency,Core,Core,85,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:186,energy efficiency,Core,Core,186,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:558,energy efficiency,Core,Core,558,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:622,energy efficiency,Core,Core,622,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:105,modifiability,modul,modules,105,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:614,modifiability,modul,module,614,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:671,modifiability,modul,module,671,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:717,modifiability,modul,module,717,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:784,modifiability,modul,module,784,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:851,modifiability,modul,module,851,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:932,modifiability,modul,module,932,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1021,modifiability,modul,module,1021,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1098,modifiability,modul,module,1098,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1178,modifiability,modul,module,1178,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1265,modifiability,modul,module,1265,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:23,safety,compl,complain,23,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:105,safety,modul,modules,105,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:138,safety,compl,complaining,138,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:256,safety,compl,complain,256,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:614,safety,modul,module,614,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:671,safety,modul,module,671,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:717,safety,modul,module,717,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:784,safety,modul,module,784,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:851,safety,modul,module,851,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:932,safety,modul,module,932,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1021,safety,modul,module,1021,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1098,safety,modul,module,1098,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1178,safety,modul,module,1178,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1265,safety,modul,module,1265,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1411,safety,test,tested,1411,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1441,safety,updat,updated,1441,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:23,security,compl,complain,23,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:138,security,compl,complaining,138,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:256,security,compl,complain,256,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1441,security,updat,updated,1441,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:243,testability,Simpl,Simply,243,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:1411,testability,test,tested,1411,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12098:243,usability,Simpl,Simply,243,"[v628][dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm,. despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers. are actually in a byproduct. In the same vein, do not forcefully include. them in teh pcm, as they are already included in the byproduct which should. be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```. (cherry picked from commit a12ef5c)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12098
https://github.com/root-project/root/pull/12099:66,deployability,build,build,66,"v6.28: [rmkdepend] Use snprintf against warning (GCC 12.2):; ```. build/rmkdepend/include.c:306:28: warning: ‘%s’ directive writing up to 8190 bytes into a region of size between 1 and 8191 [-Wformat-overflow=]. 306 | sprintf(path, ""%s/%s"", *pp, include);. | ^~. ```. Apple needs to be told to expose snprintf... (cherry picked from commit 19909eb71a5ce5a066ca4588e62ff012dec0bb7c). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12099
https://github.com/root-project/root/pull/12099:478,deployability,updat,updated,478,"v6.28: [rmkdepend] Use snprintf against warning (GCC 12.2):; ```. build/rmkdepend/include.c:306:28: warning: ‘%s’ directive writing up to 8190 bytes into a region of size between 1 and 8191 [-Wformat-overflow=]. 306 | sprintf(path, ""%s/%s"", *pp, include);. | ^~. ```. Apple needs to be told to expose snprintf... (cherry picked from commit 19909eb71a5ce5a066ca4588e62ff012dec0bb7c). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12099
https://github.com/root-project/root/pull/12099:448,safety,test,tested,448,"v6.28: [rmkdepend] Use snprintf against warning (GCC 12.2):; ```. build/rmkdepend/include.c:306:28: warning: ‘%s’ directive writing up to 8190 bytes into a region of size between 1 and 8191 [-Wformat-overflow=]. 306 | sprintf(path, ""%s/%s"", *pp, include);. | ^~. ```. Apple needs to be told to expose snprintf... (cherry picked from commit 19909eb71a5ce5a066ca4588e62ff012dec0bb7c). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12099
https://github.com/root-project/root/pull/12099:478,safety,updat,updated,478,"v6.28: [rmkdepend] Use snprintf against warning (GCC 12.2):; ```. build/rmkdepend/include.c:306:28: warning: ‘%s’ directive writing up to 8190 bytes into a region of size between 1 and 8191 [-Wformat-overflow=]. 306 | sprintf(path, ""%s/%s"", *pp, include);. | ^~. ```. Apple needs to be told to expose snprintf... (cherry picked from commit 19909eb71a5ce5a066ca4588e62ff012dec0bb7c). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12099
https://github.com/root-project/root/pull/12099:294,security,expos,expose,294,"v6.28: [rmkdepend] Use snprintf against warning (GCC 12.2):; ```. build/rmkdepend/include.c:306:28: warning: ‘%s’ directive writing up to 8190 bytes into a region of size between 1 and 8191 [-Wformat-overflow=]. 306 | sprintf(path, ""%s/%s"", *pp, include);. | ^~. ```. Apple needs to be told to expose snprintf... (cherry picked from commit 19909eb71a5ce5a066ca4588e62ff012dec0bb7c). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12099
https://github.com/root-project/root/pull/12099:478,security,updat,updated,478,"v6.28: [rmkdepend] Use snprintf against warning (GCC 12.2):; ```. build/rmkdepend/include.c:306:28: warning: ‘%s’ directive writing up to 8190 bytes into a region of size between 1 and 8191 [-Wformat-overflow=]. 306 | sprintf(path, ""%s/%s"", *pp, include);. | ^~. ```. Apple needs to be told to expose snprintf... (cherry picked from commit 19909eb71a5ce5a066ca4588e62ff012dec0bb7c). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12099
https://github.com/root-project/root/pull/12099:448,testability,test,tested,448,"v6.28: [rmkdepend] Use snprintf against warning (GCC 12.2):; ```. build/rmkdepend/include.c:306:28: warning: ‘%s’ directive writing up to 8190 bytes into a region of size between 1 and 8191 [-Wformat-overflow=]. 306 | sprintf(path, ""%s/%s"", *pp, include);. | ^~. ```. Apple needs to be told to expose snprintf... (cherry picked from commit 19909eb71a5ce5a066ca4588e62ff012dec0bb7c). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12099
https://github.com/root-project/root/pull/12100:298,deployability,updat,updated,298,"v628: Revert ""[cmake] Xcode 14 warns about -undefined dynamic_lookup; sim…; …ply suppress:"". See #11937. for why `-flat_namespace` is bad. This reverts commit a05d4be. (cherry picked from commit 0e03b6a)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12100
https://github.com/root-project/root/pull/12100:268,safety,test,tested,268,"v628: Revert ""[cmake] Xcode 14 warns about -undefined dynamic_lookup; sim…; …ply suppress:"". See #11937. for why `-flat_namespace` is bad. This reverts commit a05d4be. (cherry picked from commit 0e03b6a)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12100
https://github.com/root-project/root/pull/12100:298,safety,updat,updated,298,"v628: Revert ""[cmake] Xcode 14 warns about -undefined dynamic_lookup; sim…; …ply suppress:"". See #11937. for why `-flat_namespace` is bad. This reverts commit a05d4be. (cherry picked from commit 0e03b6a)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12100
https://github.com/root-project/root/pull/12100:298,security,updat,updated,298,"v628: Revert ""[cmake] Xcode 14 warns about -undefined dynamic_lookup; sim…; …ply suppress:"". See #11937. for why `-flat_namespace` is bad. This reverts commit a05d4be. (cherry picked from commit 0e03b6a)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12100
https://github.com/root-project/root/pull/12100:268,testability,test,tested,268,"v628: Revert ""[cmake] Xcode 14 warns about -undefined dynamic_lookup; sim…; …ply suppress:"". See #11937. for why `-flat_namespace` is bad. This reverts commit a05d4be. (cherry picked from commit 0e03b6a)# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12100
https://github.com/root-project/root/pull/12101:101,availability,slo,slow,101,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12101:194,deployability,build,build,194,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12101:208,deployability,build,build,208,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12101:518,deployability,updat,updated,518,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12101:229,performance,time,time,229,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12101:101,reliability,slo,slow,101,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12101:234,reliability,doe,does,234,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12101:488,safety,test,tested,488,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12101:518,safety,updat,updated,518,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12101:518,security,updat,updated,518,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12101:27,testability,assert,assertions,27,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12101:65,testability,verif,verifyPreservedAnalysis,65,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12101:135,testability,assert,assertions,135,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12101:341,testability,assert,asserts,341,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12101:488,testability,test,tested,488,"6.28: [cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12101
https://github.com/root-project/root/pull/12102:345,deployability,observ,observables,345,"Change `clang-format` style to have line breaks in c'tor initializer; We use the `clang-format` style of ROOT for all the new source files in RooFit, but some code looks pretty ugly. For example, here in the constructor of `RooNLLVarNer`:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL). : RooAbsReal(name, title), _pdf{""pdf"", ""pdf"", this, pdf}, _observables{getObs(pdf, observables)},. _isExtended{isExtended}, _binnedL{binnedL}, _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName),. true, false, true}, ... ```. Really not great to have all the elements in the constructor initializer list in one line. It's hard to read, there are weird line breaks, and if you only change one member it looks like you have changed everything. This commit suggests to have line breaks in the style instead, so from now on, it will look better:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL) true, false, true},. : RooAbsReal(name, title),. _pdf{""pdf"", ""pdf"", this, pdf},. _observables{getObs(pdf, observables)},. _isExtended{isExtended},. _binnedL{binnedL},. _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName), true, false, true},. ... ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12102
https://github.com/root-project/root/pull/12102:505,deployability,observ,observables,505,"Change `clang-format` style to have line breaks in c'tor initializer; We use the `clang-format` style of ROOT for all the new source files in RooFit, but some code looks pretty ugly. For example, here in the constructor of `RooNLLVarNer`:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL). : RooAbsReal(name, title), _pdf{""pdf"", ""pdf"", this, pdf}, _observables{getObs(pdf, observables)},. _isExtended{isExtended}, _binnedL{binnedL}, _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName),. true, false, true}, ... ```. Really not great to have all the elements in the constructor initializer list in one line. It's hard to read, there are weird line breaks, and if you only change one member it looks like you have changed everything. This commit suggests to have line breaks in the style instead, so from now on, it will look better:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL) true, false, true},. : RooAbsReal(name, title),. _pdf{""pdf"", ""pdf"", this, pdf},. _observables{getObs(pdf, observables)},. _isExtended{isExtended},. _binnedL{binnedL},. _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName), true, false, true},. ... ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12102
https://github.com/root-project/root/pull/12102:1086,deployability,observ,observables,1086,"Change `clang-format` style to have line breaks in c'tor initializer; We use the `clang-format` style of ROOT for all the new source files in RooFit, but some code looks pretty ugly. For example, here in the constructor of `RooNLLVarNer`:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL). : RooAbsReal(name, title), _pdf{""pdf"", ""pdf"", this, pdf}, _observables{getObs(pdf, observables)},. _isExtended{isExtended}, _binnedL{binnedL}, _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName),. true, false, true}, ... ```. Really not great to have all the elements in the constructor initializer list in one line. It's hard to read, there are weird line breaks, and if you only change one member it looks like you have changed everything. This commit suggests to have line breaks in the style instead, so from now on, it will look better:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL) true, false, true},. : RooAbsReal(name, title),. _pdf{""pdf"", ""pdf"", this, pdf},. _observables{getObs(pdf, observables)},. _isExtended{isExtended},. _binnedL{binnedL},. _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName), true, false, true},. ... ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12102
https://github.com/root-project/root/pull/12102:1268,deployability,observ,observables,1268,"Change `clang-format` style to have line breaks in c'tor initializer; We use the `clang-format` style of ROOT for all the new source files in RooFit, but some code looks pretty ugly. For example, here in the constructor of `RooNLLVarNer`:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL). : RooAbsReal(name, title), _pdf{""pdf"", ""pdf"", this, pdf}, _observables{getObs(pdf, observables)},. _isExtended{isExtended}, _binnedL{binnedL}, _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName),. true, false, true}, ... ```. Really not great to have all the elements in the constructor initializer list in one line. It's hard to read, there are weird line breaks, and if you only change one member it looks like you have changed everything. This commit suggests to have line breaks in the style instead, so from now on, it will look better:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL) true, false, true},. : RooAbsReal(name, title),. _pdf{""pdf"", ""pdf"", this, pdf},. _observables{getObs(pdf, observables)},. _isExtended{isExtended},. _binnedL{binnedL},. _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName), true, false, true},. ... ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12102
https://github.com/root-project/root/pull/12102:14,interoperability,format,format,14,"Change `clang-format` style to have line breaks in c'tor initializer; We use the `clang-format` style of ROOT for all the new source files in RooFit, but some code looks pretty ugly. For example, here in the constructor of `RooNLLVarNer`:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL). : RooAbsReal(name, title), _pdf{""pdf"", ""pdf"", this, pdf}, _observables{getObs(pdf, observables)},. _isExtended{isExtended}, _binnedL{binnedL}, _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName),. true, false, true}, ... ```. Really not great to have all the elements in the constructor initializer list in one line. It's hard to read, there are weird line breaks, and if you only change one member it looks like you have changed everything. This commit suggests to have line breaks in the style instead, so from now on, it will look better:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL) true, false, true},. : RooAbsReal(name, title),. _pdf{""pdf"", ""pdf"", this, pdf},. _observables{getObs(pdf, observables)},. _isExtended{isExtended},. _binnedL{binnedL},. _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName), true, false, true},. ... ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12102
https://github.com/root-project/root/pull/12102:88,interoperability,format,format,88,"Change `clang-format` style to have line breaks in c'tor initializer; We use the `clang-format` style of ROOT for all the new source files in RooFit, but some code looks pretty ugly. For example, here in the constructor of `RooNLLVarNer`:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL). : RooAbsReal(name, title), _pdf{""pdf"", ""pdf"", this, pdf}, _observables{getObs(pdf, observables)},. _isExtended{isExtended}, _binnedL{binnedL}, _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName),. true, false, true}, ... ```. Really not great to have all the elements in the constructor initializer list in one line. It's hard to read, there are weird line breaks, and if you only change one member it looks like you have changed everything. This commit suggests to have line breaks in the style instead, so from now on, it will look better:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL) true, false, true},. : RooAbsReal(name, title),. _pdf{""pdf"", ""pdf"", this, pdf},. _observables{getObs(pdf, observables)},. _isExtended{isExtended},. _binnedL{binnedL},. _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName), true, false, true},. ... ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12102
https://github.com/root-project/root/pull/12102:345,testability,observ,observables,345,"Change `clang-format` style to have line breaks in c'tor initializer; We use the `clang-format` style of ROOT for all the new source files in RooFit, but some code looks pretty ugly. For example, here in the constructor of `RooNLLVarNer`:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL). : RooAbsReal(name, title), _pdf{""pdf"", ""pdf"", this, pdf}, _observables{getObs(pdf, observables)},. _isExtended{isExtended}, _binnedL{binnedL}, _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName),. true, false, true}, ... ```. Really not great to have all the elements in the constructor initializer list in one line. It's hard to read, there are weird line breaks, and if you only change one member it looks like you have changed everything. This commit suggests to have line breaks in the style instead, so from now on, it will look better:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL) true, false, true},. : RooAbsReal(name, title),. _pdf{""pdf"", ""pdf"", this, pdf},. _observables{getObs(pdf, observables)},. _isExtended{isExtended},. _binnedL{binnedL},. _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName), true, false, true},. ... ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12102
https://github.com/root-project/root/pull/12102:505,testability,observ,observables,505,"Change `clang-format` style to have line breaks in c'tor initializer; We use the `clang-format` style of ROOT for all the new source files in RooFit, but some code looks pretty ugly. For example, here in the constructor of `RooNLLVarNer`:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL). : RooAbsReal(name, title), _pdf{""pdf"", ""pdf"", this, pdf}, _observables{getObs(pdf, observables)},. _isExtended{isExtended}, _binnedL{binnedL}, _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName),. true, false, true}, ... ```. Really not great to have all the elements in the constructor initializer list in one line. It's hard to read, there are weird line breaks, and if you only change one member it looks like you have changed everything. This commit suggests to have line breaks in the style instead, so from now on, it will look better:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL) true, false, true},. : RooAbsReal(name, title),. _pdf{""pdf"", ""pdf"", this, pdf},. _observables{getObs(pdf, observables)},. _isExtended{isExtended},. _binnedL{binnedL},. _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName), true, false, true},. ... ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12102
https://github.com/root-project/root/pull/12102:1086,testability,observ,observables,1086,"Change `clang-format` style to have line breaks in c'tor initializer; We use the `clang-format` style of ROOT for all the new source files in RooFit, but some code looks pretty ugly. For example, here in the constructor of `RooNLLVarNer`:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL). : RooAbsReal(name, title), _pdf{""pdf"", ""pdf"", this, pdf}, _observables{getObs(pdf, observables)},. _isExtended{isExtended}, _binnedL{binnedL}, _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName),. true, false, true}, ... ```. Really not great to have all the elements in the constructor initializer list in one line. It's hard to read, there are weird line breaks, and if you only change one member it looks like you have changed everything. This commit suggests to have line breaks in the style instead, so from now on, it will look better:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL) true, false, true},. : RooAbsReal(name, title),. _pdf{""pdf"", ""pdf"", this, pdf},. _observables{getObs(pdf, observables)},. _isExtended{isExtended},. _binnedL{binnedL},. _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName), true, false, true},. ... ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12102
https://github.com/root-project/root/pull/12102:1268,testability,observ,observables,1268,"Change `clang-format` style to have line breaks in c'tor initializer; We use the `clang-format` style of ROOT for all the new source files in RooFit, but some code looks pretty ugly. For example, here in the constructor of `RooNLLVarNer`:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL). : RooAbsReal(name, title), _pdf{""pdf"", ""pdf"", this, pdf}, _observables{getObs(pdf, observables)},. _isExtended{isExtended}, _binnedL{binnedL}, _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName),. true, false, true}, ... ```. Really not great to have all the elements in the constructor initializer list in one line. It's hard to read, there are weird line breaks, and if you only change one member it looks like you have changed everything. This commit suggests to have line breaks in the style instead, so from now on, it will look better:. ```C++. RooNLLVarNew::RooNLLVarNew(const char *name, const char *title, RooAbsPdf &pdf, RooArgSet const &observables,. bool isExtended, RooFit::OffsetMode offsetMode, bool binnedL) true, false, true},. : RooAbsReal(name, title),. _pdf{""pdf"", ""pdf"", this, pdf},. _observables{getObs(pdf, observables)},. _isExtended{isExtended},. _binnedL{binnedL},. _weightVar{""weightVar"", ""weightVar"", this, *dummyVar(weightVarName), true, false, true},. ... ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12102
https://github.com/root-project/root/pull/12103:63,integrability,pub,public,63,"[RF] xroofit improvements; This gets rid of the define private public etc ""hacks"" that we previously present. . There are a number of other improvements made in recent weeks too, these are all detailed in commits in the main xroofit repo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12103
https://github.com/root-project/root/pull/12103:75,security,hack,hacks,75,"[RF] xroofit improvements; This gets rid of the define private public etc ""hacks"" that we previously present. . There are a number of other improvements made in recent weeks too, these are all detailed in commits in the main xroofit repo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12103
https://github.com/root-project/root/pull/12105:184,deployability,Stack,Stack,184,"Reset function sections before JITting [v6.28]; This makes all functions end up in the same text section, which is important for TCling on macOS to catch exceptions from constructors: Stack unwinding requires information about program addresses to find out which objects to destroy and what code should be called to handle the exception. These addresses are relocated against a single __text section when loading the produced MachO binary, which breaks if the call sites of global constructors end up in a separate init section. Fixes ROOT-10703 and ROOT-10962. (cherry picked from commit 028fcca0fa76111877751df876cf13968be602f9). Backport of PR https://github.com/root-project/root/pull/12069",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12105
https://github.com/root-project/root/pull/12105:405,energy efficiency,load,loading,405,"Reset function sections before JITting [v6.28]; This makes all functions end up in the same text section, which is important for TCling on macOS to catch exceptions from constructors: Stack unwinding requires information about program addresses to find out which objects to destroy and what code should be called to handle the exception. These addresses are relocated against a single __text section when loading the produced MachO binary, which breaks if the call sites of global constructors end up in a separate init section. Fixes ROOT-10703 and ROOT-10962. (cherry picked from commit 028fcca0fa76111877751df876cf13968be602f9). Backport of PR https://github.com/root-project/root/pull/12069",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12105
https://github.com/root-project/root/pull/12105:405,performance,load,loading,405,"Reset function sections before JITting [v6.28]; This makes all functions end up in the same text section, which is important for TCling on macOS to catch exceptions from constructors: Stack unwinding requires information about program addresses to find out which objects to destroy and what code should be called to handle the exception. These addresses are relocated against a single __text section when loading the produced MachO binary, which breaks if the call sites of global constructors end up in a separate init section. Fixes ROOT-10703 and ROOT-10962. (cherry picked from commit 028fcca0fa76111877751df876cf13968be602f9). Backport of PR https://github.com/root-project/root/pull/12069",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12105
https://github.com/root-project/root/pull/12105:154,safety,except,exceptions,154,"Reset function sections before JITting [v6.28]; This makes all functions end up in the same text section, which is important for TCling on macOS to catch exceptions from constructors: Stack unwinding requires information about program addresses to find out which objects to destroy and what code should be called to handle the exception. These addresses are relocated against a single __text section when loading the produced MachO binary, which breaks if the call sites of global constructors end up in a separate init section. Fixes ROOT-10703 and ROOT-10962. (cherry picked from commit 028fcca0fa76111877751df876cf13968be602f9). Backport of PR https://github.com/root-project/root/pull/12069",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12105
https://github.com/root-project/root/pull/12105:327,safety,except,exception,327,"Reset function sections before JITting [v6.28]; This makes all functions end up in the same text section, which is important for TCling on macOS to catch exceptions from constructors: Stack unwinding requires information about program addresses to find out which objects to destroy and what code should be called to handle the exception. These addresses are relocated against a single __text section when loading the produced MachO binary, which breaks if the call sites of global constructors end up in a separate init section. Fixes ROOT-10703 and ROOT-10962. (cherry picked from commit 028fcca0fa76111877751df876cf13968be602f9). Backport of PR https://github.com/root-project/root/pull/12069",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12105
https://github.com/root-project/root/pull/12106:243,availability,cluster,clusters,243,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:964,availability,error,error,964,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1341,availability,error,error,1341,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:178,deployability,automat,automatic,178,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:243,deployability,cluster,clusters,243,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:480,deployability,contain,container,480,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:604,deployability,automat,automatically,604,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:631,deployability,contain,containers,631,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:862,deployability,contain,container,862,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1084,deployability,api,api,1084,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1088,deployability,contain,container,1088,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1179,deployability,fail,failed,1179,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1302,deployability,contain,container,1302,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1437,deployability,updat,updated,1437,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:769,energy efficiency,model,models,769,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:985,energy efficiency,current,currently,985,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:526,integrability,messag,messages,526,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:970,integrability,messag,message,970,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1084,integrability,api,api,1084,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:415,interoperability,share,shared,415,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:526,interoperability,messag,messages,526,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:749,interoperability,specif,specify,749,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:970,interoperability,messag,message,970,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1084,interoperability,api,api,1084,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:780,modifiability,variab,variables,780,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:964,performance,error,error,964,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1341,performance,error,error,1341,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:514,reliability,diagno,diagnostics,514,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1048,reliability,diagno,diagnostics,1048,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1179,reliability,fail,failed,1179,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:22,safety,test,test,22,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:110,safety,Test,Test,110,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:157,safety,test,test,157,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:222,safety,test,tests,222,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:312,safety,test,test,312,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:355,safety,test,tests,355,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:547,safety,Test,TestSupport,547,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:663,safety,test,tests,663,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:690,safety,compl,completed,690,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:964,safety,error,error,964,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1038,safety,except,exception,1038,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1157,safety,test,test-multiple-ntuples,1157,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1341,safety,error,error,1341,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1407,safety,test,tested,1407,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1437,safety,updat,updated,1437,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:690,security,compl,completed,690,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:769,security,model,models,769,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1437,security,updat,updated,1437,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:22,testability,test,test,22,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:110,testability,Test,Test,110,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:157,testability,test,test,157,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:178,testability,automat,automatic,178,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:217,testability,unit,unit,217,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:222,testability,test,tests,222,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:312,testability,test,test,312,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:355,testability,test,tests,355,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:514,testability,diagno,diagnostics,514,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:547,testability,Test,TestSupport,547,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:604,testability,automat,automatically,604,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:658,testability,unit,unit,658,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:663,testability,test,tests,663,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:909,testability,mock,mock,909,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1048,testability,diagno,diagnostics,1048,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1157,testability,test,test-multiple-ntuples,1157,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1407,testability,test,tested,1407,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:964,usability,error,error,964,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12106:1341,usability,error,error,1341,"[ntuple,daos] Improve test suite with fixture class and teardown functionality; This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. . - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. . - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed. - Replaces some duplicated string literals that specify ntuples and models for variables. - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12106
https://github.com/root-project/root/pull/12109:951,availability,error,error,951,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:493,deployability,manag,manages,493,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:1223,deployability,updat,updated,1223,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:493,energy efficiency,manag,manages,493,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:21,integrability,wrap,wrappers,21,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:95,integrability,wrap,wrappers,95,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:301,integrability,Wrap,Wraps,301,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:443,integrability,wrap,wrapper,443,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:791,integrability,wrap,wrapper,791,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:1066,integrability,wrap,wrapper,1066,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:21,interoperability,wrapper,wrappers,21,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:45,interoperability,specif,specific,45,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:95,interoperability,wrapper,wrappers,95,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:125,interoperability,specif,specific,125,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:443,interoperability,wrapper,wrapper,443,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:791,interoperability,wrapper,wrapper,791,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:845,interoperability,specif,specific,845,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:1066,interoperability,wrapper,wrapper,1066,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:181,modifiability,layer,layer,181,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:914,modifiability,layer,layer,914,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:1144,modifiability,layer,layer,1144,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:951,performance,error,error,951,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:493,safety,manag,manages,493,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:951,safety,error,error,951,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:1172,safety,test,tested,1172,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:1223,safety,updat,updated,1223,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:107,security,obfusc,obfuscate,107,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:580,security,expos,exposes,580,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:823,security,obfusc,obfuscate,823,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:1223,security,updat,updated,1223,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:1172,testability,test,tested,1172,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/pull/12109:951,usability,error,error,951,"[ntuple,daos] Create wrappers around backend-specific structures; This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it. - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend. - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores. - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`. - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12109
https://github.com/root-project/root/issues/12110:12,availability,failur,failure,12,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:499,availability,error,error,499,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1148,availability,error,error,1148,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1502,availability,error,error,1502,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1805,availability,error,error,1805,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:12,deployability,fail,failure,12,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:39,deployability,patch,patches,39,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:99,deployability,build,build,99,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:127,deployability,patch,patches,127,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:190,deployability,patch,patches,190,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:288,deployability,stack,stacktrace,288,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:366,deployability,BUILD,BUILD,366,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:747,deployability,BUILD,BUILD,747,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1015,deployability,BUILD,BUILD,1015,"e in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1369,deployability,BUILD,BUILD,1369,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1672,deployability,BUILD,BUILD,1672,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1915,deployability,build,build,1915,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:12,performance,failur,failure,12,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:499,performance,error,error,499,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1148,performance,error,error,1148,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1502,performance,error,error,1502,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1805,performance,error,error,1805,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:12,reliability,fail,failure,12,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:207,reliability,doe,does,207,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:590,reliability,doe,does,590,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:39,safety,patch,patches,39,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:127,safety,patch,patches,127,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:190,safety,patch,patches,190,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:347,safety,test,tests,347,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:353,safety,test,testBuildDir,353,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:499,safety,error,error,499,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:728,safety,test,tests,728,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:734,safety,test,testBuildDir,734,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:996,safety,test,tests,996,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1002,safety,test,testBuildDir,1002,"ion failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1148,safety,error,error,1148,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1350,safety,test,tests,1350,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1356,safety,test,testBuildDir,1356,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1502,safety,error,error,1502,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1653,safety,test,tests,1653,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1659,safety,test,testBuildDir,1659,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1805,safety,error,error,1805,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:39,security,patch,patches,39,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:127,security,patch,patches,127,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:190,security,patch,patches,190,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:347,testability,test,tests,347,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:353,testability,test,testBuildDir,353,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:728,testability,test,tests,728,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:734,testability,test,testBuildDir,734,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:996,testability,test,tests,996,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1002,testability,test,testBuildDir,1002,"ion failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1350,testability,test,tests,1350,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1356,testability,test,testBuildDir,1356,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1653,testability,test,tests,1653,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1659,testability,test,testBuildDir,1659,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:499,usability,error,error,499,"Compilation failure in branch v6-26-00-patches with gcc11, el8 and amd64; Hello,. We are trying to build root branch [v6-26-00-patches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1148,usability,error,error,1148,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1502,usability,error,error,1502,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/issues/12110:1805,usability,error,error,1805,"tches](https://github.com/root-project/root/compare/v6-26-00-patches), but it does not compile after commit 80c1ab6b6dab02c46d8cc66262686fd718b57ece. Here the stacktrace:. ```. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:184:16: error: 'std::string TDirectoryLevelIter::GetContent(const string&)' marked 'override', but does not override. 184 | std::string GetContent(const std::string &kind) override. | ^~~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx: In member function 'std::string TDirectoryLevelIter::GetContent(const string&)':. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:11: error: 'GetContentKind' was not declared in this scope; did you mean 'GetContent'? 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~~~~~~. | GetContent. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:186:35: error: 'kFileName' was not declared in this scope. 186 | if (GetContentKind(kind) == kFileName). | ^~~~~~~~~. /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.26.11-214c85d364498a3e137a3783af2e7b69/root-6.26.11/gui/browsable/src/TDirectoryElement.cxx:187:17: error: 'fFileName' was not declared in this scope. 187 | return fFileName;. | ^~~~~~~~~. ```. It successfully build up to commit https://github.com/root-project/root/commit/58c6a86fbe840a0f7fdd95d710755e925300120f. We are targeting `el8`, `amd64` and `gcc11`. Could you please have a look? Thanks,. Andrea. FYI, @smuzaffar .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12110
https://github.com/root-project/root/pull/12111:202,deployability,upgrad,upgrades,202,"[webcanvas] support `TCutG` in histogram draw options; * Can be used with and without drawing of `TCutG` on the pad. * Provide `h2_cut.C` tutorial. * Latest JSROOT, which also includes three.mjs/d3.mjs upgrades",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12111
https://github.com/root-project/root/pull/12111:41,energy efficiency,draw,draw,41,"[webcanvas] support `TCutG` in histogram draw options; * Can be used with and without drawing of `TCutG` on the pad. * Provide `h2_cut.C` tutorial. * Latest JSROOT, which also includes three.mjs/d3.mjs upgrades",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12111
https://github.com/root-project/root/pull/12111:86,energy efficiency,draw,drawing,86,"[webcanvas] support `TCutG` in histogram draw options; * Can be used with and without drawing of `TCutG` on the pad. * Provide `h2_cut.C` tutorial. * Latest JSROOT, which also includes three.mjs/d3.mjs upgrades",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12111
https://github.com/root-project/root/pull/12111:202,modifiability,upgrad,upgrades,202,"[webcanvas] support `TCutG` in histogram draw options; * Can be used with and without drawing of `TCutG` on the pad. * Provide `h2_cut.C` tutorial. * Latest JSROOT, which also includes three.mjs/d3.mjs upgrades",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12111
https://github.com/root-project/root/pull/12111:12,usability,support,support,12,"[webcanvas] support `TCutG` in histogram draw options; * Can be used with and without drawing of `TCutG` on the pad. * Provide `h2_cut.C` tutorial. * Latest JSROOT, which also includes three.mjs/d3.mjs upgrades",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12111
https://github.com/root-project/root/pull/12112:187,deployability,instal,install,187,"[skip-ci] Add ROOT CI; # This Pull request:. Is a recreation of https://github.com/root-project/root/pull/12063 because I could not re-open it. Commit quality is better, Windows and Unix install script are combined, and rebase logic is better. Let me know if I should still squash everything.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12112
https://github.com/root-project/root/pull/12112:227,deployability,log,logic,227,"[skip-ci] Add ROOT CI; # This Pull request:. Is a recreation of https://github.com/root-project/root/pull/12063 because I could not re-open it. Commit quality is better, Windows and Unix install script are combined, and rebase logic is better. Let me know if I should still squash everything.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12112
https://github.com/root-project/root/pull/12112:227,safety,log,logic,227,"[skip-ci] Add ROOT CI; # This Pull request:. Is a recreation of https://github.com/root-project/root/pull/12063 because I could not re-open it. Commit quality is better, Windows and Unix install script are combined, and rebase logic is better. Let me know if I should still squash everything.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12112
https://github.com/root-project/root/pull/12112:227,security,log,logic,227,"[skip-ci] Add ROOT CI; # This Pull request:. Is a recreation of https://github.com/root-project/root/pull/12063 because I could not re-open it. Commit quality is better, Windows and Unix install script are combined, and rebase logic is better. Let me know if I should still squash everything.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12112
https://github.com/root-project/root/pull/12112:227,testability,log,logic,227,"[skip-ci] Add ROOT CI; # This Pull request:. Is a recreation of https://github.com/root-project/root/pull/12063 because I could not re-open it. Commit quality is better, Windows and Unix install script are combined, and rebase logic is better. Let me know if I should still squash everything.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12112
https://github.com/root-project/root/pull/12114:14,deployability,version,version,14,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:69,deployability,version,version,69,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:209,deployability,version,version,209,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:271,deployability,version,version,271,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:405,deployability,Build,BuildCheck,405,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:520,deployability,version,version,520,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:590,deployability,updat,update,590,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:601,deployability,version,version,601,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:825,deployability,version,version,825,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:892,deployability,version,version,892,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:673,energy efficiency,current,current,673,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:14,integrability,version,version,14,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:69,integrability,version,version,69,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:209,integrability,version,version,209,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:271,integrability,version,version,271,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:520,integrability,version,version,520,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:601,integrability,version,version,601,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:825,integrability,version,version,825,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:892,integrability,version,version,892,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:14,modifiability,version,version,14,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:69,modifiability,version,version,69,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:209,modifiability,version,version,209,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:271,modifiability,version,version,271,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:520,modifiability,version,version,520,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:601,modifiability,version,version,601,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:825,modifiability,version,version,825,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:892,modifiability,version,version,892,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:878,performance,memor,memory,878,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:590,safety,updat,update,590,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:569,security,checksum,checksum,569,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:590,security,updat,update,590,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12114:878,usability,memor,memory,878,"[RF] Increase version number of `RooRealVar`; In ecd98632, the class version of the `RooAbsArg` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::BuildCheck>:. The StreamerInfo of class RooRealVar read from file toyws/WS-VHbb-STXS_mu_toy_new.root. has the same version (=8) as the active class but a different checksum. You should update the version to ClassDef(RooRealVar,9). Do not try to write objects with the current class definition,. the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 8 of class 'RooRealVar' differs from. the in-memory layout version 8:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12114
https://github.com/root-project/root/pull/12115:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 8; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12114. 2. https://github.com/root-project/root/pull/12066. 3. https://github.com/root-project/root/pull/12001. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12115
https://github.com/root-project/root/pull/12115:164,deployability,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 8; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12114. 2. https://github.com/root-project/root/pull/12066. 3. https://github.com/root-project/root/pull/12001. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12115
https://github.com/root-project/root/pull/12115:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 8; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12114. 2. https://github.com/root-project/root/pull/12066. 3. https://github.com/root-project/root/pull/12001. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12115
https://github.com/root-project/root/pull/12115:164,safety,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 8; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12114. 2. https://github.com/root-project/root/pull/12066. 3. https://github.com/root-project/root/pull/12001. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12115
https://github.com/root-project/root/pull/12115:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 8; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12114. 2. https://github.com/root-project/root/pull/12066. 3. https://github.com/root-project/root/pull/12001. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12115
https://github.com/root-project/root/pull/12115:164,security,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 8; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12114. 2. https://github.com/root-project/root/pull/12066. 3. https://github.com/root-project/root/pull/12001. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12115
https://github.com/root-project/root/issues/12116:8,availability,consist,consistency,8,Improve consistency in cling::Value; Sometimes we set the memory of `cling::Value` using an interface which does not capture well the type information. See https://github.com/root-project/root/pull/11252/files#r991306302.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12116
https://github.com/root-project/root/issues/12116:92,integrability,interfac,interface,92,Improve consistency in cling::Value; Sometimes we set the memory of `cling::Value` using an interface which does not capture well the type information. See https://github.com/root-project/root/pull/11252/files#r991306302.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12116
https://github.com/root-project/root/issues/12116:92,interoperability,interfac,interface,92,Improve consistency in cling::Value; Sometimes we set the memory of `cling::Value` using an interface which does not capture well the type information. See https://github.com/root-project/root/pull/11252/files#r991306302.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12116
https://github.com/root-project/root/issues/12116:92,modifiability,interfac,interface,92,Improve consistency in cling::Value; Sometimes we set the memory of `cling::Value` using an interface which does not capture well the type information. See https://github.com/root-project/root/pull/11252/files#r991306302.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12116
https://github.com/root-project/root/issues/12116:58,performance,memor,memory,58,Improve consistency in cling::Value; Sometimes we set the memory of `cling::Value` using an interface which does not capture well the type information. See https://github.com/root-project/root/pull/11252/files#r991306302.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12116
https://github.com/root-project/root/issues/12116:108,reliability,doe,does,108,Improve consistency in cling::Value; Sometimes we set the memory of `cling::Value` using an interface which does not capture well the type information. See https://github.com/root-project/root/pull/11252/files#r991306302.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12116
https://github.com/root-project/root/issues/12116:8,usability,consist,consistency,8,Improve consistency in cling::Value; Sometimes we set the memory of `cling::Value` using an interface which does not capture well the type information. See https://github.com/root-project/root/pull/11252/files#r991306302.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12116
https://github.com/root-project/root/issues/12116:58,usability,memor,memory,58,Improve consistency in cling::Value; Sometimes we set the memory of `cling::Value` using an interface which does not capture well the type information. See https://github.com/root-project/root/pull/11252/files#r991306302.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12116
https://github.com/root-project/root/pull/12117:8,deployability,patch,patches,8,"Migrate patches to LLVM monorepo; Add GitHub workflow to diff copy of LLVM and Clang, so we (hopefully) never forget to synchronize patches to LLVM and Clang into https://github.com/root-project/llvm-project/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12117
https://github.com/root-project/root/pull/12117:132,deployability,patch,patches,132,"Migrate patches to LLVM monorepo; Add GitHub workflow to diff copy of LLVM and Clang, so we (hopefully) never forget to synchronize patches to LLVM and Clang into https://github.com/root-project/llvm-project/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12117
https://github.com/root-project/root/pull/12117:120,performance,synch,synchronize,120,"Migrate patches to LLVM monorepo; Add GitHub workflow to diff copy of LLVM and Clang, so we (hopefully) never forget to synchronize patches to LLVM and Clang into https://github.com/root-project/llvm-project/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12117
https://github.com/root-project/root/pull/12117:8,safety,patch,patches,8,"Migrate patches to LLVM monorepo; Add GitHub workflow to diff copy of LLVM and Clang, so we (hopefully) never forget to synchronize patches to LLVM and Clang into https://github.com/root-project/llvm-project/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12117
https://github.com/root-project/root/pull/12117:132,safety,patch,patches,132,"Migrate patches to LLVM monorepo; Add GitHub workflow to diff copy of LLVM and Clang, so we (hopefully) never forget to synchronize patches to LLVM and Clang into https://github.com/root-project/llvm-project/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12117
https://github.com/root-project/root/pull/12117:8,security,patch,patches,8,"Migrate patches to LLVM monorepo; Add GitHub workflow to diff copy of LLVM and Clang, so we (hopefully) never forget to synchronize patches to LLVM and Clang into https://github.com/root-project/llvm-project/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12117
https://github.com/root-project/root/pull/12117:132,security,patch,patches,132,"Migrate patches to LLVM monorepo; Add GitHub workflow to diff copy of LLVM and Clang, so we (hopefully) never forget to synchronize patches to LLVM and Clang into https://github.com/root-project/llvm-project/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12117
https://github.com/root-project/root/pull/12117:45,usability,workflow,workflow,45,"Migrate patches to LLVM monorepo; Add GitHub workflow to diff copy of LLVM and Clang, so we (hopefully) never forget to synchronize patches to LLVM and Clang into https://github.com/root-project/llvm-project/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12117
https://github.com/root-project/root/pull/12119:9,security,sign,signature,9,"[RF] Fix signature of `RooWorkspace::getSnapshots()`; For ROOT 6.26, the `RooWorkspace::getSnapshots()` method was introduced in commit 460a58cb28. However, the signature was not what it should have been: it returned a copy of the snaphot list instead of a `const` reference. This is fixed now, which also uncovered a bug in some RooStats code where the snapshots are supposed to be transferred from one workspace to another, but they were just appended to the new list that was returned by `getSnapshots()`, so whe whole code had no effect. This is fixed now by correctly using `RooWorkspace::saveSnapshot()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12119
https://github.com/root-project/root/pull/12119:161,security,sign,signature,161,"[RF] Fix signature of `RooWorkspace::getSnapshots()`; For ROOT 6.26, the `RooWorkspace::getSnapshots()` method was introduced in commit 460a58cb28. However, the signature was not what it should have been: it returned a copy of the snaphot list instead of a `const` reference. This is fixed now, which also uncovered a bug in some RooStats code where the snapshots are supposed to be transferred from one workspace to another, but they were just appended to the new list that was returned by `getSnapshots()`, so whe whole code had no effect. This is fixed now by correctly using `RooWorkspace::saveSnapshot()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12119
https://github.com/root-project/root/pull/12120:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 9; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12119. 2. https://github.com/root-project/root/pull/12056. 3. https://github.com/root-project/root/pull/12103. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12120
https://github.com/root-project/root/pull/12120:164,deployability,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 9; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12119. 2. https://github.com/root-project/root/pull/12056. 3. https://github.com/root-project/root/pull/12103. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12120
https://github.com/root-project/root/pull/12120:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 9; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12119. 2. https://github.com/root-project/root/pull/12056. 3. https://github.com/root-project/root/pull/12103. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12120
https://github.com/root-project/root/pull/12120:164,safety,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 9; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12119. 2. https://github.com/root-project/root/pull/12056. 3. https://github.com/root-project/root/pull/12103. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12120
https://github.com/root-project/root/pull/12120:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 9; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12119. 2. https://github.com/root-project/root/pull/12056. 3. https://github.com/root-project/root/pull/12103. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12120
https://github.com/root-project/root/pull/12120:164,security,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 9; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12119. 2. https://github.com/root-project/root/pull/12056. 3. https://github.com/root-project/root/pull/12103. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12120
https://github.com/root-project/root/pull/12125:9,usability,document,documentation,9,[RF] Fix documentation for RooBrowser; Trying to make a documentation page for RooBrowser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12125
https://github.com/root-project/root/pull/12125:56,usability,document,documentation,56,[RF] Fix documentation for RooBrowser; Trying to make a documentation page for RooBrowser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12125
https://github.com/root-project/root/pull/12126:16,availability,error,error,16,Fix compilation error in rbrowsable; Move GetContent method to TDirectoryElement where it should be. Fixes #12110,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12126
https://github.com/root-project/root/pull/12126:16,performance,error,error,16,Fix compilation error in rbrowsable; Move GetContent method to TDirectoryElement where it should be. Fixes #12110,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12126
https://github.com/root-project/root/pull/12126:16,safety,error,error,16,Fix compilation error in rbrowsable; Move GetContent method to TDirectoryElement where it should be. Fixes #12110,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12126
https://github.com/root-project/root/pull/12126:16,usability,error,error,16,Fix compilation error in rbrowsable; Move GetContent method to TDirectoryElement where it should be. Fixes #12110,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12126
https://github.com/root-project/root/pull/12127:158,deployability,updat,updated,158,[skip-ci][ntuple] specifications.md: document `RNTupleCardinality`; See also the former PR that introduces this projected field: #12008. ## Checklist:. - [X] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12127
https://github.com/root-project/root/pull/12127:18,interoperability,specif,specifications,18,[skip-ci][ntuple] specifications.md: document `RNTupleCardinality`; See also the former PR that introduces this projected field: #12008. ## Checklist:. - [X] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12127
https://github.com/root-project/root/pull/12127:158,safety,updat,updated,158,[skip-ci][ntuple] specifications.md: document `RNTupleCardinality`; See also the former PR that introduces this projected field: #12008. ## Checklist:. - [X] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12127
https://github.com/root-project/root/pull/12127:158,security,updat,updated,158,[skip-ci][ntuple] specifications.md: document `RNTupleCardinality`; See also the former PR that introduces this projected field: #12008. ## Checklist:. - [X] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12127
https://github.com/root-project/root/pull/12127:37,usability,document,document,37,[skip-ci][ntuple] specifications.md: document `RNTupleCardinality`; See also the former PR that introduces this projected field: #12008. ## Checklist:. - [X] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12127
https://github.com/root-project/root/pull/12128:240,availability,avail,available,240,"Fix AddressSanitizer build; Commit a74454ae2d moved `rootcling_stage1` before the other directories, which broke sanitized builds because `core/sanitizer` defines the library `ROOTStaticSanitizerConfig` that `ROOT_EXECUTABLE` links in - if available. Solve this by moving `add_subdirectory(sanitizer)` first in the list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12128
https://github.com/root-project/root/pull/12128:21,deployability,build,build,21,"Fix AddressSanitizer build; Commit a74454ae2d moved `rootcling_stage1` before the other directories, which broke sanitized builds because `core/sanitizer` defines the library `ROOTStaticSanitizerConfig` that `ROOT_EXECUTABLE` links in - if available. Solve this by moving `add_subdirectory(sanitizer)` first in the list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12128
https://github.com/root-project/root/pull/12128:123,deployability,build,builds,123,"Fix AddressSanitizer build; Commit a74454ae2d moved `rootcling_stage1` before the other directories, which broke sanitized builds because `core/sanitizer` defines the library `ROOTStaticSanitizerConfig` that `ROOT_EXECUTABLE` links in - if available. Solve this by moving `add_subdirectory(sanitizer)` first in the list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12128
https://github.com/root-project/root/pull/12128:139,energy efficiency,core,core,139,"Fix AddressSanitizer build; Commit a74454ae2d moved `rootcling_stage1` before the other directories, which broke sanitized builds because `core/sanitizer` defines the library `ROOTStaticSanitizerConfig` that `ROOT_EXECUTABLE` links in - if available. Solve this by moving `add_subdirectory(sanitizer)` first in the list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12128
https://github.com/root-project/root/pull/12128:240,reliability,availab,available,240,"Fix AddressSanitizer build; Commit a74454ae2d moved `rootcling_stage1` before the other directories, which broke sanitized builds because `core/sanitizer` defines the library `ROOTStaticSanitizerConfig` that `ROOT_EXECUTABLE` links in - if available. Solve this by moving `add_subdirectory(sanitizer)` first in the list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12128
https://github.com/root-project/root/pull/12128:113,safety,sanit,sanitized,113,"Fix AddressSanitizer build; Commit a74454ae2d moved `rootcling_stage1` before the other directories, which broke sanitized builds because `core/sanitizer` defines the library `ROOTStaticSanitizerConfig` that `ROOT_EXECUTABLE` links in - if available. Solve this by moving `add_subdirectory(sanitizer)` first in the list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12128
https://github.com/root-project/root/pull/12128:144,safety,sanit,sanitizer,144,"Fix AddressSanitizer build; Commit a74454ae2d moved `rootcling_stage1` before the other directories, which broke sanitized builds because `core/sanitizer` defines the library `ROOTStaticSanitizerConfig` that `ROOT_EXECUTABLE` links in - if available. Solve this by moving `add_subdirectory(sanitizer)` first in the list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12128
https://github.com/root-project/root/pull/12128:240,safety,avail,available,240,"Fix AddressSanitizer build; Commit a74454ae2d moved `rootcling_stage1` before the other directories, which broke sanitized builds because `core/sanitizer` defines the library `ROOTStaticSanitizerConfig` that `ROOT_EXECUTABLE` links in - if available. Solve this by moving `add_subdirectory(sanitizer)` first in the list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12128
https://github.com/root-project/root/pull/12128:290,safety,sanit,sanitizer,290,"Fix AddressSanitizer build; Commit a74454ae2d moved `rootcling_stage1` before the other directories, which broke sanitized builds because `core/sanitizer` defines the library `ROOTStaticSanitizerConfig` that `ROOT_EXECUTABLE` links in - if available. Solve this by moving `add_subdirectory(sanitizer)` first in the list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12128
https://github.com/root-project/root/pull/12128:113,security,sanit,sanitized,113,"Fix AddressSanitizer build; Commit a74454ae2d moved `rootcling_stage1` before the other directories, which broke sanitized builds because `core/sanitizer` defines the library `ROOTStaticSanitizerConfig` that `ROOT_EXECUTABLE` links in - if available. Solve this by moving `add_subdirectory(sanitizer)` first in the list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12128
https://github.com/root-project/root/pull/12128:144,security,sanit,sanitizer,144,"Fix AddressSanitizer build; Commit a74454ae2d moved `rootcling_stage1` before the other directories, which broke sanitized builds because `core/sanitizer` defines the library `ROOTStaticSanitizerConfig` that `ROOT_EXECUTABLE` links in - if available. Solve this by moving `add_subdirectory(sanitizer)` first in the list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12128
https://github.com/root-project/root/pull/12128:240,security,availab,available,240,"Fix AddressSanitizer build; Commit a74454ae2d moved `rootcling_stage1` before the other directories, which broke sanitized builds because `core/sanitizer` defines the library `ROOTStaticSanitizerConfig` that `ROOT_EXECUTABLE` links in - if available. Solve this by moving `add_subdirectory(sanitizer)` first in the list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12128
https://github.com/root-project/root/pull/12128:290,security,sanit,sanitizer,290,"Fix AddressSanitizer build; Commit a74454ae2d moved `rootcling_stage1` before the other directories, which broke sanitized builds because `core/sanitizer` defines the library `ROOTStaticSanitizerConfig` that `ROOT_EXECUTABLE` links in - if available. Solve this by moving `add_subdirectory(sanitizer)` first in the list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12128
https://github.com/root-project/root/pull/12129:370,availability,consist,consistently,370,"[RF] Avoid using `RooAbsArg::redirectServer()` in RooFit; This is a follow-up to https://github.com/root-project/root/pull/12040. The `RooAbsArg::redirectServer()` method is dangerous and should not be used directly. It was for example used wrongly in HistFactory. In the RooAbsAnaConvPdf is was actually used correctly, but it's still better to use `redirectServers()` consistently, which avoids the new warnings you get when using `redirectServer()`. More detail in the commit description. Also includes a commit that irons over RooFit with `clang-tidy`, adding some missing overrides.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12129
https://github.com/root-project/root/pull/12129:5,safety,Avoid,Avoid,5,"[RF] Avoid using `RooAbsArg::redirectServer()` in RooFit; This is a follow-up to https://github.com/root-project/root/pull/12040. The `RooAbsArg::redirectServer()` method is dangerous and should not be used directly. It was for example used wrongly in HistFactory. In the RooAbsAnaConvPdf is was actually used correctly, but it's still better to use `redirectServers()` consistently, which avoids the new warnings you get when using `redirectServer()`. More detail in the commit description. Also includes a commit that irons over RooFit with `clang-tidy`, adding some missing overrides.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12129
https://github.com/root-project/root/pull/12129:390,safety,avoid,avoids,390,"[RF] Avoid using `RooAbsArg::redirectServer()` in RooFit; This is a follow-up to https://github.com/root-project/root/pull/12040. The `RooAbsArg::redirectServer()` method is dangerous and should not be used directly. It was for example used wrongly in HistFactory. In the RooAbsAnaConvPdf is was actually used correctly, but it's still better to use `redirectServers()` consistently, which avoids the new warnings you get when using `redirectServer()`. More detail in the commit description. Also includes a commit that irons over RooFit with `clang-tidy`, adding some missing overrides.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12129
https://github.com/root-project/root/pull/12129:370,usability,consist,consistently,370,"[RF] Avoid using `RooAbsArg::redirectServer()` in RooFit; This is a follow-up to https://github.com/root-project/root/pull/12040. The `RooAbsArg::redirectServer()` method is dangerous and should not be used directly. It was for example used wrongly in HistFactory. In the RooAbsAnaConvPdf is was actually used correctly, but it's still better to use `redirectServers()` consistently, which avoids the new warnings you get when using `redirectServer()`. More detail in the commit description. Also includes a commit that irons over RooFit with `clang-tidy`, adding some missing overrides.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12129
https://github.com/root-project/root/issues/12130:286,availability,error,error,286,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:654,availability,error,error,654,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:1248,availability,Operat,Operating,1248,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:10,deployability,fail,fails,10,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:102,deployability,build,build,102,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:186,deployability,build,buildid,186,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:244,deployability,build,buildid,244,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:260,deployability,fail,fails,260,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:403,deployability,build,build,403,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:440,deployability,build,build,440,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:533,deployability,build,build,533,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:570,deployability,build,build,570,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:1167,deployability,build,build,1167,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:1228,deployability,version,version,1228,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:479,energy efficiency,core,core,479,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:609,energy efficiency,core,core,609,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:292,integrability,messag,message,292,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:1228,integrability,version,version,1228,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:292,interoperability,messag,message,292,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:1228,modifiability,version,version,1228,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:286,performance,error,error,286,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:654,performance,error,error,654,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:10,reliability,fail,fails,10,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:260,reliability,fail,fails,260,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:286,safety,error,error,286,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:654,safety,error,error,654,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:1121,safety,input,input,1121,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:286,usability,error,error,286,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:388,usability,User,Users,388,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:518,usability,User,Users,518,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:654,usability,error,error,654,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:882,usability,behavi,behavior,882,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:976,usability,behavi,behavior,976,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/issues/12130:1121,usability,input,input,1121,"ROOT Head fails to compile on macOS(11, 12) since Jan 27, 2023; ### Describe the bug. In the lcgcmake build system. Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```. [ 55%] Copying clang's __clang_hip_libdevice_declares.h... In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:. /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found. [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a. #include ""TUnixSystem.h"". ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. 1. ROOT version: master. 2. Operating system: macOS 11, 12. 3. git clone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12130
https://github.com/root-project/root/pull/12133:700,availability,avail,available,700,"[ntuple] Allow for storing fields in different column representations; Add the concept of column representations to fields. Every fields can have a set of possible column representations for writing and additional column representations for reading. When reading, the column representation is fixed by the on-disk data. On writing, there is a default column representation but the user can pick a different one. This provides the framework to store data in different encodings (e.g., split, unsplit) and to load data from ""compatible columns"", e.g. `kInt32` column into `std::int64` type. As an example, the PR adds support for split and unsplit storage of `double`s. Follow-up PRs will complete the available encodings and select split encode as the default for writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12133
https://github.com/root-project/root/pull/12133:507,energy efficiency,load,load,507,"[ntuple] Allow for storing fields in different column representations; Add the concept of column representations to fields. Every fields can have a set of possible column representations for writing and additional column representations for reading. When reading, the column representation is fixed by the on-disk data. On writing, there is a default column representation but the user can pick a different one. This provides the framework to store data in different encodings (e.g., split, unsplit) and to load data from ""compatible columns"", e.g. `kInt32` column into `std::int64` type. As an example, the PR adds support for split and unsplit storage of `double`s. Follow-up PRs will complete the available encodings and select split encode as the default for writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12133
https://github.com/root-project/root/pull/12133:523,interoperability,compatib,compatible,523,"[ntuple] Allow for storing fields in different column representations; Add the concept of column representations to fields. Every fields can have a set of possible column representations for writing and additional column representations for reading. When reading, the column representation is fixed by the on-disk data. On writing, there is a default column representation but the user can pick a different one. This provides the framework to store data in different encodings (e.g., split, unsplit) and to load data from ""compatible columns"", e.g. `kInt32` column into `std::int64` type. As an example, the PR adds support for split and unsplit storage of `double`s. Follow-up PRs will complete the available encodings and select split encode as the default for writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12133
https://github.com/root-project/root/pull/12133:309,performance,disk,disk,309,"[ntuple] Allow for storing fields in different column representations; Add the concept of column representations to fields. Every fields can have a set of possible column representations for writing and additional column representations for reading. When reading, the column representation is fixed by the on-disk data. On writing, there is a default column representation but the user can pick a different one. This provides the framework to store data in different encodings (e.g., split, unsplit) and to load data from ""compatible columns"", e.g. `kInt32` column into `std::int64` type. As an example, the PR adds support for split and unsplit storage of `double`s. Follow-up PRs will complete the available encodings and select split encode as the default for writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12133
https://github.com/root-project/root/pull/12133:507,performance,load,load,507,"[ntuple] Allow for storing fields in different column representations; Add the concept of column representations to fields. Every fields can have a set of possible column representations for writing and additional column representations for reading. When reading, the column representation is fixed by the on-disk data. On writing, there is a default column representation but the user can pick a different one. This provides the framework to store data in different encodings (e.g., split, unsplit) and to load data from ""compatible columns"", e.g. `kInt32` column into `std::int64` type. As an example, the PR adds support for split and unsplit storage of `double`s. Follow-up PRs will complete the available encodings and select split encode as the default for writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12133
https://github.com/root-project/root/pull/12133:700,reliability,availab,available,700,"[ntuple] Allow for storing fields in different column representations; Add the concept of column representations to fields. Every fields can have a set of possible column representations for writing and additional column representations for reading. When reading, the column representation is fixed by the on-disk data. On writing, there is a default column representation but the user can pick a different one. This provides the framework to store data in different encodings (e.g., split, unsplit) and to load data from ""compatible columns"", e.g. `kInt32` column into `std::int64` type. As an example, the PR adds support for split and unsplit storage of `double`s. Follow-up PRs will complete the available encodings and select split encode as the default for writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12133
https://github.com/root-project/root/pull/12133:687,safety,compl,complete,687,"[ntuple] Allow for storing fields in different column representations; Add the concept of column representations to fields. Every fields can have a set of possible column representations for writing and additional column representations for reading. When reading, the column representation is fixed by the on-disk data. On writing, there is a default column representation but the user can pick a different one. This provides the framework to store data in different encodings (e.g., split, unsplit) and to load data from ""compatible columns"", e.g. `kInt32` column into `std::int64` type. As an example, the PR adds support for split and unsplit storage of `double`s. Follow-up PRs will complete the available encodings and select split encode as the default for writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12133
https://github.com/root-project/root/pull/12133:700,safety,avail,available,700,"[ntuple] Allow for storing fields in different column representations; Add the concept of column representations to fields. Every fields can have a set of possible column representations for writing and additional column representations for reading. When reading, the column representation is fixed by the on-disk data. On writing, there is a default column representation but the user can pick a different one. This provides the framework to store data in different encodings (e.g., split, unsplit) and to load data from ""compatible columns"", e.g. `kInt32` column into `std::int64` type. As an example, the PR adds support for split and unsplit storage of `double`s. Follow-up PRs will complete the available encodings and select split encode as the default for writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12133
https://github.com/root-project/root/pull/12133:687,security,compl,complete,687,"[ntuple] Allow for storing fields in different column representations; Add the concept of column representations to fields. Every fields can have a set of possible column representations for writing and additional column representations for reading. When reading, the column representation is fixed by the on-disk data. On writing, there is a default column representation but the user can pick a different one. This provides the framework to store data in different encodings (e.g., split, unsplit) and to load data from ""compatible columns"", e.g. `kInt32` column into `std::int64` type. As an example, the PR adds support for split and unsplit storage of `double`s. Follow-up PRs will complete the available encodings and select split encode as the default for writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12133
https://github.com/root-project/root/pull/12133:700,security,availab,available,700,"[ntuple] Allow for storing fields in different column representations; Add the concept of column representations to fields. Every fields can have a set of possible column representations for writing and additional column representations for reading. When reading, the column representation is fixed by the on-disk data. On writing, there is a default column representation but the user can pick a different one. This provides the framework to store data in different encodings (e.g., split, unsplit) and to load data from ""compatible columns"", e.g. `kInt32` column into `std::int64` type. As an example, the PR adds support for split and unsplit storage of `double`s. Follow-up PRs will complete the available encodings and select split encode as the default for writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12133
https://github.com/root-project/root/pull/12133:381,usability,user,user,381,"[ntuple] Allow for storing fields in different column representations; Add the concept of column representations to fields. Every fields can have a set of possible column representations for writing and additional column representations for reading. When reading, the column representation is fixed by the on-disk data. On writing, there is a default column representation but the user can pick a different one. This provides the framework to store data in different encodings (e.g., split, unsplit) and to load data from ""compatible columns"", e.g. `kInt32` column into `std::int64` type. As an example, the PR adds support for split and unsplit storage of `double`s. Follow-up PRs will complete the available encodings and select split encode as the default for writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12133
https://github.com/root-project/root/pull/12133:616,usability,support,support,616,"[ntuple] Allow for storing fields in different column representations; Add the concept of column representations to fields. Every fields can have a set of possible column representations for writing and additional column representations for reading. When reading, the column representation is fixed by the on-disk data. On writing, there is a default column representation but the user can pick a different one. This provides the framework to store data in different encodings (e.g., split, unsplit) and to load data from ""compatible columns"", e.g. `kInt32` column into `std::int64` type. As an example, the PR adds support for split and unsplit storage of `double`s. Follow-up PRs will complete the available encodings and select split encode as the default for writing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12133
https://github.com/root-project/root/pull/12134:23,energy efficiency,core,core,23,Add missing include in core/macosx/CMakelists.txt; This PR fixes #12130 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12134
https://github.com/root-project/root/pull/12135:102,deployability,releas,release,102,"[skip-ci][relnotes] Add contributions from Vincenzo, Ivan, Enrico for 6.28; This is just to align the release notes file with the master branch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12135
https://github.com/root-project/root/issues/12136:160,availability,state,state,160,"[ntuple] `RNTupleView`'s move ctor causes double delete; ### Describe the bug. `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1183,availability,state,state,1183,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1709,availability,state,state,1709,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:418,deployability,contain,contains,418,"[ntuple] `RNTupleView`'s move ctor causes double delete; ### Describe the bug. `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1792,deployability,depend,depend,1792,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1913,deployability,version,version,1913,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1927,deployability,Version,Version,1927,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:439,energy efficiency,alloc,allocated,439,"[ntuple] `RNTupleView`'s move ctor causes double delete; ### Describe the bug. `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:759,energy efficiency,alloc,allocated,759,"[ntuple] `RNTupleView`'s move ctor causes double delete; ### Describe the bug. `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:908,energy efficiency,model,model,908,"[ntuple] `RNTupleView`'s move ctor causes double delete; ### Describe the bug. `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1089,energy efficiency,alloc,allocated,1089,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:160,integrability,state,state,160,"[ntuple] `RNTupleView`'s move ctor causes double delete; ### Describe the bug. `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1183,integrability,state,state,1183,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1709,integrability,state,state,1709,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1792,integrability,depend,depend,1792,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1913,integrability,version,version,1913,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1927,integrability,Version,Version,1927,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:581,interoperability,share,shared,581,"[ntuple] `RNTupleView`'s move ctor causes double delete; ### Describe the bug. `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1702,interoperability,share,shared,1702,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1792,modifiability,depend,depend,1792,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1913,modifiability,version,version,1913,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1927,modifiability,Version,Version,1927,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:449,performance,memor,memory,449,"[ntuple] `RNTupleView`'s move ctor causes double delete; ### Describe the bug. `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:725,performance,memor,memory,725,"[ntuple] `RNTupleView`'s move ctor causes double delete; ### Describe the bug. `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1783,reliability,doe,does,1783,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1152,safety,detect,detect,1152,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1792,safety,depend,depend,1792,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1806,safety,input,input,1806,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:908,security,model,model,908,"[ntuple] `RNTupleView`'s move ctor causes double delete; ### Describe the bug. `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1152,security,detect,detect,1152,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1792,testability,depend,depend,1792,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:449,usability,memor,memory,449,"[ntuple] `RNTupleView`'s move ctor causes double delete; ### Describe the bug. `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:641,usability,document,documentation,641,"[ntuple] `RNTupleView`'s move ctor causes double delete; ### Describe the bug. `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:725,usability,memor,memory,725,"[ntuple] `RNTupleView`'s move ctor causes double delete; ### Describe the bug. `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1031,usability,user,user-defined,1031,"uses double delete; ### Describe the bug. `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1220,usability,document,documented,1220,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1327,usability,behavi,behavior,1327,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/issues/12136:1806,usability,input,input,1806,"leView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior. The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:. ```c++. auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");. {. auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");. {. auto copy{std::move(viewH1IsMuon)};. } // dtor for copy, frees shared state. } // dtor for viewH1IsMuon, double free. ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup. ```. bgruber@graviola:$ root --version. ROOT Version: 6.29/01. Built for linuxx8664gcc on Jan 16 2023, 14:47:00. From remotes/origin/HEAD@v6-29-01-212-gc8ad008463. ```. Built with g++-12 on Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12136
https://github.com/root-project/root/pull/12137:13,availability,error,error,13,TTreeReader: error out for STL within TClonesArray.; This alleviates #11769 by explicitly failing rather than doing the wrong thing silently.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12137
https://github.com/root-project/root/pull/12137:90,deployability,fail,failing,90,TTreeReader: error out for STL within TClonesArray.; This alleviates #11769 by explicitly failing rather than doing the wrong thing silently.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12137
https://github.com/root-project/root/pull/12137:13,performance,error,error,13,TTreeReader: error out for STL within TClonesArray.; This alleviates #11769 by explicitly failing rather than doing the wrong thing silently.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12137
https://github.com/root-project/root/pull/12137:90,reliability,fail,failing,90,TTreeReader: error out for STL within TClonesArray.; This alleviates #11769 by explicitly failing rather than doing the wrong thing silently.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12137
https://github.com/root-project/root/pull/12137:13,safety,error,error,13,TTreeReader: error out for STL within TClonesArray.; This alleviates #11769 by explicitly failing rather than doing the wrong thing silently.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12137
https://github.com/root-project/root/pull/12137:13,usability,error,error,13,TTreeReader: error out for STL within TClonesArray.; This alleviates #11769 by explicitly failing rather than doing the wrong thing silently.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12137
https://github.com/root-project/root/issues/12138:1347,availability,servic,service,1347,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:24,deployability,modul,module,24,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:70,deployability,Modul,ModuleName,70,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:411,deployability,modul,module,411,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:503,deployability,build,build,503,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:548,deployability,build,build,548,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:780,deployability,Modul,ModuleFile,780,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:799,deployability,Modul,ModuleFile,799,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:856,deployability,Modul,ModuleName,856,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:877,deployability,modul,module,877,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:906,deployability,fail,failed,906,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:988,deployability,build,build,988,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1033,deployability,build,build,1033,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1080,deployability,build,build,1080,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1121,deployability,modul,module,1121,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1304,deployability,audit,auditor,1304,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1347,deployability,servic,service,1347,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1420,deployability,build,build,1420,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1465,deployability,build,build,1465,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1512,deployability,build,build,1512,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1566,deployability,version,version,1566,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:967,energy efficiency,core,core,967,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1108,integrability,configur,configurable-module,1108,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1148,integrability,configur,configurable-default-name,1148,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1174,integrability,Configur,Configurable,1174,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1201,integrability,configur,configurable-algorithm,1201,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1224,integrability,Configur,ConfigurableAlgorithm,1224,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1248,integrability,configur,configurable-algtool,1248,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1269,integrability,Configur,ConfigurableAlgTool,1269,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1291,integrability,configur,configurable-auditor,1291,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1312,integrability,Configur,ConfigurableAuditor,1312,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1334,integrability,configur,configurable-service,1334,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1355,integrability,Configur,ConfigurableService,1355,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1566,integrability,version,version,1566,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1140,interoperability,Prox,Proxy,1140,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:24,modifiability,modul,module,24,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:70,modifiability,Modul,ModuleName,70,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:411,modifiability,modul,module,411,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:780,modifiability,Modul,ModuleFile,780,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:799,modifiability,Modul,ModuleFile,799,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:856,modifiability,Modul,ModuleName,856,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:877,modifiability,modul,module,877,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1108,modifiability,configur,configurable-module,1108,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1148,modifiability,configur,configurable-default-name,1148,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1174,modifiability,Configur,Configurable,1174,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1201,modifiability,configur,configurable-algorithm,1201,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1224,modifiability,Configur,ConfigurableAlgorithm,1224,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1248,modifiability,configur,configurable-algtool,1248,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1269,modifiability,Configur,ConfigurableAlgTool,1269,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1291,modifiability,configur,configurable-auditor,1291,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1312,modifiability,Configur,ConfigurableAuditor,1312,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1334,modifiability,configur,configurable-service,1334,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1355,modifiability,Configur,ConfigurableService,1355,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1566,modifiability,version,version,1566,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:7,reliability,Diagno,Diagnostics,7,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:906,reliability,fail,failed,906,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:24,safety,modul,module,24,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:70,safety,Modul,ModuleName,70,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:411,safety,modul,module,411,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:780,safety,Modul,ModuleFile,780,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:799,safety,Modul,ModuleFile,799,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:856,safety,Modul,ModuleName,856,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:877,safety,modul,module,877,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1121,safety,modul,module,1121,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1108,security,configur,configurable-module,1108,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1148,security,configur,configurable-default-name,1148,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1174,security,Configur,Configurable,1174,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1201,security,configur,configurable-algorithm,1201,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1224,security,Configur,ConfigurableAlgorithm,1224,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1248,security,configur,configurable-algtool,1248,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1269,security,Configur,ConfigurableAlgTool,1269,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1291,security,configur,configurable-auditor,1291,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1312,security,Configur,ConfigurableAuditor,1312,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1334,security,configur,configurable-service,1334,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:1355,security,Configur,ConfigurableService,1355,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:7,testability,Diagno,Diagnostics,7,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:113,testability,assert,assert,113,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:311,testability,understand,understand,311,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:827,testability,Assert,Assertion,827,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:231,usability,tool,tools,231,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/issues/12138:608,usability,tool,tools,608,"Better Diagnostics when module not found; It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```. genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed. --. /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12138
https://github.com/root-project/root/pull/12139:96,deployability,version,version-min,96,"[cmake] There is no CMAKE_EXE_FLAGS, use CMAKE_EXE_LINKER_FLAGS:; This might fix e.g. `-mmacosx-version-min=12.6` not being passed to ACLiC, causing linker warnings about incompatible deployment targets. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12139
https://github.com/root-project/root/pull/12139:184,deployability,deploy,deployment,184,"[cmake] There is no CMAKE_EXE_FLAGS, use CMAKE_EXE_LINKER_FLAGS:; This might fix e.g. `-mmacosx-version-min=12.6` not being passed to ACLiC, causing linker warnings about incompatible deployment targets. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12139
https://github.com/root-project/root/pull/12139:299,deployability,updat,updated,299,"[cmake] There is no CMAKE_EXE_FLAGS, use CMAKE_EXE_LINKER_FLAGS:; This might fix e.g. `-mmacosx-version-min=12.6` not being passed to ACLiC, causing linker warnings about incompatible deployment targets. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12139
https://github.com/root-project/root/pull/12139:96,integrability,version,version-min,96,"[cmake] There is no CMAKE_EXE_FLAGS, use CMAKE_EXE_LINKER_FLAGS:; This might fix e.g. `-mmacosx-version-min=12.6` not being passed to ACLiC, causing linker warnings about incompatible deployment targets. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12139
https://github.com/root-project/root/pull/12139:171,interoperability,incompatib,incompatible,171,"[cmake] There is no CMAKE_EXE_FLAGS, use CMAKE_EXE_LINKER_FLAGS:; This might fix e.g. `-mmacosx-version-min=12.6` not being passed to ACLiC, causing linker warnings about incompatible deployment targets. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12139
https://github.com/root-project/root/pull/12139:96,modifiability,version,version-min,96,"[cmake] There is no CMAKE_EXE_FLAGS, use CMAKE_EXE_LINKER_FLAGS:; This might fix e.g. `-mmacosx-version-min=12.6` not being passed to ACLiC, causing linker warnings about incompatible deployment targets. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12139
https://github.com/root-project/root/pull/12139:269,safety,test,tested,269,"[cmake] There is no CMAKE_EXE_FLAGS, use CMAKE_EXE_LINKER_FLAGS:; This might fix e.g. `-mmacosx-version-min=12.6` not being passed to ACLiC, causing linker warnings about incompatible deployment targets. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12139
https://github.com/root-project/root/pull/12139:299,safety,updat,updated,299,"[cmake] There is no CMAKE_EXE_FLAGS, use CMAKE_EXE_LINKER_FLAGS:; This might fix e.g. `-mmacosx-version-min=12.6` not being passed to ACLiC, causing linker warnings about incompatible deployment targets. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12139
https://github.com/root-project/root/pull/12139:299,security,updat,updated,299,"[cmake] There is no CMAKE_EXE_FLAGS, use CMAKE_EXE_LINKER_FLAGS:; This might fix e.g. `-mmacosx-version-min=12.6` not being passed to ACLiC, causing linker warnings about incompatible deployment targets. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12139
https://github.com/root-project/root/pull/12139:269,testability,test,tested,269,"[cmake] There is no CMAKE_EXE_FLAGS, use CMAKE_EXE_LINKER_FLAGS:; This might fix e.g. `-mmacosx-version-min=12.6` not being passed to ACLiC, causing linker warnings about incompatible deployment targets. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12139
https://github.com/root-project/root/pull/12140:127,deployability,integr,integral-like,127,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:151,energy efficiency,model,model,151,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:127,integrability,integr,integral-like,127,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:127,interoperability,integr,integral-like,127,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:90,modifiability,exten,extends,90,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:127,modifiability,integr,integral-like,127,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:204,modifiability,exten,extended,204,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:127,reliability,integr,integral-like,127,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:188,safety,test,tests,188,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:70,security,access,access,70,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:127,security,integr,integral-like,127,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:151,security,model,model,151,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:164,security,access,access,164,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:127,testability,integr,integral-like,127,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:183,testability,unit,unit,183,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12140:188,testability,test,tests,188,[ntuple] Make RNTupleGlobalRange/RNTupleClusterRange constexpr random access ranges; This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12140
https://github.com/root-project/root/pull/12141:110,deployability,build,build,110,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:68,energy efficiency,CPU,CPU,68,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:76,energy efficiency,GPU,GPU,76,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:304,energy efficiency,CPU,CPU,304,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:1424,energy efficiency,GPU,GPU,1424,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:58,integrability,Batch,BatchMode,58,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:192,integrability,event,events,192,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:58,performance,Batch,BatchMode,58,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:68,performance,CPU,CPU,68,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:76,performance,GPU,GPU,76,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:299,performance,Time,Time,299,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:304,performance,CPU,CPU,304,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:1405,performance,perform,performance,1405,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:1424,performance,GPU,GPU,1424,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:5,usability,Support,Support,5,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12141:1405,usability,perform,performance,1405,"[RF] Support Analytical convolution classes in the RooFit BatchMode CPU and GPU; The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```. --------------------------------------------------------------------------------. Benchmark Time CPU Iterations. --------------------------------------------------------------------------------. BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1. BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1. BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1. BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1. BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1. BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1. BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1. BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1. BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1. BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1. BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1. BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1. BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1. BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1. BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1. BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1. ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12141
https://github.com/root-project/root/pull/12142:12,security,expos,expose,12,[ntuple] Re-expose field type of RNTupleView; This PR re-exposed the field type of an `RNTupleView` which otherwise must be matched out from the template signature (e.g. via `boost::mp11::mp_first).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12142
https://github.com/root-project/root/pull/12142:57,security,expos,exposed,57,[ntuple] Re-expose field type of RNTupleView; This PR re-exposed the field type of an `RNTupleView` which otherwise must be matched out from the template signature (e.g. via `boost::mp11::mp_first).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12142
https://github.com/root-project/root/pull/12142:154,security,sign,signature,154,[ntuple] Re-expose field type of RNTupleView; This PR re-exposed the field type of an `RNTupleView` which otherwise must be matched out from the template signature (e.g. via `boost::mp11::mp_first).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12142
https://github.com/root-project/root/pull/12143:9,modifiability,Refact,Refactor,9,[ntuple] Refactor Internal::IsMappable for RNTupleView; This PR simplifies the trait whether an `RField` is mappable. It furthermore simplifies the use of this trait inside `RNTupleView`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12143
https://github.com/root-project/root/pull/12143:9,performance,Refactor,Refactor,9,[ntuple] Refactor Internal::IsMappable for RNTupleView; This PR simplifies the trait whether an `RField` is mappable. It furthermore simplifies the use of this trait inside `RNTupleView`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12143
https://github.com/root-project/root/pull/12143:64,testability,simpl,simplifies,64,[ntuple] Refactor Internal::IsMappable for RNTupleView; This PR simplifies the trait whether an `RField` is mappable. It furthermore simplifies the use of this trait inside `RNTupleView`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12143
https://github.com/root-project/root/pull/12143:133,testability,simpl,simplifies,133,[ntuple] Refactor Internal::IsMappable for RNTupleView; This PR simplifies the trait whether an `RField` is mappable. It furthermore simplifies the use of this trait inside `RNTupleView`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12143
https://github.com/root-project/root/pull/12143:64,usability,simpl,simplifies,64,[ntuple] Refactor Internal::IsMappable for RNTupleView; This PR simplifies the trait whether an `RField` is mappable. It furthermore simplifies the use of this trait inside `RNTupleView`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12143
https://github.com/root-project/root/pull/12143:133,usability,simpl,simplifies,133,[ntuple] Refactor Internal::IsMappable for RNTupleView; This PR simplifies the trait whether an `RField` is mappable. It furthermore simplifies the use of this trait inside `RNTupleView`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12143
https://github.com/root-project/root/pull/12144:13,availability,error,error,13,TTreeReader: error out for STL within TClonesArray.; Currently this nesting is not supported and was previously silently returning incorrect information. This alleviates https://github.com/root-project/root/issues/11769 by explicitly failing rather than doing the wrong thing silently. Note: forward port of https://github.com/root-project/root/pull/12137,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12144
https://github.com/root-project/root/pull/12144:234,deployability,fail,failing,234,TTreeReader: error out for STL within TClonesArray.; Currently this nesting is not supported and was previously silently returning incorrect information. This alleviates https://github.com/root-project/root/issues/11769 by explicitly failing rather than doing the wrong thing silently. Note: forward port of https://github.com/root-project/root/pull/12137,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12144
https://github.com/root-project/root/pull/12144:53,energy efficiency,Current,Currently,53,TTreeReader: error out for STL within TClonesArray.; Currently this nesting is not supported and was previously silently returning incorrect information. This alleviates https://github.com/root-project/root/issues/11769 by explicitly failing rather than doing the wrong thing silently. Note: forward port of https://github.com/root-project/root/pull/12137,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12144
https://github.com/root-project/root/pull/12144:13,performance,error,error,13,TTreeReader: error out for STL within TClonesArray.; Currently this nesting is not supported and was previously silently returning incorrect information. This alleviates https://github.com/root-project/root/issues/11769 by explicitly failing rather than doing the wrong thing silently. Note: forward port of https://github.com/root-project/root/pull/12137,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12144
https://github.com/root-project/root/pull/12144:234,reliability,fail,failing,234,TTreeReader: error out for STL within TClonesArray.; Currently this nesting is not supported and was previously silently returning incorrect information. This alleviates https://github.com/root-project/root/issues/11769 by explicitly failing rather than doing the wrong thing silently. Note: forward port of https://github.com/root-project/root/pull/12137,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12144
https://github.com/root-project/root/pull/12144:13,safety,error,error,13,TTreeReader: error out for STL within TClonesArray.; Currently this nesting is not supported and was previously silently returning incorrect information. This alleviates https://github.com/root-project/root/issues/11769 by explicitly failing rather than doing the wrong thing silently. Note: forward port of https://github.com/root-project/root/pull/12137,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12144
https://github.com/root-project/root/pull/12144:13,usability,error,error,13,TTreeReader: error out for STL within TClonesArray.; Currently this nesting is not supported and was previously silently returning incorrect information. This alleviates https://github.com/root-project/root/issues/11769 by explicitly failing rather than doing the wrong thing silently. Note: forward port of https://github.com/root-project/root/pull/12137,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12144
https://github.com/root-project/root/pull/12144:83,usability,support,supported,83,TTreeReader: error out for STL within TClonesArray.; Currently this nesting is not supported and was previously silently returning incorrect information. This alleviates https://github.com/root-project/root/issues/11769 by explicitly failing rather than doing the wrong thing silently. Note: forward port of https://github.com/root-project/root/pull/12137,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12144
https://github.com/root-project/root/pull/12145:102,deployability,updat,updated,102,[ntuple] add lastEntry to RNTupleImporter::Import; ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12145
https://github.com/root-project/root/pull/12145:72,safety,test,tested,72,[ntuple] add lastEntry to RNTupleImporter::Import; ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12145
https://github.com/root-project/root/pull/12145:102,safety,updat,updated,102,[ntuple] add lastEntry to RNTupleImporter::Import; ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12145
https://github.com/root-project/root/pull/12145:102,security,updat,updated,102,[ntuple] add lastEntry to RNTupleImporter::Import; ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12145
https://github.com/root-project/root/pull/12145:72,testability,test,tested,72,[ntuple] add lastEntry to RNTupleImporter::Import; ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12145
https://github.com/root-project/root/pull/12146:21,deployability,integr,integrator,21,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:61,deployability,integr,integrator,61,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:128,deployability,integr,integrator,128,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:21,integrability,integr,integrator,21,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:61,integrability,integr,integrator,61,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:128,integrability,integr,integrator,128,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:147,integrability,interfac,interface,147,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:170,integrability,pub,public,170,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:232,integrability,pub,public,232,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:239,integrability,interfac,interface,239,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:21,interoperability,integr,integrator,21,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:61,interoperability,integr,integrator,61,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:128,interoperability,integr,integrator,128,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:147,interoperability,interfac,interface,147,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:239,interoperability,interfac,interface,239,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:21,modifiability,integr,integrator,21,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:61,modifiability,integr,integrator,61,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:128,modifiability,integr,integrator,128,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:147,modifiability,interfac,interface,147,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:239,modifiability,interfac,interface,239,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:280,modifiability,refact,refactoring,280,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:280,performance,refactor,refactoring,280,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:21,reliability,integr,integrator,21,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:61,reliability,integr,integrator,61,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:128,reliability,integr,integrator,128,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:21,security,integr,integrator,21,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:61,security,integr,integrator,61,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:128,security,integr,integrator,128,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:21,testability,integr,integrator,21,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:61,testability,integr,integrator,61,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/pull/12146:128,testability,integr,integrator,128,"[RF] Make headers of integrator implementations private; The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12146
https://github.com/root-project/root/issues/12148:640,availability,Operat,Operating,640,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:694,availability,Failur,Failures,694,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:1011,availability,error,error,1011,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:0,deployability,Fail,Failing,0,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:157,deployability,fail,failing,157,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:210,deployability,FAIL,FAILED,210,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:269,deployability,Fail,Failed,269,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:329,deployability,Fail,Failed,329,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:343,deployability,fail,failing,343,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:376,deployability,modul,module,376,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:425,deployability,build,builddir,425,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:434,deployability,build,build,434,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:440,deployability,BUILD,BUILD,440,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:472,deployability,build,build,472,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:620,deployability,version,version,620,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:694,deployability,Fail,Failures,694,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:737,deployability,build,build,737,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:796,deployability,releas,release,796,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:620,integrability,version,version,620,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:376,modifiability,modul,module,376,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:620,modifiability,version,version,620,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:729,modifiability,pac,package,729,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:1056,modifiability,scal,scalars,1056,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:694,performance,Failur,Failures,694,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:1011,performance,error,error,1011,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:0,reliability,Fail,Failing,0,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:157,reliability,fail,failing,157,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:210,reliability,FAIL,FAILED,210,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:269,reliability,Fail,Failed,269,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:329,reliability,Fail,Failed,329,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:343,reliability,fail,failing,343,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:694,reliability,Fail,Failures,694,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:8,safety,test,tests,8,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:165,safety,test,tests,165,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:204,safety,test,tests,204,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:338,safety,Test,Test,338,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:376,safety,modul,module,376,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:716,safety,test,tests,716,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:877,safety,compl,complex,877,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:1011,safety,error,error,1011,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:877,security,compl,complex,877,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:908,security,expir,expired,908,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:8,testability,test,tests,8,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:165,testability,test,tests,165,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:204,testability,test,tests,204,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:338,testability,Test,Test,338,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:716,testability,test,tests,716,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:771,testability,context,context,771,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:144,usability,behavi,behavior,144,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/issues/12148:1011,usability,error,error,1011,"Failing tests with numpy 1.24; ### Describe the bug. numpy.object was deprecated in numpy 1.20 and has been removed in numpy 1.24. ### Expected behavior. No failing tests. ### To Reproduce. The following tests FAILED:. 	 54 - pyunittests-pyroot-pyz-rdataframe-asnumpy (Failed). 	1087 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed). Test failing due to:. AttributeError: module 'numpy' has no attribute 'object'. File ""/builddir/build/BUILD/root-6.26.10/redhat-linux-build/lib/ROOT/_pythonization/_rdataframe.py"", line 138, in GetValue. tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora 38. 3. How you obtained ROOT: Failures when running tests during package build from source. ### Additional context. From numpy 1.24 release notes:. The deprecation for the aliases np.object, np.bool, np.float, np.complex, np.str, and np.int is expired (introduces NumPy 1.20). Some of these will now give a FutureWarning in addition to raising an error since they will be mapped to the NumPy scalars in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12148
https://github.com/root-project/root/pull/12149:306,deployability,automat,automatically,306,"Revert ""Change default value for builtin_gtest option to ON""; This reverts commit 8e355c2c565af555f75209ea0f1c2ce255f85cc6 from #10301. /cc @ellert @bellenot . # This Pull request:. ## Changes or fixes:. Sets `builtin_gtest` to `OFF` by default. It is already the case that `builtin_gtest` will be enabled automatically if `GTest` is not found. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12149
https://github.com/root-project/root/pull/12149:396,deployability,updat,updated,396,"Revert ""Change default value for builtin_gtest option to ON""; This reverts commit 8e355c2c565af555f75209ea0f1c2ce255f85cc6 from #10301. /cc @ellert @bellenot . # This Pull request:. ## Changes or fixes:. Sets `builtin_gtest` to `OFF` by default. It is already the case that `builtin_gtest` will be enabled automatically if `GTest` is not found. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12149
https://github.com/root-project/root/pull/12149:366,safety,test,tested,366,"Revert ""Change default value for builtin_gtest option to ON""; This reverts commit 8e355c2c565af555f75209ea0f1c2ce255f85cc6 from #10301. /cc @ellert @bellenot . # This Pull request:. ## Changes or fixes:. Sets `builtin_gtest` to `OFF` by default. It is already the case that `builtin_gtest` will be enabled automatically if `GTest` is not found. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12149
https://github.com/root-project/root/pull/12149:396,safety,updat,updated,396,"Revert ""Change default value for builtin_gtest option to ON""; This reverts commit 8e355c2c565af555f75209ea0f1c2ce255f85cc6 from #10301. /cc @ellert @bellenot . # This Pull request:. ## Changes or fixes:. Sets `builtin_gtest` to `OFF` by default. It is already the case that `builtin_gtest` will be enabled automatically if `GTest` is not found. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12149
https://github.com/root-project/root/pull/12149:396,security,updat,updated,396,"Revert ""Change default value for builtin_gtest option to ON""; This reverts commit 8e355c2c565af555f75209ea0f1c2ce255f85cc6 from #10301. /cc @ellert @bellenot . # This Pull request:. ## Changes or fixes:. Sets `builtin_gtest` to `OFF` by default. It is already the case that `builtin_gtest` will be enabled automatically if `GTest` is not found. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12149
https://github.com/root-project/root/pull/12149:306,testability,automat,automatically,306,"Revert ""Change default value for builtin_gtest option to ON""; This reverts commit 8e355c2c565af555f75209ea0f1c2ce255f85cc6 from #10301. /cc @ellert @bellenot . # This Pull request:. ## Changes or fixes:. Sets `builtin_gtest` to `OFF` by default. It is already the case that `builtin_gtest` will be enabled automatically if `GTest` is not found. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12149
https://github.com/root-project/root/pull/12149:366,testability,test,tested,366,"Revert ""Change default value for builtin_gtest option to ON""; This reverts commit 8e355c2c565af555f75209ea0f1c2ce255f85cc6 from #10301. /cc @ellert @bellenot . # This Pull request:. ## Changes or fixes:. Sets `builtin_gtest` to `OFF` by default. It is already the case that `builtin_gtest` will be enabled automatically if `GTest` is not found. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12149
https://github.com/root-project/root/pull/12150:21,deployability,version,version,21,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:342,deployability,version,versioned,342,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:352,deployability,version,version,352,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:438,deployability,version,version,438,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:477,deployability,version,version,477,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:623,deployability,updat,updated,623,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:501,energy efficiency,current,currently,501,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:21,integrability,version,version,21,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:342,integrability,version,versioned,342,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:352,integrability,version,version,352,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:438,integrability,version,version,438,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:477,integrability,version,version,477,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:21,modifiability,version,version,21,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:234,modifiability,variab,variable,234,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:342,modifiability,version,versioned,342,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:352,modifiability,version,version,352,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:438,modifiability,version,version,438,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:477,modifiability,version,version,477,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:319,performance,time,time,319,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:209,safety,prevent,prevent,209,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:593,safety,test,tested,593,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:623,safety,updat,updated,623,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:209,security,preven,prevent,209,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:623,security,updat,updated,623,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/pull/12150:593,testability,test,tested,593,CMake: fix incorrect version for finding llvm-config; # This Pull request:. ## Changes or fixes:. Fixes that CMake was still trying to look for `llvm-config-9` instead of `llvm-config-13` after for #10294. To prevent this I added two variable in the beginning of the file so that it is less likely to be forgotten next time. I also moved the versioned version before the unversioned one. This should make sure it actually takes the right version if `llvm-config` defaults to a version that is not 13 (currently the case in Debian e.g.). /cc @hahnjo @vgvassilev @bellenot. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12150
https://github.com/root-project/root/issues/12151:1012,availability,Error,Error,1012,"o non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three opti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1057,availability,operat,operation,1057,"[x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1129,availability,Error,Error,1129,"/github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - C",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1145,availability,Error,Error,1145,"-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1185,availability,Error,Error,1185,"D [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir acco",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1313,availability,error,error,1313,"e very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2692,availability,Operat,Operating,2692,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2767,availability,down,download,2767,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:516,deployability,Build,Build,516,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:578,deployability,configurat,configuration,578,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:592,deployability,fail,fails,592,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:660,deployability,version,version,660,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:734,deployability,build,building,734,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:790,deployability,version,version,790,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:804,deployability,VERSION,VERSION,804,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1218,deployability,modul,modules,1218,"ira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is foun",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1357,deployability,modul,modules,1357," for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1494,deployability,modul,modules,1494,behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forg,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1653,deployability,modul,modules,1653,"ng version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1786,deployability,modul,modules,1786,"version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2570,deployability,build,build,2570,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2612,deployability,Build,Build,2612,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2680,deployability,version,version,2680,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2749,deployability,instal,install,2749,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:578,integrability,configur,configuration,578,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:660,integrability,version,version,660,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:790,integrability,version,version,790,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:804,integrability,VERSION,VERSION,804,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1286,integrability,configur,configuring,1286," If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2680,integrability,version,version,2680,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:578,modifiability,configur,configuration,578,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:660,modifiability,version,version,660,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:790,modifiability,version,version,790,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:804,modifiability,VERSION,VERSION,804,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1218,modifiability,modul,modules,1218,"ira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is foun",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1286,modifiability,configur,configuring,1286," If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1357,modifiability,modul,modules,1357," for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1494,modifiability,modul,modules,1494,behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forg,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1653,modifiability,modul,modules,1653,"ng version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1786,modifiability,modul,modules,1786,"version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2680,modifiability,version,version,2680,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1012,performance,Error,Error,1012,"o non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three opti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1129,performance,Error,Error,1129,"/github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - C",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1145,performance,Error,Error,1145,"-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1185,performance,Error,Error,1185,"D [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir acco",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1313,performance,error,error,1313,"e very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:592,reliability,fail,fails,592,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1012,safety,Error,Error,1012,"o non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three opti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1129,safety,Error,Error,1129,"/github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - C",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1145,safety,Error,Error,1145,"-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1185,safety,Error,Error,1185,"D [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir acco",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1218,safety,modul,modules,1218,"ira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is foun",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1313,safety,error,error,1313,"e very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1357,safety,modul,modules,1357," for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1494,safety,modul,modules,1494,behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forg,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1653,safety,modul,modules,1653,"ng version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1786,safety,modul,modules,1786,"version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2229,safety,prevent,prevents,2229,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2524,safety,input,input,2524,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:578,security,configur,configuration,578,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1286,security,configur,configuring,1286," If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2229,security,preven,prevents,2229,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2845,testability,context,context,2845,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2874,testability,context,context,2874,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:450,usability,clear,clear,450,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:498,usability,behavi,behavior,498,"CMakes writes to non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1012,usability,Error,Error,1012,"o non-writeable dir with `builtin_llvm=OFF`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three opti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1129,usability,Error,Error,1129,"/github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - C",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1145,usability,Error,Error,1145,"-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1185,usability,Error,Error,1185,"D [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir acco",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1313,usability,error,error,1313,"e very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Build master with `builtin_llvm=OFF` using system LLVM. CMake configuration fails with:. ```. -- Using LLVM external library - 13.0.1. -- Clang version: 13.0.1. -- Could NOT find Git (missing: GIT_EXECUTABLE) . -- Not building amdgpu-arch: hsa-runtime64 not found. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/include/c++/12:/usr/include/x86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1902,usability,behavi,behavior,1902,"86_64-linux-gnu/c++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:1920,usability,clear,clear,1920,"++/12:/usr/include/c++/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2379,usability,behavi,behavior,2379,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12151:2524,usability,input,input,2524,"+/12/backward' at runtime. -- And then fallback to: 'ccache'. CMake Error: Could not open file for write in copy operation /usr/lib/llvm-13/lib/cmake/cling/ClingConfig.cmake.tmp. CMake Error: : System Error: No such file or directory. CMake Error at interpreter/cling/cmake/modules/CMakeLists.txt:22 (configure_file):. configure_file Problem configuring file. ```. The error is thrown in [interpreter/cling/cmake/modules/CMakeLists.txt:22-25](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L22-L25) when trying to create a file in `cling_cmake_builddir` which is not writable. The bug originates from [interpreter/cling/cmake/modules/CMakeLists.txt:5](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/interpreter/cling/cmake/modules/CMakeLists.txt#L5) and was introduced in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 from #10294. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. I think there are three options to fix this:. - 2b283ccf3a624f70dab3e8783d361d25c13e2c65 is reverted (the commit mentions some fixes though). - CMake checks for `builtin_llvm=OFF` and sets the dir accordingly. - Some other path is found that prevents the issues mentioned in 2b283ccf3a624f70dab3e8783d361d25c13e2c65 (maybe `CLING_BINARY_DIR`?). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Build from master with `builtin_llvm=OFF`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master, Debian Sid. ### Additional context. <!--. Add any other context about the problem here. -->. /cc @hahnjo @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12151
https://github.com/root-project/root/issues/12152:608,availability,error,error,608,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:8986,availability,error,error,8986,"eter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9049,availability,error,error,9049,"re-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you exp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9703,availability,error,error,9703,"c/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:10481,availability,operat,operating,10481,".0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:10766,availability,down,downstream,10766,"ue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:11592,availability,Operat,Operating,11592,"0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:11667,availability,down,download,11667,"0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:0,deployability,Build,Building,0,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9,deployability,fail,fails,9,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:527,deployability,Build,Building,527,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:602,deployability,build,build,602,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:5515,deployability,FAIL,FAILED,5515,"-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9453,deployability,fail,failed,9453,"Serialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and onl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:10868,deployability,build,build,10868,"0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:11409,deployability,build,build,11409,"0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:11580,deployability,version,version,11580,"0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:11649,deployability,instal,install,11649,"0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:673,energy efficiency,core,core,673,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:711,energy efficiency,core,core,711,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:749,energy efficiency,core,core,749,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:790,energy efficiency,core,core,790,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:831,energy efficiency,core,core,831,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:866,energy efficiency,core,core,866,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:901,energy efficiency,core,core,901,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:936,energy efficiency,core,core,936,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:1981,energy efficiency,core,core,1981,"6_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:2046,energy efficiency,core,core,2046,"clude"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:2112,energy efficiency,core,core,2112,"/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:2194,energy efficiency,core,core,2194,"ls/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:2701,energy efficiency,core,core,2701,"diagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:2758,energy efficiency,core,core,2758,"ough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:2822,energy efficiency,core,core,2822,"tual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:2886,energy efficiency,core,core,2886," -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:2951,energy efficiency,core,core,2951,"std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3017,energy efficiency,core,core,3017,"c/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDia",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3077,energy efficiency,core,core,3077,"ir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3138,energy efficiency,core,core,3138,"gen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3192,energy efficiency,core,core,3192,"core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMak",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3253,energy efficiency,core,core,3253," && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3316,energy efficiency,core,core,3316,"ILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3384,energy efficiency,core,core,3384," -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3440,energy efficiency,core,core,3440,"ays -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3506,energy efficiency,core,core,3506,"-Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3563,energy efficiency,core,core,3563,"read -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3633,energy efficiency,core,core,3633,""" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3699,energy efficiency,core,core,3699,"core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/ll",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3764,energy efficiency,core,core,3764,"ngutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-obj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3830,energy efficiency,core,core,3830,"en/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpret",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3901,energy efficiency,core,core,3901,"eFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3966,energy efficiency,core,core,3966,"eFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interprete",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:4034,energy efficiency,core,core,4034,"iles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangD",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:4101,energy efficiency,core,core,4101,"ctgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:4171,energy efficiency,core,core,4171,"/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerializatio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:4238,energy efficiency,core,core,4238,"nRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:4319,energy efficiency,core,core,4319,"dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:4387,energy efficiency,core,core,4387,"dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:4452,energy efficiency,core,core,4452,"/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:5996,energy efficiency,core,core,5996,"d.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6053,energy efficiency,core,core,6053,"/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6117,energy efficiency,core,core,6117,"ewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6181,energy efficiency,core,core,6181,"reter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6246,energy efficiency,core,core,6246,"ngAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6312,energy efficiency,core,core,6312,"reter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDia",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6372,energy efficiency,core,core,6372,"lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6433,energy efficiency,core,core,6433,"rpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6487,energy efficiency,core,core,6487,"lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMak",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6548,energy efficiency,core,core,6548," && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6611,energy efficiency,core,core,6611,"ILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6679,energy efficiency,core,core,6679," -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6735,energy efficiency,core,core,6735,"ays -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6801,energy efficiency,core,core,6801,"-Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6858,energy efficiency,core,core,6858,"read -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6928,energy efficiency,core,core,6928,""" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6994,energy efficiency,core,core,6994,"core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/ll",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:7059,energy efficiency,core,core,7059,"ngutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-obj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:7125,energy efficiency,core,core,7125,"en/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpret",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:7196,energy efficiency,core,core,7196,"eFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:7261,energy efficiency,core,core,7261,"eFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interprete",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:7329,energy efficiency,core,core,7329,"iles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangD",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:7396,energy efficiency,core,core,7396,"ctgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:7466,energy efficiency,core,core,7466,"/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerializatio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:7533,energy efficiency,core,core,7533,"nRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:7614,energy efficiency,core,core,7614,"dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:7682,energy efficiency,core,core,7682,"dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:7747,energy efficiency,core,core,7747,"/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypeInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingValue.cxx.o -Wl,-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:8823,energy efficiency,core,core,8823,"lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9540,energy efficiency,core,core,9540,"angAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cpp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:10244,energy efficiency,Current,Currently,10244,"ibLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:10272,energy efficiency,core,core,10272," libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at leas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:10401,energy efficiency,core,core,10401," attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:10943,integrability,pub,public,10943,"0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:11580,integrability,version,version,11580,"0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:1334,interoperability,format,format-security,1334,"to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-prote",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:1653,interoperability,format,format-security,1653,"GBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libC",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:2371,interoperability,format,format-security,2371,"=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:2638,interoperability,share,shared,2638,"mat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/met",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3424,interoperability,XML,XMLReader,3424,"ics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.di",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:5666,interoperability,format,format-security,5666,"aProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:5933,interoperability,share,shared,5933,"langRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/met",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6719,interoperability,XML,XMLReader,6719,"ics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.di",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9966,interoperability,conflict,conflict,9966,"nu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:1913,modifiability,paramet,parameter,1913,"""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3356,modifiability,Variab,VariableSelectionRule,3356,"ror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCli",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6651,modifiability,Variab,VariableSelectionRule,6651,"ror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCli",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:11580,modifiability,version,version,11580,"0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:608,performance,error,error,608,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:1357,performance,time,time,1357,"sting report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wfor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:1676,performance,time,time,1676,"dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:2394,performance,time,time,2394,"color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:5689,performance,time,time,5689,"rpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:8986,performance,error,error,8986,"eter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9049,performance,error,error,9049,"re-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you exp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9703,performance,error,error,9703,"c/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9,reliability,fail,fails,9,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:5515,reliability,FAIL,FAILED,5515,"-rpath,/usr/lib/llvm-13/lib::::::::::::::::::::::::::::::::::::::::::::: interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingMetaProcessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9453,reliability,fail,failed,9453,"Serialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and onl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:10715,reliability,doe,doesn,10715,"mbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:608,safety,error,error,608,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:8986,safety,error,error,8986,"eter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9049,safety,error,error,9049,"re-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you exp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9703,safety,error,error,9703,"c/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:11363,safety,input,input,11363,"0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:1341,security,secur,security,1341,"add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protecto",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:1660,security,secur,security,1660,"ILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libClin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:2378,security,secur,security,2378,"-fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:2619,security,hash,hash-style,2619,"ctor-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassIn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:3178,security,Scanner,Scanner,3178,"GBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'. <<snip>>. [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:5673,security,secur,security,5673,"ocessor.a interpreter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:5914,security,hash,hash-style,5914,"llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassIn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:6473,security,Scanner,Scanner,6473,"lib/llvm-13/lib/libLLVM-13.so.1 && :. FAILED: lib/libCling.so.6.27.99 . : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingBaseClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallbacks.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingCallFunc.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingClassInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDataMemberInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDeclInfo.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingDiagnostics.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMemberIter.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodArgInfo.cxx.o core/metacl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:11771,testability,context,context,11771,"0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:11800,testability,context,context,11800,"0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:461,usability,clear,clear,461,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:509,usability,behavi,behavior,509,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:608,usability,error,error,608,"Building fails with `builtin_llvm=OFF` due to unintend libbsd linking; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:1103,usability,tool,tools,1103," Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:1193,usability,tool,tools,1193," AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```. [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:8986,usability,error,error,8986,"eter/llvm/src/lib/libclingUtils.a -Wl,--unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9025,usability,command,command,9025,"unresolved-symbols=ignore-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise desc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9049,usability,error,error,9049,"re-in-object-files interpreter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you exp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9075,usability,statu,status,9075,"eter/llvm/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9703,usability,error,error,9703,"c/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9742,usability,command,command,9742,"/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:9989,usability,behavi,behavior,9989,"dding symbols: DSO missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:10007,usability,clear,clear,10007,"O missing from command line. collect2: error: ld returned 1 exit status. ```. Digging a bit deeper with the `-Wl,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_ST",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:10117,usability,Clear,Clearly,10117,"l,--verbose` linker flag:. ```. <<snip>>. attempt to open /usr/lib/llvm-13/lib/libLLVM-13.so.1 succeeded. /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libedit.so.2 needed by /usr/lib/llvm-13/lib/libLLVM-13.so.1. <<snip>>. libbsd.so.0 needed by /lib/x86_64-linux-gnu/libedit.so.2. attempt to open /usr/lib/llvm-13/lib/libbsd.so.0 failed. <<snip>>. found libbsd.so.0 at /lib/x86_64-linux-gnu/libbsd.so.0. /usr/bin/ld: core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o: undefined reference to symbol 'strlcat@@LIBBSD_0.0'. /usr/bin/ld: /lib/x86_64-linux-gnu/libbsd.so.0: error adding symbols: DSO missing from command line. ```. So the issue is that the system `libLLVM-13.so.1` links against `libbsd.so.0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:11218,usability,behavi,behavior,11218,"0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/issues/12152:11363,usability,input,input,11363,"0`, which defines `strlcat` as a global symbol. Since `rootcling_impl` also defines this symbol as global, there is an unresolved conflict. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Tbh I'm not sure how this should be fixed. Clearly by default there is no `strlcat` et al on linux by default, *but* there is libbsd and this should be checked somwhere. Currently this check is in [core/foundation/inc/ROOT/RConfig.hxx:248-276](https://github.com/root-project/root/blob/fd244e56523bf5c5957bfae5117b36ca73c27813/core/foundation/inc/ROOT/RConfig.hxx#L248-L276) and only takes into account the operating system. Check with [`__has_include`](https://en.cppreference.com/w/cpp/preprocessor/include) if `bsd/string.h` exists on other unixes *might* be a way to do it, but I would have no clue how to do the proper linking. Also it doesn't fix the issue if libbsd is introduced in a downstream project using ROOT. Alternatively, I think the ""better"" solution is to add a `link_libbsd` build option (disabled by default ofc). If enabled, it adds `-lbsd` to the public link flags of `Clib` and sets some compile flag like `HAS_STRLCPY_VIA_LIBBSD` (in addition to `HAS_STRLCPY`) that triggers the inclusion of bsd/string.h in clib/inc/strlcpy.h in the `#else` case of `#ifndef HAS_STRLCPY`. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. git master, `builtin_llvm=OFF`, #12151 fixed via `${CLING_BINARY_DIR}` instead of `${LLVM_BINARY_DIR}`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. master, Debian Sid, LLVM 13.0.1-11, gcc 12.2.0-3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12152
https://github.com/root-project/root/pull/12153:446,deployability,updat,updated,446,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12153:58,integrability,configur,configure,58,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12153:58,modifiability,configur,configure,58,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12153:163,safety,input,input,163,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12153:284,safety,test,test,284,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12153:362,safety,test,testing,362,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12153:416,safety,test,tested,416,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12153:446,safety,updat,updated,446,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12153:58,security,configur,configure,58,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12153:446,security,updat,updated,446,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12153:284,testability,test,test,284,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12153:362,testability,test,testing,362,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12153:416,testability,test,tested,416,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12153:163,usability,input,input,163,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12153:331,usability,confirm,confirm,331,CMake: use CLING_BINARY_DIR instead of LLVM_BINARY_DIR to configure ClingConfig.cmake; # This Pull request:. ## Changes or fixes:. Potential fix for #12151. Needs input from @vgvassilev for why `cling_cmake_builddir` was changed in 2b283ccf3a624f70dab3e8783d361d25c13e2c65. I did not test this for the non-builtin case and I can't confirm this works fully since testing it is blocked by #12152. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11920.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12153
https://github.com/root-project/root/pull/12154:255,deployability,modul,module,255,"Fix libbsd linking problem with `builtin_llvm=OFF`; Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:960,deployability,build,buildsystem,960,"Fix libbsd linking problem with `builtin_llvm=OFF`; Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:2055,deployability,updat,updated,2055,">. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to work. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12152.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:1159,energy efficiency,Current,Currently,1159,">. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to work. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12152.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:463,integrability,pub,public,463,"Fix libbsd linking problem with `builtin_llvm=OFF`; Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:478,integrability,interfac,interface,478,"Fix libbsd linking problem with `builtin_llvm=OFF`; Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:1722,integrability,PUB,PUBLIC,1722,">. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to work. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12152.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:478,interoperability,interfac,interface,478,"Fix libbsd linking problem with `builtin_llvm=OFF`; Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:255,modifiability,modul,module,255,"Fix libbsd linking problem with `builtin_llvm=OFF`; Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:478,modifiability,interfac,interface,478,"Fix libbsd linking problem with `builtin_llvm=OFF`; Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:519,reliability,doe,does,519,"Fix libbsd linking problem with `builtin_llvm=OFF`; Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:255,safety,modul,module,255,"Fix libbsd linking problem with `builtin_llvm=OFF`; Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:2025,safety,test,tested,2025,">. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to work. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12152.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:2055,safety,updat,updated,2055,">. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to work. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12152.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:52,security,Sign,Signed-off-by,52,"Fix libbsd linking problem with `builtin_llvm=OFF`; Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:2055,security,updat,updated,2055,">. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to work. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12152.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:2025,testability,test,tested,2025,">. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to work. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12152.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:746,usability,document,documentation,746,"Fix libbsd linking problem with `builtin_llvm=OFF`; Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:813,usability,help,help,813,"Fix libbsd linking problem with `builtin_llvm=OFF`; Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:935,usability,help,help,935,"Fix libbsd linking problem with `builtin_llvm=OFF`; Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to wo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:1051,usability,help,help,1051,"igned-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to work. ## Checklist:. - [ ] tested changes locally. - [ ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/pull/12154:1062,usability,command,command,1062," Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target. - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled. - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined. - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:. - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS). - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries). - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:. ```cmake. ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx. $<TARGET_OBJECTS:Clib>. $<TARGET_OBJECTS:ClingUtils>. $<TARGET_OBJECTS:Dictgen>. $<TARGET_OBJECTS:Foundation_Stage1>. LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}. NOINSTALL). ```. I link against the `Clib` object library, but ignores any target properties like for example this line:. ```cmake. # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152. if(libbsd). target_link_libraries(Clib PUBLIC LIBBSD::libbsd). endif(). ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to work. ## Checklist:. - [ ] tested changes locally. - [ ] updated the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12154
https://github.com/root-project/root/issues/12155:4,availability,fault,fault,4,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:532,availability,slo,slot,532,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:583,availability,fault,fault,583,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:605,availability,fault,fault,605,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:647,availability,slo,slot,647,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:779,availability,fault,faults,779,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1204,availability,slo,slot,1204,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1367,availability,slo,slot,1367,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1550,availability,Operat,Operating,1550,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1625,availability,down,download,1625,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1716,availability,slo,slot,1716,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1029,deployability,build,build,1029,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1538,deployability,version,version,1538,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1607,deployability,instal,install,1607,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:4,energy efficiency,fault,fault,4,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:583,energy efficiency,fault,fault,583,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:605,energy efficiency,fault,fault,605,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:779,energy efficiency,fault,faults,779,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1538,integrability,version,version,1538,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1538,modifiability,version,version,1538,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:4,performance,fault,fault,4,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:583,performance,fault,fault,583,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:605,performance,fault,fault,605,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:779,performance,fault,faults,779,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:4,reliability,fault,fault,4,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:532,reliability,slo,slot,532,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:583,reliability,fault,fault,583,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:605,reliability,fault,fault,605,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:647,reliability,slo,slot,647,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:779,reliability,fault,faults,779,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1204,reliability,slo,slot,1204,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1367,reliability,slo,slot,1367,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1716,reliability,slo,slot,1716,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:4,safety,fault,fault,4,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:583,safety,fault,fault,583,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:605,safety,fault,fault,605,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:779,safety,fault,faults,779,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:983,safety,input,input,983,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1740,testability,context,context,1740,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:1769,testability,context,context,1769,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:435,usability,clear,clear,435,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:483,usability,behavi,behavior,483,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:678,usability,behavi,behavior,678,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:696,usability,clear,clear,696,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:838,usability,behavi,behavior,838,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12155:983,usability,input,input,983,"Seg fault in RooMomentMorphND for ROOT 6.29; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In ROOT 6.29 (dev3 LCG nightly slot on cvmfs) RooMomentMorphND cause segmentation fault. . (there is no fault e.g. for ROOT 6.26/04 ( LCG_102 LCG slot on cvmfs). . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No segmentation faults... . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. My oversimplified script in https://gist.github.com/VanyaBelyaev/2373dae80b24b74d75026420efde8043 . Usage on cvmsf, LCG dev3 nightly slot (ROOT 6.29/01) : . ( source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . one gets segfaultt . while for LCG_102 slot on cevmfs (ROOT 6.26/04) everything is OK :. ( source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; python ./tst_morph.py ) . ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. - ROOT 6.29/01. - lxplus @ CERN. - LCG dev3 nightly slot . . ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12155
https://github.com/root-project/root/issues/12156:52,availability,Error,Error,52,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:624,availability,error,error,624,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5927,availability,Error,Error,5927," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5977,availability,ERROR,ERROR,5977," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6540,availability,Operat,Operating,6540," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6615,availability,down,download,6615," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:0,deployability,Build,Building,0,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9,deployability,fail,fails,9,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:554,deployability,Build,Building,554,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:618,deployability,build,build,618,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:637,deployability,FAIL,FAILED,637,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:703,deployability,build,builddir,703,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:757,deployability,build,builddir,757,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:812,deployability,build,builddir,812,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:895,deployability,build,builddir,895,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:937,deployability,build,builddir,937,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1050,deployability,build,builddir,1050,"ror: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Proj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1156,deployability,build,builddir,1156,"b](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1215,deployability,build,builddir,1215,"). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1275,deployability,build,builddir,1275,"ject %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1910,deployability,build,builddir,1910,/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROO,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:1972,deployability,build,builddir,1972,cling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../cli,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6136,deployability,Build,Build,6136," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6151,deployability,fail,fail,6151," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6395,deployability,build,build,6395," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6437,deployability,Build,Building,6437," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6528,deployability,version,version,6528," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6597,deployability,instal,install,6597," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:645,energy efficiency,core,core,645,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:666,energy efficiency,Core,Core,666,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:712,energy efficiency,core,core,712,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:770,energy efficiency,Core,Core,770,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:821,energy efficiency,core,core,821,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:946,energy efficiency,core,core,946,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2020,energy efficiency,core,core,2020,/home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/x,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2064,energy efficiency,core,core,2064,Core.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2111,energy efficiency,core,core,2111,T -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Button,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2155,energy efficiency,core,core,2155,uilddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2205,energy efficiency,core,core,2205,ts/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2255,energy efficiency,core,core,2255,han/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TA,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2299,energy efficiency,core,core,2299,ptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h T,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2349,energy efficiency,core,core,2349,ltin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2402,energy efficiency,core,core,2402,RTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirec,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2452,energy efficiency,core,core,2452,T_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2495,energy efficiency,core,core,2495,H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMa,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2539,energy efficiency,core,core,2539,ilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2583,energy efficiency,core,core,2583,ude/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TOb,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2632,energy efficiency,core,core,2632,e/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2681,energy efficiency,core,core,2681,inux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2727,energy efficiency,core,core,2727,_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2770,energy efficiency,core,core,2770,lerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h T,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2829,energy efficiency,core,core,2829,/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2872,energy efficiency,core,core,2872,clude -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2916,energy efficiency,core,core,2916,/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirectory.h TSyste,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:2960,energy efficiency,core,core,2960,ects/ROOT/builddir/ginclude -I/home/stephan/Projects/ROOT/core/base/inc -I/home/stephan/Projects/ROOT/core/base/v7/inc -I/home/stephan/Projects/ROOT/core/clib/inc -I/home/stephan/Projects/ROOT/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirectory.h TSystemFile.h TSystem.h TTask.h TThreadSlots.h TTi,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5888,energy efficiency,core,core,5888," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3149,integrability,Messag,MessageTypes,3149,core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirectory.h TSystemFile.h TSystem.h TTask.h TThreadSlots.h TTime.h TTimer.h TTimeStamp.h TUri.h TUrl.h TUUID.h TVersionCheck.h TVirtualAuth.h TVirtualFFT.h TVirtualGL.h TVirtualMonitoring.h TVirtualMutex.h TVirtualPadEditor.h TVirtualPad.h TVirtualPadPain,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6528,integrability,version,version,6528," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:3149,interoperability,Messag,MessageTypes,3149,core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirectory.h TSystemFile.h TSystem.h TTask.h TThreadSlots.h TTime.h TTimer.h TTimeStamp.h TUri.h TUrl.h TUUID.h TVersionCheck.h TVirtualAuth.h TVirtualFFT.h TVirtualGL.h TVirtualMonitoring.h TVirtualMutex.h TVirtualPadEditor.h TVirtualPad.h TVirtualPadPain,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6528,modifiability,version,version,6528," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:52,performance,Error,Error,52,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:624,performance,error,error,624,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5927,performance,Error,Error,5927," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5977,performance,ERROR,ERROR,5977," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:9,reliability,fail,fails,9,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:637,reliability,FAIL,FAILED,637,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6142,reliability,doe,does,6142," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6151,reliability,fail,fail,6151," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:52,safety,Error,Error,52,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:624,safety,error,error,624,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5927,safety,Error,Error,5927," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5977,safety,ERROR,ERROR,5977," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6349,safety,input,input,6349," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6707,testability,context,context,6707," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6736,testability,context,context,6736," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:40,usability,Command,CommandLine,40,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:52,usability,Error,Error,52,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:488,usability,clear,clear,488,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:536,usability,behavi,behavior,536,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:624,usability,error,error,624,"Building fails with `builtin_llvm=OFF`: CommandLine Error: Option 'W' registered more than once!; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Building git master with #12154 on top results in the following build error:. ```. FAILED: core/G__Core.cxx lib/Core.pcm /home/stephan/Projects/ROOT/builddir/core/G__Core.cxx /home/stephan/Projects/ROOT/builddir/lib/Core.pcm . cd /home/stephan/Projects/ROOT/builddir/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/stephan/Projects/ROOT/builddir/lib: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/stephan/Projects/ROOT/builddir/lib/libCore.so -excludePath /home/stephan/Projects/ROOT -excludePath /home/stephan/Projects/ROOT/builddir/ginclude -excludePath /home/stephan/Projects/ROOT/builddir/externals -excludePath /home/stephan/Projects/ROOT/builddir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -D_COMPLEX_H -D__CLANG_STDATOMIC_H -compilerI/usr/include/c++/12 -compilerI/usr/include/x86_64-linux-gnu/c++/12 -compilerI/usr/include/c++/12/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/12/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/stephan/Projects/ROOT/builddir/include -I/usr/include -I/home/stephan/Projects/ROOT/builddir/ginclude -I/home/st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5915,usability,Command,CommandLine,5915," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5927,usability,Error,Error,5927," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:5977,usability,ERROR,ERROR,5977," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6012,usability,Command,CommandLine,6012," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6051,usability,behavi,behavior,6051," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6069,usability,clear,clear,6069," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6204,usability,behavi,behavior,6204," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/issues/12156:6349,usability,input,input,6349," TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /home/stephan/Projects/ROOT/core/base/inc/LinkDef.h. : CommandLine Error: Option 'W' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Build does not fail. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Building git master with #12154 and `builtin_llvm=OFF libbsd=ON`. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. git master with #12154, 13.0.1-11+b2. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12156
https://github.com/root-project/root/pull/12157:58,integrability,Batch,BatchMode,58,[RF] Final changes to make the ATLAS benchmarks run with `BatchMode`; More detail in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12157
https://github.com/root-project/root/pull/12157:58,performance,Batch,BatchMode,58,[RF] Final changes to make the ATLAS benchmarks run with `BatchMode`; More detail in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12157
https://github.com/root-project/root/issues/12158:0,availability,error,error,0,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:17,availability,down,download,17,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:47,availability,down,download,47,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:154,availability,ERROR,ERROR,154,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:219,availability,error,error,219,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:0,performance,error,error,0,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:154,performance,ERROR,ERROR,154,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:219,performance,error,error,219,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:0,safety,error,error,0,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:154,safety,ERROR,ERROR,154,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:219,safety,error,error,219,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:0,usability,error,error,0,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:154,usability,ERROR,ERROR,154,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:203,usability,help,help,203,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/issues/12158:219,usability,error,error,219,"error on ROOT VM download; Hi,. I am trying to download the ROOT VM from the https://cernbox.cern.ch/index.php/s/ZF5pffhZuZjwgAI, but there is an UNKNOWN ERROR while entering this link. would you please help me on this error?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12158
https://github.com/root-project/root/pull/12159:13,safety,Avoid,Avoid,13,[DF][PyROOT] Avoid deprecated numpy.object; Fixes #12148,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12159
https://github.com/root-project/root/pull/12160:96,performance,memor,memory,96,"[RF] Fix duplicate ownership problem in RooMomentMorph(Func)ND; The commit 4c9c5d6b49 fixed the memory leaking of the `RooMomentMorph(Func)ND::Grid2::_grid` member by deleting it in the constructor, but it didn't consider that the copy constructor didn't make a clone of the `_grid`, ending up with double ownership. Now, the copy constructor is also cloning the binnings, just like the regular constructor, and the double ownership is avoided. Closes #12155.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12160
https://github.com/root-project/root/pull/12160:436,safety,avoid,avoided,436,"[RF] Fix duplicate ownership problem in RooMomentMorph(Func)ND; The commit 4c9c5d6b49 fixed the memory leaking of the `RooMomentMorph(Func)ND::Grid2::_grid` member by deleting it in the constructor, but it didn't consider that the copy constructor didn't make a clone of the `_grid`, ending up with double ownership. Now, the copy constructor is also cloning the binnings, just like the regular constructor, and the double ownership is avoided. Closes #12155.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12160
https://github.com/root-project/root/pull/12160:96,usability,memor,memory,96,"[RF] Fix duplicate ownership problem in RooMomentMorph(Func)ND; The commit 4c9c5d6b49 fixed the memory leaking of the `RooMomentMorph(Func)ND::Grid2::_grid` member by deleting it in the constructor, but it didn't consider that the copy constructor didn't make a clone of the `_grid`, ending up with double ownership. Now, the copy constructor is also cloning the binnings, just like the regular constructor, and the double ownership is avoided. Closes #12155.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12160
https://github.com/root-project/root/pull/12160:445,usability,Close,Closes,445,"[RF] Fix duplicate ownership problem in RooMomentMorph(Func)ND; The commit 4c9c5d6b49 fixed the memory leaking of the `RooMomentMorph(Func)ND::Grid2::_grid` member by deleting it in the constructor, but it didn't consider that the copy constructor didn't make a clone of the `_grid`, ending up with double ownership. Now, the copy constructor is also cloning the binnings, just like the regular constructor, and the double ownership is avoided. Closes #12155.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12160
https://github.com/root-project/root/pull/12161:53,energy efficiency,GPU,GPU,53,[RF] Implement `RooBMixDecay` in RooBatchCompute for GPU support; It was validated with the unbinned benchmarks in `rootbench` that the. implementation is correct.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12161
https://github.com/root-project/root/pull/12161:53,performance,GPU,GPU,53,[RF] Implement `RooBMixDecay` in RooBatchCompute for GPU support; It was validated with the unbinned benchmarks in `rootbench` that the. implementation is correct.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12161
https://github.com/root-project/root/pull/12161:73,safety,valid,validated,73,[RF] Implement `RooBMixDecay` in RooBatchCompute for GPU support; It was validated with the unbinned benchmarks in `rootbench` that the. implementation is correct.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12161
https://github.com/root-project/root/pull/12161:73,security,validat,validated,73,[RF] Implement `RooBMixDecay` in RooBatchCompute for GPU support; It was validated with the unbinned benchmarks in `rootbench` that the. implementation is correct.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12161
https://github.com/root-project/root/pull/12161:57,usability,support,support,57,[RF] Implement `RooBMixDecay` in RooBatchCompute for GPU support; It was validated with the unbinned benchmarks in `rootbench` that the. implementation is correct.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12161
https://github.com/root-project/root/issues/12162:10,availability,failur,failure,10,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:122,availability,failur,failure,122,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:281,availability,failur,failure,281,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2419,availability,failur,failures,2419,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2463,availability,failur,failure,2463,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2625,availability,Operat,Operating,2625,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:10,deployability,fail,failure,10,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:122,deployability,fail,failure,122,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:162,deployability,Fail,Fails,162,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:183,deployability,build,build,183,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:208,deployability,Build,Build,208,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:281,deployability,fail,failure,281,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:449,deployability,Fail,Failed,449,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:877,deployability,FAIL,FAIL,877,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1815,deployability,FAIL,FAIL,1815,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2093,deployability,build,builddir,2093,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2102,deployability,build,build,2102,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2108,deployability,BUILD,BUILD,2108,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2411,deployability,FAIL,FAILED,2411,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2419,deployability,fail,failures,2419,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2463,deployability,fail,failure,2463,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2490,deployability,fail,fail,2490,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2537,deployability,fail,failing,2537,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2605,deployability,version,version,2605,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2698,deployability,build,build,2698,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2749,deployability,build,build,2749,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1117,integrability,event,events,1117,"t failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2605,integrability,version,version,2605,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:214,interoperability,architectur,architectures,214,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:311,interoperability,architectur,architecture,311,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2127,interoperability,bind,bindings,2127,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2572,interoperability,distribut,distribution,2572,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:175,modifiability,pac,package,175,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2127,modifiability,bind,bindings,2127,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2605,modifiability,version,version,2605,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2690,modifiability,pac,package,2690,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2741,modifiability,Pac,Package,2741,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:10,performance,failur,failure,10,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:122,performance,failur,failure,122,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:281,performance,failur,failure,281,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2419,performance,failur,failures,2419,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2463,performance,failur,failure,2463,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:10,reliability,fail,failure,10,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:122,reliability,fail,failure,122,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:162,reliability,Fail,Fails,162,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:281,reliability,fail,failure,281,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:449,reliability,Fail,Failed,449,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:877,reliability,FAIL,FAIL,877,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1815,reliability,FAIL,FAIL,1815,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2411,reliability,FAIL,FAILED,2411,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2419,reliability,fail,failures,2419,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2463,reliability,fail,failure,2463,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2490,reliability,fail,fail,2490,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2537,reliability,fail,failing,2537,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:5,safety,Test,Test,5,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:117,safety,Test,Test,117,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:367,safety,Test,Test,367,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:511,safety,Test,TestRooDataSetNumpy,511,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:560,safety,Test,Test,560,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:930,safety,Test,TestRooDataSetNumpy,930,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:981,safety,Test,Test,981,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1185,safety,Test,TestRooDataSetNumpy,1185,"ora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", lin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1245,safety,Test,Test,1245,"arch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1359,safety,Test,TestRooDataSetNumpy,1359,"st #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. -----------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1407,safety,test,test,1407,"aset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1501,safety,Test,TestRooDataSetNumpy,1501,"TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1552,safety,Test,Test,1552,"nge). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1660,safety,Test,TestRooDataSetNumpy,1660,"ke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1705,safety,Test,Test,1705,"000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build fro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1866,safety,Test,TestRooDataSetNumpy,1866,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1915,safety,Test,Test,1915,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2158,safety,test,test,2158,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2394,safety,test,tests,2394,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2477,safety,test,test,2477,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2545,safety,test,test,2545,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:5,testability,Test,Test,5,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:117,testability,Test,Test,117,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:367,testability,Test,Test,367,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:511,testability,Test,TestRooDataSetNumpy,511,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:560,testability,Test,Test,560,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:930,testability,Test,TestRooDataSetNumpy,930,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:981,testability,Test,Test,981,"[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy); ### Describe the bug. Test failure on i686 only with numpy 1.24.1. Fails during package build in Fedora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1185,testability,Test,TestRooDataSetNumpy,1185,"ora rawhide. Build architectures are i686, x86_64, aarch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", lin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1245,testability,Test,Test,1245,"arch64, ppc64le and s390x. So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~. 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1359,testability,Test,TestRooDataSetNumpy,1359,"st #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. -----------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1407,testability,test,test,1407,"aset-numpy ..........................***Failed 2.72 sec. test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1501,testability,Test,TestRooDataSetNumpy,1501,"TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1552,testability,Test,Test,1552,"nge). Test that rows with out-of-range values are skipped, both for ... . RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1660,testability,Test,TestRooDataSetNumpy,1660,"ke and David Kirkby . Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1705,testability,Test,Test,1705,"000-2013 NIKHEF, University of California & Stanford University. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build fro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1866,testability,Test,TestRooDataSetNumpy,1866,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:1915,testability,Test,Test,1915,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2050,testability,Trace,Traceback,2050,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2158,testability,test,test,2158,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2238,testability,assert,assertEqual,2238,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2291,testability,Assert,AssertionError,2291,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2394,testability,test,tests,2394,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2477,testability,test,test,2477,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2545,testability,test,test,2545,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2732,testability,context,context,2732,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/issues/12162:2450,usability,behavi,behavior,2450,"ity. All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] WARNING:DataHandling -- FAIL. test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy). Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events. ok. test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted). Test exporting to numpy and then importing back a weighted dataset. ... ok. test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic). Basic test with a real value and a category. ... ok. test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight). Test if the optional computation of derived weights works. ... ok. test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted). Test with a weighted dataset. ... ok. ======================================================================. FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range). Test that rows with out-of-range values are skipped, both for. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range. self.assertEqual(dataset_numpy.numEntries(), n_in_range). AssertionError: 42 != 0. ----------------------------------------------------------------------. Ran 6 tests in 1.621s. FAILED (failures=1). ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23. ### To Reproduce. 1. The failing test is part of the source distribution. ### Setup. 1. ROOT version 6.26.10. 2. Operating system Fedora Rawhide i686. 3. How you obtained ROOT - package build from source. ### Additional context. Package build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12162
https://github.com/root-project/root/pull/12163:283,availability,slo,slow-down,283,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak. symbols that the JIT had already emitted, instead only looking at dlsym. This. causes a significant increase in JITted symbols, and thus a significant slow-down. of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. (cherry picked from commit 23ca9fe)# This Pull request:.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/pull/12163:319,availability,restor,restores,319,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak. symbols that the JIT had already emitted, instead only looking at dlsym. This. causes a significant increase in JITted symbols, and thus a significant slow-down. of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. (cherry picked from commit 23ca9fe)# This Pull request:.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/pull/12163:62,deployability,upgrad,upgrade,62,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak. symbols that the JIT had already emitted, instead only looking at dlsym. This. causes a significant increase in JITted symbols, and thus a significant slow-down. of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. (cherry picked from commit 23ca9fe)# This Pull request:.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/pull/12163:8,modifiability,Reu,Reuse,8,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak. symbols that the JIT had already emitted, instead only looking at dlsym. This. causes a significant increase in JITted symbols, and thus a significant slow-down. of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. (cherry picked from commit 23ca9fe)# This Pull request:.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/pull/12163:62,modifiability,upgrad,upgrade,62,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak. symbols that the JIT had already emitted, instead only looking at dlsym. This. causes a significant increase in JITted symbols, and thus a significant slow-down. of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. (cherry picked from commit 23ca9fe)# This Pull request:.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/pull/12163:283,reliability,slo,slow-down,283,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak. symbols that the JIT had already emitted, instead only looking at dlsym. This. causes a significant increase in JITted symbols, and thus a significant slow-down. of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. (cherry picked from commit 23ca9fe)# This Pull request:.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/pull/12163:319,reliability,restor,restores,319,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak. symbols that the JIT had already emitted, instead only looking at dlsym. This. causes a significant increase in JITted symbols, and thus a significant slow-down. of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. (cherry picked from commit 23ca9fe)# This Pull request:.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/pull/12163:220,security,sign,significant,220,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak. symbols that the JIT had already emitted, instead only looking at dlsym. This. causes a significant increase in JITted symbols, and thus a significant slow-down. of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. (cherry picked from commit 23ca9fe)# This Pull request:.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/pull/12163:271,security,sign,significant,271,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak. symbols that the JIT had already emitted, instead only looking at dlsym. This. causes a significant increase in JITted symbols, and thus a significant slow-down. of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. (cherry picked from commit 23ca9fe)# This Pull request:.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/pull/12163:354,security,ident,identical,354,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak. symbols that the JIT had already emitted, instead only looking at dlsym. This. causes a significant increase in JITted symbols, and thus a significant slow-down. of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. (cherry picked from commit 23ca9fe)# This Pull request:.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/pull/12163:336,usability,behavi,behavior,336,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak. symbols that the JIT had already emitted, instead only looking at dlsym. This. causes a significant increase in JITted symbols, and thus a significant slow-down. of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. (cherry picked from commit 23ca9fe)# This Pull request:.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12163
https://github.com/root-project/root/issues/12164:1865,availability,failur,failures,1865,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:1915,availability,servic,services,1915,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:1865,deployability,fail,failures,1865,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:1915,deployability,servic,services,1915,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:1915,integrability,servic,services,1915,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:1915,modifiability,servic,services,1915,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:268,performance,time,time,268,"Strange behaviour in interpreter in master/6.28 when initialising vectors; This simple code, gives a strange behaviour when running it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:342,performance,time,time,342,"Strange behaviour in interpreter in master/6.28 when initialising vectors; This simple code, gives a strange behaviour when running it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:1865,performance,failur,failures,1865,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:1865,reliability,fail,failures,1865,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:432,safety,test,testBroadCast,432,"Strange behaviour in interpreter in master/6.28 when initialising vectors; This simple code, gives a strange behaviour when running it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:516,safety,test,testBroadCast,516,"Strange behaviour in interpreter in master/6.28 when initialising vectors; This simple code, gives a strange behaviour when running it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:1888,safety,test,test,1888,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:2054,safety,test,testReport,2054,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:2088,safety,test,test,2088,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:458,security,Session,Session,458,"Strange behaviour in interpreter in master/6.28 when initialising vectors; This simple code, gives a strange behaviour when running it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:478,security,Session,Session,478,"Strange behaviour in interpreter in master/6.28 when initialising vectors; This simple code, gives a strange behaviour when running it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:868,security,Session,Session,868,"Strange behaviour in interpreter in master/6.28 when initialising vectors; This simple code, gives a strange behaviour when running it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:1131,security,Session,Session,1131,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:1332,security,Session,Session,1332,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:1594,security,Session,Session,1594,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:80,testability,simpl,simple,80,"Strange behaviour in interpreter in master/6.28 when initialising vectors; This simple code, gives a strange behaviour when running it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:432,testability,test,testBroadCast,432,"Strange behaviour in interpreter in master/6.28 when initialising vectors; This simple code, gives a strange behaviour when running it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:516,testability,test,testBroadCast,516,"Strange behaviour in interpreter in master/6.28 when initialising vectors; This simple code, gives a strange behaviour when running it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:1888,testability,test,test,1888,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:2054,testability,test,testReport,2054,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:2088,testability,test,test,2088,"it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:8,usability,behavi,behaviour,8,"Strange behaviour in interpreter in master/6.28 when initialising vectors; This simple code, gives a strange behaviour when running it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:80,usability,simpl,simple,80,"Strange behaviour in interpreter in master/6.28 when initialising vectors; This simple code, gives a strange behaviour when running it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/issues/12164:109,usability,behavi,behaviour,109,"Strange behaviour in interpreter in master/6.28 when initialising vectors; This simple code, gives a strange behaviour when running it within the ROOT prompt in 6.28 and master. In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. . It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```. .L testBroadCast.hxx. Test1::Session s1;. Test2::Session s2;. ```. Here is the code : `testBroadCast.hxx`. ```. #include <iostream>. #include <vector>. template<class T>. void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";. for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";. std::cout << std::endl;. }. namespace Test1 {. struct Session {. . std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };. }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);. float * tensor_conv0bias = fTensor_conv0bias.data();. std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);. float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };. std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };. DummyBroadCast(tensor_conv0bias, shape, targetShape);. // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };. }. ```. . This affects some failures seen in SOFIE test like . https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12164
https://github.com/root-project/root/pull/12165:137,deployability,updat,updated,137,Deprecate TDirectory::EncodeNameCycle().; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12165
https://github.com/root-project/root/pull/12165:107,safety,test,tested,107,Deprecate TDirectory::EncodeNameCycle().; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12165
https://github.com/root-project/root/pull/12165:137,safety,updat,updated,137,Deprecate TDirectory::EncodeNameCycle().; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12165
https://github.com/root-project/root/pull/12165:137,security,updat,updated,137,Deprecate TDirectory::EncodeNameCycle().; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12165
https://github.com/root-project/root/pull/12165:107,testability,test,tested,107,Deprecate TDirectory::EncodeNameCycle().; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12165
https://github.com/root-project/root/pull/12166:258,deployability,updat,updated,258,"v6.28: [base] Deprecate TDirectory::EncodeNameCycle():; It is broken by design, there is no way that this interface can. be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12166
https://github.com/root-project/root/pull/12166:106,integrability,interfac,interface,106,"v6.28: [base] Deprecate TDirectory::EncodeNameCycle():; It is broken by design, there is no way that this interface can. be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12166
https://github.com/root-project/root/pull/12166:106,interoperability,interfac,interface,106,"v6.28: [base] Deprecate TDirectory::EncodeNameCycle():; It is broken by design, there is no way that this interface can. be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12166
https://github.com/root-project/root/pull/12166:106,modifiability,interfac,interface,106,"v6.28: [base] Deprecate TDirectory::EncodeNameCycle():; It is broken by design, there is no way that this interface can. be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12166
https://github.com/root-project/root/pull/12166:134,safety,safe,safe,134,"v6.28: [base] Deprecate TDirectory::EncodeNameCycle():; It is broken by design, there is no way that this interface can. be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12166
https://github.com/root-project/root/pull/12166:228,safety,test,tested,228,"v6.28: [base] Deprecate TDirectory::EncodeNameCycle():; It is broken by design, there is no way that this interface can. be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12166
https://github.com/root-project/root/pull/12166:258,safety,updat,updated,258,"v6.28: [base] Deprecate TDirectory::EncodeNameCycle():; It is broken by design, there is no way that this interface can. be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12166
https://github.com/root-project/root/pull/12166:258,security,updat,updated,258,"v6.28: [base] Deprecate TDirectory::EncodeNameCycle():; It is broken by design, there is no way that this interface can. be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12166
https://github.com/root-project/root/pull/12166:228,testability,test,tested,228,"v6.28: [base] Deprecate TDirectory::EncodeNameCycle():; It is broken by design, there is no way that this interface can. be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12166
https://github.com/root-project/root/pull/12167:164,deployability,updat,updated,164,"Remove `TDirectory::EncodeNameCycle()`, enable `R__DEPRECATED(6,32`; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12167
https://github.com/root-project/root/pull/12167:134,safety,test,tested,134,"Remove `TDirectory::EncodeNameCycle()`, enable `R__DEPRECATED(6,32`; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12167
https://github.com/root-project/root/pull/12167:164,safety,updat,updated,164,"Remove `TDirectory::EncodeNameCycle()`, enable `R__DEPRECATED(6,32`; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12167
https://github.com/root-project/root/pull/12167:164,security,updat,updated,164,"Remove `TDirectory::EncodeNameCycle()`, enable `R__DEPRECATED(6,32`; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12167
https://github.com/root-project/root/pull/12167:134,testability,test,tested,134,"Remove `TDirectory::EncodeNameCycle()`, enable `R__DEPRECATED(6,32`; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12167
https://github.com/root-project/root/pull/12168:100,availability,failur,failures,100,[tmva][pymva] Use correct python executable for the Keras and PyTorch tests; This PR should fix the failures of some PyTorch tests caused by using Python2 instead of Python3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12168
https://github.com/root-project/root/pull/12168:100,deployability,fail,failures,100,[tmva][pymva] Use correct python executable for the Keras and PyTorch tests; This PR should fix the failures of some PyTorch tests caused by using Python2 instead of Python3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12168
https://github.com/root-project/root/pull/12168:100,performance,failur,failures,100,[tmva][pymva] Use correct python executable for the Keras and PyTorch tests; This PR should fix the failures of some PyTorch tests caused by using Python2 instead of Python3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12168
https://github.com/root-project/root/pull/12168:100,reliability,fail,failures,100,[tmva][pymva] Use correct python executable for the Keras and PyTorch tests; This PR should fix the failures of some PyTorch tests caused by using Python2 instead of Python3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12168
https://github.com/root-project/root/pull/12168:70,safety,test,tests,70,[tmva][pymva] Use correct python executable for the Keras and PyTorch tests; This PR should fix the failures of some PyTorch tests caused by using Python2 instead of Python3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12168
https://github.com/root-project/root/pull/12168:125,safety,test,tests,125,[tmva][pymva] Use correct python executable for the Keras and PyTorch tests; This PR should fix the failures of some PyTorch tests caused by using Python2 instead of Python3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12168
https://github.com/root-project/root/pull/12168:70,testability,test,tests,70,[tmva][pymva] Use correct python executable for the Keras and PyTorch tests; This PR should fix the failures of some PyTorch tests caused by using Python2 instead of Python3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12168
https://github.com/root-project/root/pull/12168:125,testability,test,tests,125,[tmva][pymva] Use correct python executable for the Keras and PyTorch tests; This PR should fix the failures of some PyTorch tests caused by using Python2 instead of Python3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12168
https://github.com/root-project/root/pull/12169:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 10; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12160. 2. https://github.com/root-project/root/pull/12157. 3. https://github.com/root-project/root/pull/12161. 4. https://github.com/root-project/root/pull/12129. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12169
https://github.com/root-project/root/pull/12169:165,deployability,patch,patches,165,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 10; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12160. 2. https://github.com/root-project/root/pull/12157. 3. https://github.com/root-project/root/pull/12161. 4. https://github.com/root-project/root/pull/12129. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12169
https://github.com/root-project/root/pull/12169:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 10; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12160. 2. https://github.com/root-project/root/pull/12157. 3. https://github.com/root-project/root/pull/12161. 4. https://github.com/root-project/root/pull/12129. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12169
https://github.com/root-project/root/pull/12169:165,safety,patch,patches,165,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 10; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12160. 2. https://github.com/root-project/root/pull/12157. 3. https://github.com/root-project/root/pull/12161. 4. https://github.com/root-project/root/pull/12129. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12169
https://github.com/root-project/root/pull/12169:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 10; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12160. 2. https://github.com/root-project/root/pull/12157. 3. https://github.com/root-project/root/pull/12161. 4. https://github.com/root-project/root/pull/12129. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12169
https://github.com/root-project/root/pull/12169:165,security,patch,patches,165,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 10; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12160. 2. https://github.com/root-project/root/pull/12157. 3. https://github.com/root-project/root/pull/12161. 4. https://github.com/root-project/root/pull/12129. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12169
https://github.com/root-project/root/issues/12170:1200,availability,Error,Error,1200,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:30,energy efficiency,model,model,30,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:75,energy efficiency,model,model,75,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1056,energy efficiency,Model,Model,1056,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1104,energy efficiency,model,model,1104,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:181,integrability,transform,transformation,181,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:224,integrability,transform,transformation,224,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1004,integrability,event,events,1004,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1031,integrability,event,events,1031,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:181,interoperability,transform,transformation,181,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:224,interoperability,transform,transformation,224,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1062,interoperability,Architectur,Architecture,1062,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:167,modifiability,Deco,Decorrelation,167,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:262,modifiability,Variab,Variable,262,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:621,modifiability,Variab,Variable,621,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1200,performance,Error,Error,1200,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1020,safety,valid,validation,1020,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1132,safety,valid,validation,1132,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1190,safety,unhandl,unhandled,1190,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1200,safety,Error,Error,1200,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:30,security,model,model,30,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:75,security,model,model,75,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1020,security,validat,validation,1020,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1056,security,Model,Model,1056,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1104,security,model,model,1104,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1132,security,validat,validation,1132,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1143,security,loss,loss,1143,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/issues/12170:1200,usability,Error,Error,1200,"Crash when training a PyTorch model within PyMVA ; When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:. ```. : Preparing the Decorrelation transformation... : Preparing the Gaussian transformation... TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. TFHandler_PyTorch : Variable Mean RMS [ Min Max ]. : -----------------------------------------------------------. : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]. : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]. : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]. : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]. : -----------------------------------------------------------. : Split TMVA training data in 6400 training events and 1600 validation events. : Print Training Model Architecture. : Option SaveBestOnly: Only model weights with smallest validation loss will be stored. Program aborted due to an unhandled Error:. Unable to find target for this triple (no targets are registered) *** Break *** abort. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12170
https://github.com/root-project/root/pull/12171:69,energy efficiency,model,models,69,[tmva][pymva] Backport in 6.26 support in the Keras RModel parser to models with undefined batch size; . This PR backport a commit of #10226 to use Keras model with not defined batch size.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12171
https://github.com/root-project/root/pull/12171:154,energy efficiency,model,model,154,[tmva][pymva] Backport in 6.26 support in the Keras RModel parser to models with undefined batch size; . This PR backport a commit of #10226 to use Keras model with not defined batch size.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12171
https://github.com/root-project/root/pull/12171:91,integrability,batch,batch,91,[tmva][pymva] Backport in 6.26 support in the Keras RModel parser to models with undefined batch size; . This PR backport a commit of #10226 to use Keras model with not defined batch size.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12171
https://github.com/root-project/root/pull/12171:177,integrability,batch,batch,177,[tmva][pymva] Backport in 6.26 support in the Keras RModel parser to models with undefined batch size; . This PR backport a commit of #10226 to use Keras model with not defined batch size.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12171
https://github.com/root-project/root/pull/12171:91,performance,batch,batch,91,[tmva][pymva] Backport in 6.26 support in the Keras RModel parser to models with undefined batch size; . This PR backport a commit of #10226 to use Keras model with not defined batch size.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12171
https://github.com/root-project/root/pull/12171:177,performance,batch,batch,177,[tmva][pymva] Backport in 6.26 support in the Keras RModel parser to models with undefined batch size; . This PR backport a commit of #10226 to use Keras model with not defined batch size.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12171
https://github.com/root-project/root/pull/12171:69,security,model,models,69,[tmva][pymva] Backport in 6.26 support in the Keras RModel parser to models with undefined batch size; . This PR backport a commit of #10226 to use Keras model with not defined batch size.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12171
https://github.com/root-project/root/pull/12171:154,security,model,model,154,[tmva][pymva] Backport in 6.26 support in the Keras RModel parser to models with undefined batch size; . This PR backport a commit of #10226 to use Keras model with not defined batch size.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12171
https://github.com/root-project/root/pull/12171:31,usability,support,support,31,[tmva][pymva] Backport in 6.26 support in the Keras RModel parser to models with undefined batch size; . This PR backport a commit of #10226 to use Keras model with not defined batch size.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12171
https://github.com/root-project/root/pull/12174:547,availability,avail,available,547,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:264,deployability,log,logic,264,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:12,performance,perform,performance,12,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:24,performance,overhead,overhead,24,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:690,performance,perform,performance,690,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:547,reliability,availab,available,547,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:264,safety,log,logic,264,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:547,safety,avail,available,547,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:52,security,RSa,RSampleInfo,52,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:141,security,RSa,RSampleInfo,141,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:264,security,log,logic,264,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:547,security,availab,available,547,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:264,testability,log,logic,264,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:702,testability,regress,regression,702,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:12,usability,perform,performance,12,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:445,usability,behavi,behavior,445,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:475,usability,user,user,475,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12174:690,usability,perform,performance,690,"[DF] Remove performance overhead in construction of RSampleInfo; The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12174
https://github.com/root-project/root/pull/12175:206,deployability,updat,updated,206,"[cmake] Use lcgpackages for libzmq.tar.gz:; GitHub repacks archives from time to time, which changes the hash. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12175
https://github.com/root-project/root/pull/12175:73,performance,time,time,73,"[cmake] Use lcgpackages for libzmq.tar.gz:; GitHub repacks archives from time to time, which changes the hash. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12175
https://github.com/root-project/root/pull/12175:81,performance,time,time,81,"[cmake] Use lcgpackages for libzmq.tar.gz:; GitHub repacks archives from time to time, which changes the hash. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12175
https://github.com/root-project/root/pull/12175:176,safety,test,tested,176,"[cmake] Use lcgpackages for libzmq.tar.gz:; GitHub repacks archives from time to time, which changes the hash. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12175
https://github.com/root-project/root/pull/12175:206,safety,updat,updated,206,"[cmake] Use lcgpackages for libzmq.tar.gz:; GitHub repacks archives from time to time, which changes the hash. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12175
https://github.com/root-project/root/pull/12175:105,security,hash,hash,105,"[cmake] Use lcgpackages for libzmq.tar.gz:; GitHub repacks archives from time to time, which changes the hash. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12175
https://github.com/root-project/root/pull/12175:206,security,updat,updated,206,"[cmake] Use lcgpackages for libzmq.tar.gz:; GitHub repacks archives from time to time, which changes the hash. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12175
https://github.com/root-project/root/pull/12175:176,testability,test,tested,176,"[cmake] Use lcgpackages for libzmq.tar.gz:; GitHub repacks archives from time to time, which changes the hash. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12175
https://github.com/root-project/root/pull/12176:79,performance,time,time,79,"6.28: [cmake] Use lcgpackages for libzmq.tar.gz:; GitHub repacks archives from time to time, which changes the hash. (cherry picked from commit 43003424171111fb2d8ec6fd182001c57ed6901a). Backport of https://github.com/root-project/root/pull/12175",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12176
https://github.com/root-project/root/pull/12176:87,performance,time,time,87,"6.28: [cmake] Use lcgpackages for libzmq.tar.gz:; GitHub repacks archives from time to time, which changes the hash. (cherry picked from commit 43003424171111fb2d8ec6fd182001c57ed6901a). Backport of https://github.com/root-project/root/pull/12175",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12176
https://github.com/root-project/root/pull/12176:111,security,hash,hash,111,"6.28: [cmake] Use lcgpackages for libzmq.tar.gz:; GitHub repacks archives from time to time, which changes the hash. (cherry picked from commit 43003424171111fb2d8ec6fd182001c57ed6901a). Backport of https://github.com/root-project/root/pull/12175",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12176
https://github.com/root-project/root/pull/12178:149,deployability,integr,integration,149,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:305,deployability,integr,integral,305,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:769,deployability,updat,updated,769,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:680,energy efficiency,model,model,680,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:149,integrability,integr,integration,149,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:305,integrability,integr,integral,305,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:149,interoperability,integr,integration,149,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:305,interoperability,integr,integral,305,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:149,modifiability,integr,integration,149,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:305,modifiability,integr,integral,305,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:342,modifiability,variab,variable,342,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:149,reliability,integr,integration,149,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:305,reliability,integr,integral,305,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:739,safety,test,tested,739,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:769,safety,updat,updated,769,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:149,security,integr,integration,149,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:305,security,integr,integral,305,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:680,security,model,model,680,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:769,security,updat,updated,769,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:149,testability,integr,integration,149,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:305,testability,integr,integral,305,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:617,testability,context,contexts,617,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:739,testability,test,tested,739,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12178:686,usability,stop,stopped,686,"[RF] Small fixes to debug printout in RooRealIntegral and RooEffGenContext; # This Pull request:. Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:. The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12178
https://github.com/root-project/root/pull/12181:22,usability,workflow,workflow,22,[skip-ci] Add ROOT CI workflow; re-open of. https://github.com/root-project/root/pull/12112,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12181
https://github.com/root-project/root/issues/12182:663,availability,down,down,663,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:864,availability,error,error,864,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:893,availability,error,error,893,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1940,availability,Operat,Operating,1940,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:2015,availability,down,download,2015,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:642,deployability,manag,managed,642,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1688,deployability,build,build,1688,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1928,deployability,version,version,1928,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1997,deployability,instal,install,1997,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:642,energy efficiency,manag,managed,642,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1928,integrability,version,version,1928,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:946,interoperability,specif,specifiers,946,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:2290,interoperability,bind,binding,2290,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1928,modifiability,version,version,1928,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:2290,modifiability,bind,binding,2290,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:864,performance,error,error,864,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:893,performance,error,error,893,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:14,reliability,doe,does,14,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1133,reliability,doe,does,1133,"GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled loc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:2229,reliability,doe,does,2229,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:642,safety,manag,managed,642,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:864,safety,error,error,864,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:893,safety,error,error,893,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1327,safety,Test,Tested,1327,"u are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1642,safety,input,input,1642,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1744,safety,test,tested,1744,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:2370,safety,test,test,2370,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:2392,safety,test,tested,2392,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:2337,security,access,access,2337,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1305,testability,simpl,simply,1305,"e. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1327,testability,Test,Tested,1327,"u are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1744,testability,test,tested,1744,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:2370,testability,test,test,2370,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:2392,testability,test,tested,2392,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:468,usability,clear,clear,468,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:516,usability,behavi,behavior,516,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:769,usability,interact,interactively,769,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:864,usability,error,error,864,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:893,usability,error,error,893,"TPython::Eval does not work with string with python3.8+ for ROOT 6.24-6.26.8; - [y] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf ins",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1179,usability,behavi,behavior,1179,"ues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1197,usability,clear,clear,1197,". * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1290,usability,command,command,1290,"s of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python bind",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1305,usability,simpl,simply,1305,"e. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1497,usability,behavi,behavior,1497,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1642,usability,input,input,1642,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/issues/12182:1824,usability,interact,interactive,1824,"the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I have run into issue reported on ROOT forum here:. https://root-forum.cern.ch/t/tpython-problem/46064. and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):. . const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers. TPyReturn isascii() {. ~~~~~~~~~ ^. /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'. # define isascii(c) __isascii (c). ^. . . . . (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""). (const char *) ""done"". ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. 6.24.6 + python3.8/ 6.26.8 +python3.9. 2. Ubuntu18.04/centos7. 3. compiled locally / provided by remote host. ### Extra note:. I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12182
https://github.com/root-project/root/pull/12183:545,security,access,accessing,545,"[cling] Keep private symbols private:; llvm IR naming of private constants (CodeGenModule::createUnnamedGlobalFrom(), line 1136) will name private symbols without caring about possible name clashes. We will create these name clashes by marking such private symbols as weak ones, re-using previously emitted symbols (e.g. in JITDylib::defineImpl() where they get added to MUDefsOverridden and thus re-used instead of re-emitted). Let me see what happens when we keep private symbols private. In principle, the interpreter should have no means fo accessing them from another transaction - private symbols seem to be function-local ones.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12183
https://github.com/root-project/root/issues/12184:10,deployability,build,build,10,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:16,deployability,log,logs,16,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:40,deployability,build,build,40,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:46,deployability,log,logs,46,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:149,deployability,log,log-lines,149,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:203,deployability,build,build,203,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:210,deployability,instal,install,210,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:16,safety,log,logs,16,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:46,safety,log,logs,46,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:149,safety,log,log-lines,149,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:16,security,log,logs,16,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:46,security,log,logs,46,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:149,security,log,log-lines,149,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:16,testability,log,logs,16,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:46,testability,log,logs,46,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:149,testability,log,log-lines,149,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:93,usability,workflow,workflows,93,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12184:103,usability,workflow,workflow-commands-for-github-actions,103,"CI: group build logs; Can we [group the build logs](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines) into the different sections: setup, cmake, build, install?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12184
https://github.com/root-project/root/issues/12185:4,deployability,log,log,4,"CI: log parsing; Can we add log parsing + PR commenting for the CI, e.g. using https://github.com/marketplace/actions/gcc-problem-matcher ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:28,deployability,log,log,28,"CI: log parsing; Can we add log parsing + PR commenting for the CI, e.g. using https://github.com/marketplace/actions/gcc-problem-matcher ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:4,safety,log,log,4,"CI: log parsing; Can we add log parsing + PR commenting for the CI, e.g. using https://github.com/marketplace/actions/gcc-problem-matcher ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:28,safety,log,log,28,"CI: log parsing; Can we add log parsing + PR commenting for the CI, e.g. using https://github.com/marketplace/actions/gcc-problem-matcher ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:4,security,log,log,4,"CI: log parsing; Can we add log parsing + PR commenting for the CI, e.g. using https://github.com/marketplace/actions/gcc-problem-matcher ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:28,security,log,log,28,"CI: log parsing; Can we add log parsing + PR commenting for the CI, e.g. using https://github.com/marketplace/actions/gcc-problem-matcher ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:4,testability,log,log,4,"CI: log parsing; Can we add log parsing + PR commenting for the CI, e.g. using https://github.com/marketplace/actions/gcc-problem-matcher ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12185:28,testability,log,log,28,"CI: log parsing; Can we add log parsing + PR commenting for the CI, e.g. using https://github.com/marketplace/actions/gcc-problem-matcher ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12185
https://github.com/root-project/root/issues/12186:117,integrability,pub,publish-test-results,117,"CI: test summary; Can we add a test summary comment to the PRs, e.g. based on https://github.com/marketplace/actions/publish-test-results#use-with-matrix-strategy ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12186
https://github.com/root-project/root/issues/12186:4,safety,test,test,4,"CI: test summary; Can we add a test summary comment to the PRs, e.g. based on https://github.com/marketplace/actions/publish-test-results#use-with-matrix-strategy ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12186
https://github.com/root-project/root/issues/12186:31,safety,test,test,31,"CI: test summary; Can we add a test summary comment to the PRs, e.g. based on https://github.com/marketplace/actions/publish-test-results#use-with-matrix-strategy ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12186
https://github.com/root-project/root/issues/12186:125,safety,test,test-results,125,"CI: test summary; Can we add a test summary comment to the PRs, e.g. based on https://github.com/marketplace/actions/publish-test-results#use-with-matrix-strategy ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12186
https://github.com/root-project/root/issues/12186:4,testability,test,test,4,"CI: test summary; Can we add a test summary comment to the PRs, e.g. based on https://github.com/marketplace/actions/publish-test-results#use-with-matrix-strategy ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12186
https://github.com/root-project/root/issues/12186:31,testability,test,test,31,"CI: test summary; Can we add a test summary comment to the PRs, e.g. based on https://github.com/marketplace/actions/publish-test-results#use-with-matrix-strategy ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12186
https://github.com/root-project/root/issues/12186:125,testability,test,test-results,125,"CI: test summary; Can we add a test summary comment to the PRs, e.g. based on https://github.com/marketplace/actions/publish-test-results#use-with-matrix-strategy ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12186
https://github.com/root-project/root/pull/12187:37,availability,operat,operators,37,[tmva][sofie] Fix Gather and Squeeze operators and some memory issues in ConvTranspose; This Pull request fixes some issues fond with valgrind in the ConvTranspose operator. and fixes the Gather and Reshap operators.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12187
https://github.com/root-project/root/pull/12187:164,availability,operat,operator,164,[tmva][sofie] Fix Gather and Squeeze operators and some memory issues in ConvTranspose; This Pull request fixes some issues fond with valgrind in the ConvTranspose operator. and fixes the Gather and Reshap operators.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12187
https://github.com/root-project/root/pull/12187:206,availability,operat,operators,206,[tmva][sofie] Fix Gather and Squeeze operators and some memory issues in ConvTranspose; This Pull request fixes some issues fond with valgrind in the ConvTranspose operator. and fixes the Gather and Reshap operators.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12187
https://github.com/root-project/root/pull/12187:56,performance,memor,memory,56,[tmva][sofie] Fix Gather and Squeeze operators and some memory issues in ConvTranspose; This Pull request fixes some issues fond with valgrind in the ConvTranspose operator. and fixes the Gather and Reshap operators.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12187
https://github.com/root-project/root/pull/12187:56,usability,memor,memory,56,[tmva][sofie] Fix Gather and Squeeze operators and some memory issues in ConvTranspose; This Pull request fixes some issues fond with valgrind in the ConvTranspose operator. and fixes the Gather and Reshap operators.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12187
https://github.com/root-project/root/pull/12188:16,deployability,log,log,16,[skip-ci] group log output in CI; # This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12188
https://github.com/root-project/root/pull/12188:73,deployability,log,log,73,[skip-ci] group log output in CI; # This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12188
https://github.com/root-project/root/pull/12188:229,deployability,updat,updated,229,[skip-ci] group log output in CI; # This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12188
https://github.com/root-project/root/pull/12188:16,safety,log,log,16,[skip-ci] group log output in CI; # This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12188
https://github.com/root-project/root/pull/12188:73,safety,log,log,73,[skip-ci] group log output in CI; # This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12188
https://github.com/root-project/root/pull/12188:199,safety,test,tested,199,[skip-ci] group log output in CI; # This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12188
https://github.com/root-project/root/pull/12188:229,safety,updat,updated,229,[skip-ci] group log output in CI; # This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12188
https://github.com/root-project/root/pull/12188:16,security,log,log,16,[skip-ci] group log output in CI; # This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12188
https://github.com/root-project/root/pull/12188:73,security,log,log,73,[skip-ci] group log output in CI; # This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12188
https://github.com/root-project/root/pull/12188:229,security,updat,updated,229,[skip-ci] group log output in CI; # This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12188
https://github.com/root-project/root/pull/12188:16,testability,log,log,16,[skip-ci] group log output in CI; # This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12188
https://github.com/root-project/root/pull/12188:73,testability,log,log,73,[skip-ci] group log output in CI; # This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12188
https://github.com/root-project/root/pull/12188:199,testability,test,tested,199,[skip-ci] group log output in CI; # This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12188
https://github.com/root-project/root/pull/12188:94,usability,workflow,workflows,94,[skip-ci] group log output in CI; # This Pull request:. Adds grouping of log output in GitHub workflows. ## Changes or fixes:. https://github.com/root-project/root/issues/12184. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12188
https://github.com/root-project/root/pull/12189:28,deployability,API,API,28,[PyROOT] Use non-deprecated API to initialize Python interpreter; Taken from part of https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12189
https://github.com/root-project/root/pull/12189:28,integrability,API,API,28,[PyROOT] Use non-deprecated API to initialize Python interpreter; Taken from part of https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12189
https://github.com/root-project/root/pull/12189:28,interoperability,API,API,28,[PyROOT] Use non-deprecated API to initialize Python interpreter; Taken from part of https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12189
https://github.com/root-project/root/issues/12190:1741,availability,redund,redundant,1741,"s special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have liked to do](https://root-forum.cern.ch/t/accessing-entry-information-using-rdataframe/52378))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:1339,deployability,build,build,1339,"s special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have liked to do](https://root-forum.cern.ch/t/accessing-entry-information-using-rdataframe/52378))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:1741,deployability,redundan,redundant,1741,"s special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have liked to do](https://root-forum.cern.ch/t/accessing-entry-information-using-rdataframe/52378))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:80,energy efficiency,Current,Currently,80,"Have rdfentry_ represent the global entry number in the TChain even in MT runs; Currently RDF's special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:704,energy efficiency,current,current,704,"Have rdfentry_ represent the global entry number in the TChain even in MT runs; Currently RDF's special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:1276,performance,content,contention,1276,"s special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have liked to do](https://root-forum.cern.ch/t/accessing-entry-information-using-rdataframe/52378))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:1663,performance,perform,performance,1663,"s special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have liked to do](https://root-forum.cern.ch/t/accessing-entry-information-using-rdataframe/52378))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:142,reliability,doe,does,142,"Have rdfentry_ represent the global entry number in the TChain even in MT runs; Currently RDF's special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:1741,reliability,redundan,redundant,1741,"s special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have liked to do](https://root-forum.cern.ch/t/accessing-entry-information-using-rdataframe/52378))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:1741,safety,redund,redundant,1741,"s special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have liked to do](https://root-forum.cern.ch/t/accessing-entry-information-using-rdataframe/52378))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:1795,security,sign,significant,1795,"s special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have liked to do](https://root-forum.cern.ch/t/accessing-entry-information-using-rdataframe/52378))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:2042,security,access,accessing-entry-information-using-rdataframe,2042,"s special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have liked to do](https://root-forum.cern.ch/t/accessing-entry-information-using-rdataframe/52378))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:297,usability,help,helper-cols,297,"Have rdfentry_ represent the global entry number in the TChain even in MT runs; Currently RDF's special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:335,usability,user,users,335,"Have rdfentry_ represent the global entry number in the TChain even in MT runs; Currently RDF's special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:1260,usability,minim,minimize,1260,"s special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have liked to do](https://root-forum.cern.ch/t/accessing-entry-information-using-rdataframe/52378))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:1619,usability,intuit,intuition,1619,"s special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have liked to do](https://root-forum.cern.ch/t/accessing-entry-information-using-rdataframe/52378))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:1663,usability,perform,performance,1663,"s special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have liked to do](https://root-forum.cern.ch/t/accessing-entry-information-using-rdataframe/52378))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
https://github.com/root-project/root/issues/12190:1984,usability,user,user,1984,"s special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...). - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost. - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have liked to do](https://root-forum.cern.ch/t/accessing-entry-information-using-rdataframe/52378))",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12190
