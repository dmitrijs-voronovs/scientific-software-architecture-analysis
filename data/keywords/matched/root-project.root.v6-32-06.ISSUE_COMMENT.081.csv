id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/13057:148,interoperability,specif,specific,148,I agree that the new setting should not be increasing the threads past `cgroup`. I think a malformed `ROOT_MAX_THREADS` is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:157,modifiability,variab,variable,157,I agree that the new setting should not be increasing the threads past `cgroup`. I think a malformed `ROOT_MAX_THREADS` is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:126,performance,error,error,126,I agree that the new setting should not be increasing the threads past `cgroup`. I think a malformed `ROOT_MAX_THREADS` is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:126,safety,error,error,126,I agree that the new setting should not be increasing the threads past `cgroup`. I think a malformed `ROOT_MAX_THREADS` is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:126,usability,error,error,126,I agree that the new setting should not be increasing the threads past `cgroup`. I think a malformed `ROOT_MAX_THREADS` is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:254,usability,behavi,behaving,254,I agree that the new setting should not be increasing the threads past `cgroup`. I think a malformed `ROOT_MAX_THREADS` is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:304,usability,user,user,304,I agree that the new setting should not be increasing the threads past `cgroup`. I think a malformed `ROOT_MAX_THREADS` is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:45,availability,error,error,45,"> I think a malformed ROOT_MAX_THREADS is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations. In that case `Error()` is certainly appropriate, but then that's an argument for aborting execution rather than continuing with the wrong amount of threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:258,availability,Error,Error,258,"> I think a malformed ROOT_MAX_THREADS is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations. In that case `Error()` is certainly appropriate, but then that's an argument for aborting execution rather than continuing with the wrong amount of threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:356,deployability,continu,continuing,356,"> I think a malformed ROOT_MAX_THREADS is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations. In that case `Error()` is certainly appropriate, but then that's an argument for aborting execution rather than continuing with the wrong amount of threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:67,interoperability,specif,specific,67,"> I think a malformed ROOT_MAX_THREADS is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations. In that case `Error()` is certainly appropriate, but then that's an argument for aborting execution rather than continuing with the wrong amount of threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:76,modifiability,variab,variable,76,"> I think a malformed ROOT_MAX_THREADS is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations. In that case `Error()` is certainly appropriate, but then that's an argument for aborting execution rather than continuing with the wrong amount of threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:45,performance,error,error,45,"> I think a malformed ROOT_MAX_THREADS is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations. In that case `Error()` is certainly appropriate, but then that's an argument for aborting execution rather than continuing with the wrong amount of threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:258,performance,Error,Error,258,"> I think a malformed ROOT_MAX_THREADS is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations. In that case `Error()` is certainly appropriate, but then that's an argument for aborting execution rather than continuing with the wrong amount of threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:45,safety,error,error,45,"> I think a malformed ROOT_MAX_THREADS is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations. In that case `Error()` is certainly appropriate, but then that's an argument for aborting execution rather than continuing with the wrong amount of threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:258,safety,Error,Error,258,"> I think a malformed ROOT_MAX_THREADS is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations. In that case `Error()` is certainly appropriate, but then that's an argument for aborting execution rather than continuing with the wrong amount of threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:45,usability,error,error,45,"> I think a malformed ROOT_MAX_THREADS is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations. In that case `Error()` is certainly appropriate, but then that's an argument for aborting execution rather than continuing with the wrong amount of threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:173,usability,behavi,behaving,173,"> I think a malformed ROOT_MAX_THREADS is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations. In that case `Error()` is certainly appropriate, but then that's an argument for aborting execution rather than continuing with the wrong amount of threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:223,usability,user,user,223,"> I think a malformed ROOT_MAX_THREADS is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations. In that case `Error()` is certainly appropriate, but then that's an argument for aborting execution rather than continuing with the wrong amount of threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:258,usability,Error,Error,258,"> I think a malformed ROOT_MAX_THREADS is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations. In that case `Error()` is certainly appropriate, but then that's an argument for aborting execution rather than continuing with the wrong amount of threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:1,availability,Error,Error,1,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:64,availability,recov,recoverable,64,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:135,availability,error,error,135,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:64,deployability,recov,recoverable,64,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:1,performance,Error,Error,1,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:135,performance,error,error,135,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:64,reliability,recov,recoverable,64,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:1,safety,Error,Error,1,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:64,safety,recov,recoverable,64,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:135,safety,error,error,135,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:64,security,recov,recoverable,64,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:1,usability,Error,Error,1,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:40,usability,indicat,indicates,40,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:135,usability,error,error,135,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:230,modifiability,variab,variable,230,"> I'm not sure that ROOT_MAX_THREADS should have precedence over cgroups. I am convinced that it should. If you want to oversubscribe then that env var is your only chance. > It would be good to document that ROOT honors that env variable in the docs of `EnableImplicitMT`,. Excellent point, will do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:195,usability,document,document,195,"> I'm not sure that ROOT_MAX_THREADS should have precedence over cgroups. I am convinced that it should. If you want to oversubscribe then that env var is your only chance. > It would be good to document that ROOT honors that env variable in the docs of `EnableImplicitMT`,. Excellent point, will do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:324,energy efficiency,core,core,324,"> I am convinced that it should. If you want to oversubscribe then that env var is your only chance. Since the `cgroup` limit will actually prevent the process from using more than the configured amount, I agree that you are right. Using the env var, is a way to tell `ROOT` to use more threads than the effective number of core it will be allowed to use (i.e. oversubscribing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:185,integrability,configur,configured,185,"> I am convinced that it should. If you want to oversubscribe then that env var is your only chance. Since the `cgroup` limit will actually prevent the process from using more than the configured amount, I agree that you are right. Using the env var, is a way to tell `ROOT` to use more threads than the effective number of core it will be allowed to use (i.e. oversubscribing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:185,modifiability,configur,configured,185,"> I am convinced that it should. If you want to oversubscribe then that env var is your only chance. Since the `cgroup` limit will actually prevent the process from using more than the configured amount, I agree that you are right. Using the env var, is a way to tell `ROOT` to use more threads than the effective number of core it will be allowed to use (i.e. oversubscribing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:140,safety,prevent,prevent,140,"> I am convinced that it should. If you want to oversubscribe then that env var is your only chance. Since the `cgroup` limit will actually prevent the process from using more than the configured amount, I agree that you are right. Using the env var, is a way to tell `ROOT` to use more threads than the effective number of core it will be allowed to use (i.e. oversubscribing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:140,security,preven,prevent,140,"> I am convinced that it should. If you want to oversubscribe then that env var is your only chance. Since the `cgroup` limit will actually prevent the process from using more than the configured amount, I agree that you are right. Using the env var, is a way to tell `ROOT` to use more threads than the effective number of core it will be allowed to use (i.e. oversubscribing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:185,security,configur,configured,185,"> I am convinced that it should. If you want to oversubscribe then that env var is your only chance. Since the `cgroup` limit will actually prevent the process from using more than the configured amount, I agree that you are right. Using the env var, is a way to tell `ROOT` to use more threads than the effective number of core it will be allowed to use (i.e. oversubscribing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:304,usability,effectiv,effective,304,"> I am convinced that it should. If you want to oversubscribe then that env var is your only chance. Since the `cgroup` limit will actually prevent the process from using more than the configured amount, I agree that you are right. Using the env var, is a way to tell `ROOT` to use more threads than the effective number of core it will be allowed to use (i.e. oversubscribing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:207,availability,state,state,207,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:785,availability,avail,available,785,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:197,deployability,automat,automatic,197,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:354,deployability,Log,LogicalCPUBandwithControl,354,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:446,energy efficiency,CPU,CPU,446,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:207,integrability,state,state,207,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:446,performance,CPU,CPU,446,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:744,performance,parallel,parallel,744,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:785,reliability,availab,available,785,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:354,safety,Log,LogicalCPUBandwithControl,354,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:785,safety,avail,available,785,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:354,security,Log,LogicalCPUBandwithControl,354,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:459,security,Control,Control,459,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:785,security,availab,available,785,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:197,testability,automat,automatic,197,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:354,testability,Log,LogicalCPUBandwithControl,354,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:459,testability,Control,Control,459,"I'm not sure oversubscription will work as you expect, `RTaskArenaWrapper`'s ctor has this code:. ```cpp. const unsigned tbbDefaultNumberThreads = fTBBArena->max_concurrency(); // not initialized, automatic state. maxConcurrency = maxConcurrency > 0 ? std::min(maxConcurrency, tbbDefaultNumberThreads) : tbbDefaultNumberThreads;. const unsigned bcCpus = LogicalCPUBandwithControl();. if (maxConcurrency > bcCpus) {. Warning(""RTaskArenaWrapper"", ""CPU Bandwith Control Active. Proceeding with %d threads accordingly"", bcCpus);. maxConcurrency = bcCpus;. }. if (maxConcurrency > tbb::global_control::active_value(tbb::global_control::max_allowed_parallelism)) {. Warning(""RTaskArenaWrapper"", ""tbb::global_control is active, limiting the number of parallel workers"". ""from this task arena available for execution."");. }. fTBBArena->initialize(maxConcurrency);. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:275,availability,state,statement,275,"Thanks, @eguiraud . I don't see this as a reason to complain if `ROOT_MAX_THREADS` is set to a value higher than what the TBB arena will use in the end - also because it's already fairly involved to figure out what that number will be... If I got you wrong and / or my above statement is incorrect then we will add that error message in a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:320,availability,error,error,320,"Thanks, @eguiraud . I don't see this as a reason to complain if `ROOT_MAX_THREADS` is set to a value higher than what the TBB arena will use in the end - also because it's already fairly involved to figure out what that number will be... If I got you wrong and / or my above statement is incorrect then we will add that error message in a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:275,integrability,state,statement,275,"Thanks, @eguiraud . I don't see this as a reason to complain if `ROOT_MAX_THREADS` is set to a value higher than what the TBB arena will use in the end - also because it's already fairly involved to figure out what that number will be... If I got you wrong and / or my above statement is incorrect then we will add that error message in a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:326,integrability,messag,message,326,"Thanks, @eguiraud . I don't see this as a reason to complain if `ROOT_MAX_THREADS` is set to a value higher than what the TBB arena will use in the end - also because it's already fairly involved to figure out what that number will be... If I got you wrong and / or my above statement is incorrect then we will add that error message in a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:339,integrability,sub,subsequent,339,"Thanks, @eguiraud . I don't see this as a reason to complain if `ROOT_MAX_THREADS` is set to a value higher than what the TBB arena will use in the end - also because it's already fairly involved to figure out what that number will be... If I got you wrong and / or my above statement is incorrect then we will add that error message in a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:326,interoperability,messag,message,326,"Thanks, @eguiraud . I don't see this as a reason to complain if `ROOT_MAX_THREADS` is set to a value higher than what the TBB arena will use in the end - also because it's already fairly involved to figure out what that number will be... If I got you wrong and / or my above statement is incorrect then we will add that error message in a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:320,performance,error,error,320,"Thanks, @eguiraud . I don't see this as a reason to complain if `ROOT_MAX_THREADS` is set to a value higher than what the TBB arena will use in the end - also because it's already fairly involved to figure out what that number will be... If I got you wrong and / or my above statement is incorrect then we will add that error message in a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:52,safety,compl,complain,52,"Thanks, @eguiraud . I don't see this as a reason to complain if `ROOT_MAX_THREADS` is set to a value higher than what the TBB arena will use in the end - also because it's already fairly involved to figure out what that number will be... If I got you wrong and / or my above statement is incorrect then we will add that error message in a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:320,safety,error,error,320,"Thanks, @eguiraud . I don't see this as a reason to complain if `ROOT_MAX_THREADS` is set to a value higher than what the TBB arena will use in the end - also because it's already fairly involved to figure out what that number will be... If I got you wrong and / or my above statement is incorrect then we will add that error message in a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:52,security,compl,complain,52,"Thanks, @eguiraud . I don't see this as a reason to complain if `ROOT_MAX_THREADS` is set to a value higher than what the TBB arena will use in the end - also because it's already fairly involved to figure out what that number will be... If I got you wrong and / or my above statement is incorrect then we will add that error message in a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:320,usability,error,error,320,"Thanks, @eguiraud . I don't see this as a reason to complain if `ROOT_MAX_THREADS` is set to a value higher than what the TBB arena will use in the end - also because it's already fairly involved to figure out what that number will be... If I got you wrong and / or my above statement is incorrect then we will add that error message in a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:12,availability,failur,failures,12,The Windows failures seem spurious / build system issues unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:12,deployability,fail,failures,12,The Windows failures seem spurious / build system issues unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:37,deployability,build,build,37,The Windows failures seem spurious / build system issues unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:12,performance,failur,failures,12,The Windows failures seem spurious / build system issues unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:12,reliability,fail,failures,12,The Windows failures seem spurious / build system issues unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/pull/13057:87,interoperability,specif,specify,87,"@Axel-Naumann what I meant was that the docs now seem to suggest that it's possible to specify a high number of threads in order to oversubscribe the machine, but given the snippet I posted above I don't think that's the case:. ```. root [0] ROOT::EnableImplicitMT(42);. root [1] ROOT::GetThreadPoolSize(). (unsigned int) 8. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
https://github.com/root-project/root/issues/13058:26,availability,failur,failures,26,"It turns out the tutorial failures can be solved with https://github.com/root-project/root/pull/13112... As written before, the failures of `gtest-tree-ntuple-v7-test-ntuple-types` and `roottest-root-core-execStatusBitsCheck` likely have a different reason. ~@jblomer FYI~ (actually `gtest-tree-ntuple-v7-test-ntuple-types` was easy to solve, https://github.com/root-project/root/pull/13131)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:128,availability,failur,failures,128,"It turns out the tutorial failures can be solved with https://github.com/root-project/root/pull/13112... As written before, the failures of `gtest-tree-ntuple-v7-test-ntuple-types` and `roottest-root-core-execStatusBitsCheck` likely have a different reason. ~@jblomer FYI~ (actually `gtest-tree-ntuple-v7-test-ntuple-types` was easy to solve, https://github.com/root-project/root/pull/13131)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:26,deployability,fail,failures,26,"It turns out the tutorial failures can be solved with https://github.com/root-project/root/pull/13112... As written before, the failures of `gtest-tree-ntuple-v7-test-ntuple-types` and `roottest-root-core-execStatusBitsCheck` likely have a different reason. ~@jblomer FYI~ (actually `gtest-tree-ntuple-v7-test-ntuple-types` was easy to solve, https://github.com/root-project/root/pull/13131)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:128,deployability,fail,failures,128,"It turns out the tutorial failures can be solved with https://github.com/root-project/root/pull/13112... As written before, the failures of `gtest-tree-ntuple-v7-test-ntuple-types` and `roottest-root-core-execStatusBitsCheck` likely have a different reason. ~@jblomer FYI~ (actually `gtest-tree-ntuple-v7-test-ntuple-types` was easy to solve, https://github.com/root-project/root/pull/13131)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:200,energy efficiency,core,core-execStatusBitsCheck,200,"It turns out the tutorial failures can be solved with https://github.com/root-project/root/pull/13112... As written before, the failures of `gtest-tree-ntuple-v7-test-ntuple-types` and `roottest-root-core-execStatusBitsCheck` likely have a different reason. ~@jblomer FYI~ (actually `gtest-tree-ntuple-v7-test-ntuple-types` was easy to solve, https://github.com/root-project/root/pull/13131)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:26,performance,failur,failures,26,"It turns out the tutorial failures can be solved with https://github.com/root-project/root/pull/13112... As written before, the failures of `gtest-tree-ntuple-v7-test-ntuple-types` and `roottest-root-core-execStatusBitsCheck` likely have a different reason. ~@jblomer FYI~ (actually `gtest-tree-ntuple-v7-test-ntuple-types` was easy to solve, https://github.com/root-project/root/pull/13131)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:128,performance,failur,failures,128,"It turns out the tutorial failures can be solved with https://github.com/root-project/root/pull/13112... As written before, the failures of `gtest-tree-ntuple-v7-test-ntuple-types` and `roottest-root-core-execStatusBitsCheck` likely have a different reason. ~@jblomer FYI~ (actually `gtest-tree-ntuple-v7-test-ntuple-types` was easy to solve, https://github.com/root-project/root/pull/13131)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:26,reliability,fail,failures,26,"It turns out the tutorial failures can be solved with https://github.com/root-project/root/pull/13112... As written before, the failures of `gtest-tree-ntuple-v7-test-ntuple-types` and `roottest-root-core-execStatusBitsCheck` likely have a different reason. ~@jblomer FYI~ (actually `gtest-tree-ntuple-v7-test-ntuple-types` was easy to solve, https://github.com/root-project/root/pull/13131)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:128,reliability,fail,failures,128,"It turns out the tutorial failures can be solved with https://github.com/root-project/root/pull/13112... As written before, the failures of `gtest-tree-ntuple-v7-test-ntuple-types` and `roottest-root-core-execStatusBitsCheck` likely have a different reason. ~@jblomer FYI~ (actually `gtest-tree-ntuple-v7-test-ntuple-types` was easy to solve, https://github.com/root-project/root/pull/13131)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:162,safety,test,test-ntuple-types,162,"It turns out the tutorial failures can be solved with https://github.com/root-project/root/pull/13112... As written before, the failures of `gtest-tree-ntuple-v7-test-ntuple-types` and `roottest-root-core-execStatusBitsCheck` likely have a different reason. ~@jblomer FYI~ (actually `gtest-tree-ntuple-v7-test-ntuple-types` was easy to solve, https://github.com/root-project/root/pull/13131)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:305,safety,test,test-ntuple-types,305,"It turns out the tutorial failures can be solved with https://github.com/root-project/root/pull/13112... As written before, the failures of `gtest-tree-ntuple-v7-test-ntuple-types` and `roottest-root-core-execStatusBitsCheck` likely have a different reason. ~@jblomer FYI~ (actually `gtest-tree-ntuple-v7-test-ntuple-types` was easy to solve, https://github.com/root-project/root/pull/13131)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:162,testability,test,test-ntuple-types,162,"It turns out the tutorial failures can be solved with https://github.com/root-project/root/pull/13112... As written before, the failures of `gtest-tree-ntuple-v7-test-ntuple-types` and `roottest-root-core-execStatusBitsCheck` likely have a different reason. ~@jblomer FYI~ (actually `gtest-tree-ntuple-v7-test-ntuple-types` was easy to solve, https://github.com/root-project/root/pull/13131)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:305,testability,test,test-ntuple-types,305,"It turns out the tutorial failures can be solved with https://github.com/root-project/root/pull/13112... As written before, the failures of `gtest-tree-ntuple-v7-test-ntuple-types` and `roottest-root-core-execStatusBitsCheck` likely have a different reason. ~@jblomer FYI~ (actually `gtest-tree-ntuple-v7-test-ntuple-types` was easy to solve, https://github.com/root-project/root/pull/13131)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:76,availability,failur,failures,76,"After merging https://github.com/root-project/root/pull/13139, the tutorial failures are gone. I've changed the assignees to include @pcanal and @linev since the only remaining failure is `roottest-root-core-execStatusBitsCheck` regarding `RBrowserDataCleanup`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:177,availability,failur,failure,177,"After merging https://github.com/root-project/root/pull/13139, the tutorial failures are gone. I've changed the assignees to include @pcanal and @linev since the only remaining failure is `roottest-root-core-execStatusBitsCheck` regarding `RBrowserDataCleanup`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:76,deployability,fail,failures,76,"After merging https://github.com/root-project/root/pull/13139, the tutorial failures are gone. I've changed the assignees to include @pcanal and @linev since the only remaining failure is `roottest-root-core-execStatusBitsCheck` regarding `RBrowserDataCleanup`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:177,deployability,fail,failure,177,"After merging https://github.com/root-project/root/pull/13139, the tutorial failures are gone. I've changed the assignees to include @pcanal and @linev since the only remaining failure is `roottest-root-core-execStatusBitsCheck` regarding `RBrowserDataCleanup`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:203,energy efficiency,core,core-execStatusBitsCheck,203,"After merging https://github.com/root-project/root/pull/13139, the tutorial failures are gone. I've changed the assignees to include @pcanal and @linev since the only remaining failure is `roottest-root-core-execStatusBitsCheck` regarding `RBrowserDataCleanup`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:76,performance,failur,failures,76,"After merging https://github.com/root-project/root/pull/13139, the tutorial failures are gone. I've changed the assignees to include @pcanal and @linev since the only remaining failure is `roottest-root-core-execStatusBitsCheck` regarding `RBrowserDataCleanup`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:177,performance,failur,failure,177,"After merging https://github.com/root-project/root/pull/13139, the tutorial failures are gone. I've changed the assignees to include @pcanal and @linev since the only remaining failure is `roottest-root-core-execStatusBitsCheck` regarding `RBrowserDataCleanup`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:76,reliability,fail,failures,76,"After merging https://github.com/root-project/root/pull/13139, the tutorial failures are gone. I've changed the assignees to include @pcanal and @linev since the only remaining failure is `roottest-root-core-execStatusBitsCheck` regarding `RBrowserDataCleanup`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:177,reliability,fail,failure,177,"After merging https://github.com/root-project/root/pull/13139, the tutorial failures are gone. I've changed the assignees to include @pcanal and @linev since the only remaining failure is `roottest-root-core-execStatusBitsCheck` regarding `RBrowserDataCleanup`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13058:0,availability,ping,ping,0,ping @pcanal,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13058
https://github.com/root-project/root/issues/13062:166,deployability,instal,installed,166,"Backticks around the output of GetSetup have been added in #13065 . The hostname of the machine where ROOT was built in general does not say much w.r.t. how ROOT was installed, but I don't think it's so bad if the user has to provide that information themselves.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13062
https://github.com/root-project/root/issues/13062:128,reliability,doe,does,128,"Backticks around the output of GetSetup have been added in #13065 . The hostname of the machine where ROOT was built in general does not say much w.r.t. how ROOT was installed, but I don't think it's so bad if the user has to provide that information themselves.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13062
https://github.com/root-project/root/issues/13062:214,usability,user,user,214,"Backticks around the output of GetSetup have been added in #13065 . The hostname of the machine where ROOT was built in general does not say much w.r.t. how ROOT was installed, but I don't think it's so bad if the user has to provide that information themselves.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13062
https://github.com/root-project/root/issues/13062:55,energy efficiency,reduc,reduce,55,Adding one more idea:. @vgvassilev rightly suggests to reduce the number of fields that are mandatory (or duplicated). See https://github.com/root-project/root/issues/14781#issue-2145159615,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13062
https://github.com/root-project/root/pull/13065:43,deployability,version,version,43,Thanks! May I also suggest formatting root-version textarea as monospace? See https://github.com/root-project/root/issues/13062,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13065
https://github.com/root-project/root/pull/13065:43,integrability,version,version,43,Thanks! May I also suggest formatting root-version textarea as monospace? See https://github.com/root-project/root/issues/13062,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13065
https://github.com/root-project/root/pull/13065:27,interoperability,format,formatting,27,Thanks! May I also suggest formatting root-version textarea as monospace? See https://github.com/root-project/root/issues/13062,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13065
https://github.com/root-project/root/pull/13065:43,modifiability,version,version,43,Thanks! May I also suggest formatting root-version textarea as monospace? See https://github.com/root-project/root/issues/13062,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13065
https://github.com/root-project/root/pull/13066:113,availability,failur,failures,113,"Please rebase your commits on top of master, rather than having merge commits. (This will also improve the check failures.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13066
https://github.com/root-project/root/pull/13066:113,deployability,fail,failures,113,"Please rebase your commits on top of master, rather than having merge commits. (This will also improve the check failures.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13066
https://github.com/root-project/root/pull/13066:113,performance,failur,failures,113,"Please rebase your commits on top of master, rather than having merge commits. (This will also improve the check failures.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13066
https://github.com/root-project/root/pull/13066:113,reliability,fail,failures,113,"Please rebase your commits on top of master, rather than having merge commits. (This will also improve the check failures.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13066
https://github.com/root-project/root/pull/13067:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13067
https://github.com/root-project/root/pull/13069:33,deployability,patch,patching,33,"Hello @mkrzewic, we try to avoid patching our copy of LLVM / Clang if we can help it. What's the deal with `_REENTRANT`, are there FreeBSD headers expecting this to be set or is this ROOT checking something that isn't needed on FreeBSD?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13069:27,safety,avoid,avoid,27,"Hello @mkrzewic, we try to avoid patching our copy of LLVM / Clang if we can help it. What's the deal with `_REENTRANT`, are there FreeBSD headers expecting this to be set or is this ROOT checking something that isn't needed on FreeBSD?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13069:33,safety,patch,patching,33,"Hello @mkrzewic, we try to avoid patching our copy of LLVM / Clang if we can help it. What's the deal with `_REENTRANT`, are there FreeBSD headers expecting this to be set or is this ROOT checking something that isn't needed on FreeBSD?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13069:33,security,patch,patching,33,"Hello @mkrzewic, we try to avoid patching our copy of LLVM / Clang if we can help it. What's the deal with `_REENTRANT`, are there FreeBSD headers expecting this to be set or is this ROOT checking something that isn't needed on FreeBSD?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13069:77,usability,help,help,77,"Hello @mkrzewic, we try to avoid patching our copy of LLVM / Clang if we can help it. What's the deal with `_REENTRANT`, are there FreeBSD headers expecting this to be set or is this ROOT checking something that isn't needed on FreeBSD?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13069:110,performance,lock,locking,110,"I see, indeed makes sense to not touch llvm too much:). The problem is somewhere in root, I think it was some locking mechanism in TThread(.*) that expects _reentrant to be defined. Did not want to touch it since it is a bit more convoluted than what llvm does;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13069:256,reliability,doe,does,256,"I see, indeed makes sense to not touch llvm too much:). The problem is somewhere in root, I think it was some locking mechanism in TThread(.*) that expects _reentrant to be defined. Did not want to touch it since it is a bit more convoluted than what llvm does;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13069:110,security,lock,locking,110,"I see, indeed makes sense to not touch llvm too much:). The problem is somewhere in root, I think it was some locking mechanism in TThread(.*) that expects _reentrant to be defined. Did not want to touch it since it is a bit more convoluted than what llvm does;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13069:253,deployability,build,build,253,"so after a quick git grep _REENTRANT through the system sources I see that nothing noteworthy is defining/using this macro, so i guess libc and other guts are thread safe by default (unless you count ncurses as guts ;) ). Now the interpreter thing: the build defs seem to be set by interpreter/llvm/src/tools/clang/lib/Basic/Targets/OSTargets.h for interpreted code - and that can rely on _REENTRANT being defined. Maybe there is some other place I don't know about. Now the following patch also works, at least for TThread...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13069:485,deployability,patch,patch,485,"so after a quick git grep _REENTRANT through the system sources I see that nothing noteworthy is defining/using this macro, so i guess libc and other guts are thread safe by default (unless you count ncurses as guts ;) ). Now the interpreter thing: the build defs seem to be set by interpreter/llvm/src/tools/clang/lib/Basic/Targets/OSTargets.h for interpreted code - and that can rely on _REENTRANT being defined. Maybe there is some other place I don't know about. Now the following patch also works, at least for TThread...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13069:166,safety,safe,safe,166,"so after a quick git grep _REENTRANT through the system sources I see that nothing noteworthy is defining/using this macro, so i guess libc and other guts are thread safe by default (unless you count ncurses as guts ;) ). Now the interpreter thing: the build defs seem to be set by interpreter/llvm/src/tools/clang/lib/Basic/Targets/OSTargets.h for interpreted code - and that can rely on _REENTRANT being defined. Maybe there is some other place I don't know about. Now the following patch also works, at least for TThread...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13069:485,safety,patch,patch,485,"so after a quick git grep _REENTRANT through the system sources I see that nothing noteworthy is defining/using this macro, so i guess libc and other guts are thread safe by default (unless you count ncurses as guts ;) ). Now the interpreter thing: the build defs seem to be set by interpreter/llvm/src/tools/clang/lib/Basic/Targets/OSTargets.h for interpreted code - and that can rely on _REENTRANT being defined. Maybe there is some other place I don't know about. Now the following patch also works, at least for TThread...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13069:485,security,patch,patch,485,"so after a quick git grep _REENTRANT through the system sources I see that nothing noteworthy is defining/using this macro, so i guess libc and other guts are thread safe by default (unless you count ncurses as guts ;) ). Now the interpreter thing: the build defs seem to be set by interpreter/llvm/src/tools/clang/lib/Basic/Targets/OSTargets.h for interpreted code - and that can rely on _REENTRANT being defined. Maybe there is some other place I don't know about. Now the following patch also works, at least for TThread...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13069:303,usability,tool,tools,303,"so after a quick git grep _REENTRANT through the system sources I see that nothing noteworthy is defining/using this macro, so i guess libc and other guts are thread safe by default (unless you count ncurses as guts ;) ). Now the interpreter thing: the build defs seem to be set by interpreter/llvm/src/tools/clang/lib/Basic/Targets/OSTargets.h for interpreted code - and that can rely on _REENTRANT being defined. Maybe there is some other place I don't know about. Now the following patch also works, at least for TThread...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13069:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13069
https://github.com/root-project/root/pull/13071:136,safety,compl,completely,136,"> Did you have a look if that’s not already fixed in llvm upstream and possibly backport the fix/workaround? Yes, but the whole file is completely different",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13071
https://github.com/root-project/root/pull/13071:136,security,compl,completely,136,"> Did you have a look if that’s not already fixed in llvm upstream and possibly backport the fix/workaround? Yes, but the whole file is completely different",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13071
https://github.com/root-project/root/pull/13071:179,availability,state,statement,179,"> > Did you have a look if that’s not already fixed in llvm upstream and possibly backport the fix/workaround? > . > Yes, but the whole file is completely different. The `switch` statement is still there:. https://github.com/llvm/llvm-project/blob/3ea8f2526541884e03d5bd4f4e46f4eb190990b6/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp#L812-L815. However, there are now function calls before the `return`, so potentially the compiler bug doesn't trigger...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13071
https://github.com/root-project/root/pull/13071:179,integrability,state,statement,179,"> > Did you have a look if that’s not already fixed in llvm upstream and possibly backport the fix/workaround? > . > Yes, but the whole file is completely different. The `switch` statement is still there:. https://github.com/llvm/llvm-project/blob/3ea8f2526541884e03d5bd4f4e46f4eb190990b6/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp#L812-L815. However, there are now function calls before the `return`, so potentially the compiler bug doesn't trigger...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13071
https://github.com/root-project/root/pull/13071:445,reliability,doe,doesn,445,"> > Did you have a look if that’s not already fixed in llvm upstream and possibly backport the fix/workaround? > . > Yes, but the whole file is completely different. The `switch` statement is still there:. https://github.com/llvm/llvm-project/blob/3ea8f2526541884e03d5bd4f4e46f4eb190990b6/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp#L812-L815. However, there are now function calls before the `return`, so potentially the compiler bug doesn't trigger...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13071
https://github.com/root-project/root/pull/13071:144,safety,compl,completely,144,"> > Did you have a look if that’s not already fixed in llvm upstream and possibly backport the fix/workaround? > . > Yes, but the whole file is completely different. The `switch` statement is still there:. https://github.com/llvm/llvm-project/blob/3ea8f2526541884e03d5bd4f4e46f4eb190990b6/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp#L812-L815. However, there are now function calls before the `return`, so potentially the compiler bug doesn't trigger...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13071
https://github.com/root-project/root/pull/13071:144,security,compl,completely,144,"> > Did you have a look if that’s not already fixed in llvm upstream and possibly backport the fix/workaround? > . > Yes, but the whole file is completely different. The `switch` statement is still there:. https://github.com/llvm/llvm-project/blob/3ea8f2526541884e03d5bd4f4e46f4eb190990b6/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp#L812-L815. However, there are now function calls before the `return`, so potentially the compiler bug doesn't trigger...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13071
https://github.com/root-project/root/pull/13071:14,deployability,releas,release,14,"FYI, from the release notes of the last VS update (v17.6.5):. > Fixed an issue where switches over unsigned 64-bit integers could cause a crash on x86 and ARM targets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13071
https://github.com/root-project/root/pull/13071:43,deployability,updat,update,43,"FYI, from the release notes of the last VS update (v17.6.5):. > Fixed an issue where switches over unsigned 64-bit integers could cause a crash on x86 and ARM targets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13071
https://github.com/root-project/root/pull/13071:43,safety,updat,update,43,"FYI, from the release notes of the last VS update (v17.6.5):. > Fixed an issue where switches over unsigned 64-bit integers could cause a crash on x86 and ARM targets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13071
https://github.com/root-project/root/pull/13071:43,security,updat,update,43,"FYI, from the release notes of the last VS update (v17.6.5):. > Fixed an issue where switches over unsigned 64-bit integers could cause a crash on x86 and ARM targets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13071
https://github.com/root-project/root/pull/13072:60,safety,test,test,60,"I suppose that header can be removed, too? @pcanal what's a test case to look at? GetNormalizedNameWithDefaultTemplateArguments()? ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:60,testability,test,test,60,"I suppose that header can be removed, too? @pcanal what's a test case to look at? GetNormalizedNameWithDefaultTemplateArguments()? ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:69,deployability,patch,patches,69,"> I suppose that header can be removed, too? Yes, at least two Clang patches can be reverted after this, but I first want to know if it's actually ok to do so before I do that work. > [...] this case is taken care of by something else. That ""something else"" could well be commit https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:69,safety,patch,patches,69,"> I suppose that header can be removed, too? Yes, at least two Clang patches can be reverted after this, but I first want to know if it's actually ok to do so before I do that work. > [...] this case is taken care of by something else. That ""something else"" could well be commit https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:69,security,patch,patches,69,"> I suppose that header can be removed, too? Yes, at least two Clang patches can be reverted after this, but I first want to know if it's actually ok to do so before I do that work. > [...] this case is taken care of by something else. That ""something else"" could well be commit https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:220,deployability,fail,fail,220,"> That ""something else"" could well be commit [c6cfe7c](https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e) ... Yep, reverting that one finally causes `roottest-root-io-double32-make` to fail!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:220,reliability,fail,fail,220,"> That ""something else"" could well be commit [c6cfe7c](https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e) ... Yep, reverting that one finally causes `roottest-root-io-double32-make` to fail!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:90,deployability,patch,patch,90,In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:174,deployability,updat,update,174,In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:216,deployability,patch,patches,216,In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:90,safety,patch,patch,90,In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:174,safety,updat,update,174,In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:216,safety,patch,patches,216,In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:90,security,patch,patch,90,In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:174,security,updat,update,174,In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:216,security,patch,patches,216,In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:92,deployability,patch,patch,92,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:176,deployability,updat,update,176,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:218,deployability,patch,patches,218,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:230,energy efficiency,current,currently,230,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:92,safety,patch,patch,92,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:176,safety,updat,update,176,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:218,safety,patch,patches,218,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:390,safety,test,test,390,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:92,security,patch,patch,92,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:176,security,updat,update,176,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:218,security,patch,patches,218,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:424,security,Hack,HackForDefaultTemplateArg,424,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:390,testability,test,test,390,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:117,energy efficiency,alloc,allocator,117,"I am not sure we have good test of the following cases:. ```. template <typename T> struct myallocator : public std::allocator<T> {};. template <typename T, typename Q = T > class Artificial1 {};. template <typename T, typename Q = std::vector<T> > class Artificial2 {};. template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. ```. where the normalized name for `T==Double32_t` should be:. ```. Artificial1<Double32_t, Double32_t>. Artificial2<Double32_t, vector<Double32_t> >. Artificial3<Double32_t, vector<Double32_t, myallocator<Double32_t> > >. ```. also:. ```. root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". ```. i.e. *If* I remember correctly the hack was about adding missing but needed default template parameters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:684,energy efficiency,alloc,allocator,684,"I am not sure we have good test of the following cases:. ```. template <typename T> struct myallocator : public std::allocator<T> {};. template <typename T, typename Q = T > class Artificial1 {};. template <typename T, typename Q = std::vector<T> > class Artificial2 {};. template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. ```. where the normalized name for `T==Double32_t` should be:. ```. Artificial1<Double32_t, Double32_t>. Artificial2<Double32_t, vector<Double32_t> >. Artificial3<Double32_t, vector<Double32_t, myallocator<Double32_t> > >. ```. also:. ```. root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". ```. i.e. *If* I remember correctly the hack was about adding missing but needed default template parameters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:105,integrability,pub,public,105,"I am not sure we have good test of the following cases:. ```. template <typename T> struct myallocator : public std::allocator<T> {};. template <typename T, typename Q = T > class Artificial1 {};. template <typename T, typename Q = std::vector<T> > class Artificial2 {};. template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. ```. where the normalized name for `T==Double32_t` should be:. ```. Artificial1<Double32_t, Double32_t>. Artificial2<Double32_t, vector<Double32_t> >. Artificial3<Double32_t, vector<Double32_t, myallocator<Double32_t> > >. ```. also:. ```. root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". ```. i.e. *If* I remember correctly the hack was about adding missing but needed default template parameters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:883,modifiability,paramet,parameters,883,"I am not sure we have good test of the following cases:. ```. template <typename T> struct myallocator : public std::allocator<T> {};. template <typename T, typename Q = T > class Artificial1 {};. template <typename T, typename Q = std::vector<T> > class Artificial2 {};. template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. ```. where the normalized name for `T==Double32_t` should be:. ```. Artificial1<Double32_t, Double32_t>. Artificial2<Double32_t, vector<Double32_t> >. Artificial3<Double32_t, vector<Double32_t, myallocator<Double32_t> > >. ```. also:. ```. root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". ```. i.e. *If* I remember correctly the hack was about adding missing but needed default template parameters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:27,safety,test,test,27,"I am not sure we have good test of the following cases:. ```. template <typename T> struct myallocator : public std::allocator<T> {};. template <typename T, typename Q = T > class Artificial1 {};. template <typename T, typename Q = std::vector<T> > class Artificial2 {};. template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. ```. where the normalized name for `T==Double32_t` should be:. ```. Artificial1<Double32_t, Double32_t>. Artificial2<Double32_t, vector<Double32_t> >. Artificial3<Double32_t, vector<Double32_t, myallocator<Double32_t> > >. ```. also:. ```. root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". ```. i.e. *If* I remember correctly the hack was about adding missing but needed default template parameters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:802,safety,reme,remember,802,"I am not sure we have good test of the following cases:. ```. template <typename T> struct myallocator : public std::allocator<T> {};. template <typename T, typename Q = T > class Artificial1 {};. template <typename T, typename Q = std::vector<T> > class Artificial2 {};. template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. ```. where the normalized name for `T==Double32_t` should be:. ```. Artificial1<Double32_t, Double32_t>. Artificial2<Double32_t, vector<Double32_t> >. Artificial3<Double32_t, vector<Double32_t, myallocator<Double32_t> > >. ```. also:. ```. root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". ```. i.e. *If* I remember correctly the hack was about adding missing but needed default template parameters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:825,security,hack,hack,825,"I am not sure we have good test of the following cases:. ```. template <typename T> struct myallocator : public std::allocator<T> {};. template <typename T, typename Q = T > class Artificial1 {};. template <typename T, typename Q = std::vector<T> > class Artificial2 {};. template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. ```. where the normalized name for `T==Double32_t` should be:. ```. Artificial1<Double32_t, Double32_t>. Artificial2<Double32_t, vector<Double32_t> >. Artificial3<Double32_t, vector<Double32_t, myallocator<Double32_t> > >. ```. also:. ```. root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". ```. i.e. *If* I remember correctly the hack was about adding missing but needed default template parameters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:27,testability,test,test,27,"I am not sure we have good test of the following cases:. ```. template <typename T> struct myallocator : public std::allocator<T> {};. template <typename T, typename Q = T > class Artificial1 {};. template <typename T, typename Q = std::vector<T> > class Artificial2 {};. template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. ```. where the normalized name for `T==Double32_t` should be:. ```. Artificial1<Double32_t, Double32_t>. Artificial2<Double32_t, vector<Double32_t> >. Artificial3<Double32_t, vector<Double32_t, myallocator<Double32_t> > >. ```. also:. ```. root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". ```. i.e. *If* I remember correctly the hack was about adding missing but needed default template parameters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:106,energy efficiency,alloc,allocator,106,"Yep, seems to be all working still:. ```. root [0] template <typename T> struct myallocator : public std::allocator<T> {};. root [1] template <typename T, typename Q = T > class Artificial1 {};. root [2] template <typename T, typename Q = std::vector<T> > class Artificial2 {};. root [3] template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. root [4] TClass::GetClass(""Artificial1<Double32_t>"")->GetName(). (const char *) ""Artificial1<Double32_t,Double32_t>"". root [5] TClass::GetClass(""Artificial2<Double32_t>"")->GetName(). (const char *) ""Artificial2<Double32_t,vector<Double32_t> >"". root [6] TClass::GetClass(""Artificial3<Double32_t>"")->GetName(). (const char *) ""Artificial3<Double32_t,vector<Double32_t,myallocator<Double32_t> > >"". root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:857,energy efficiency,alloc,allocator,857,"Yep, seems to be all working still:. ```. root [0] template <typename T> struct myallocator : public std::allocator<T> {};. root [1] template <typename T, typename Q = T > class Artificial1 {};. root [2] template <typename T, typename Q = std::vector<T> > class Artificial2 {};. root [3] template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. root [4] TClass::GetClass(""Artificial1<Double32_t>"")->GetName(). (const char *) ""Artificial1<Double32_t,Double32_t>"". root [5] TClass::GetClass(""Artificial2<Double32_t>"")->GetName(). (const char *) ""Artificial2<Double32_t,vector<Double32_t> >"". root [6] TClass::GetClass(""Artificial3<Double32_t>"")->GetName(). (const char *) ""Artificial3<Double32_t,vector<Double32_t,myallocator<Double32_t> > >"". root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:94,integrability,pub,public,94,"Yep, seems to be all working still:. ```. root [0] template <typename T> struct myallocator : public std::allocator<T> {};. root [1] template <typename T, typename Q = T > class Artificial1 {};. root [2] template <typename T, typename Q = std::vector<T> > class Artificial2 {};. root [3] template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. root [4] TClass::GetClass(""Artificial1<Double32_t>"")->GetName(). (const char *) ""Artificial1<Double32_t,Double32_t>"". root [5] TClass::GetClass(""Artificial2<Double32_t>"")->GetName(). (const char *) ""Artificial2<Double32_t,vector<Double32_t> >"". root [6] TClass::GetClass(""Artificial3<Double32_t>"")->GetName(). (const char *) ""Artificial3<Double32_t,vector<Double32_t,myallocator<Double32_t> > >"". root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:41,availability,error,errors,41,"Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:82,availability,failur,failures,82,"Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:82,deployability,fail,failures,82,"Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:41,performance,error,errors,41,"Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:82,performance,failur,failures,82,"Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:82,reliability,fail,failures,82,"Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:41,safety,error,errors,41,"Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:77,safety,test,test,77,"Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:77,testability,test,test,77,"Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:41,usability,error,errors,41,"Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:43,availability,error,errors,43,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:84,availability,failur,failures,84,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:268,availability,failur,failures,268,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:84,deployability,fail,failures,84,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:268,deployability,fail,failures,268,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:315,deployability,version,version,315,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:315,integrability,version,version,315,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:315,modifiability,version,version,315,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:43,performance,error,errors,43,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:84,performance,failur,failures,84,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:268,performance,failur,failures,268,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:84,reliability,fail,failures,84,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:268,reliability,fail,failures,268,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:43,safety,error,errors,43,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:79,safety,test,test,79,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:79,testability,test,test,79,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:43,usability,error,errors,43,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work! I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:16,safety,test,test,16,"*Actually*, the test results say `Windows x86 Debug` which didn't run. So it's uploading a month-old report that it finds somewhere on the filesystem :man_facepalming:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:16,testability,test,test,16,"*Actually*, the test results say `Windows x86 Debug` which didn't run. So it's uploading a month-old report that it finds somewhere on the filesystem :man_facepalming:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:116,energy efficiency,alloc,allocator,116,"> Yep, seems to be all working still:. > . > ```. > root [0] template <typename T> struct myallocator : public std::allocator<T> {};. > root [1] template <typename T, typename Q = T > class Artificial1 {};. > root [2] template <typename T, typename Q = std::vector<T> > class Artificial2 {};. > root [3] template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. > root [4] TClass::GetClass(""Artificial1<Double32_t>"")->GetName(). > (const char *) ""Artificial1<Double32_t,Double32_t>"". > root [5] TClass::GetClass(""Artificial2<Double32_t>"")->GetName(). > (const char *) ""Artificial2<Double32_t,vector<Double32_t> >"". > root [6] TClass::GetClass(""Artificial3<Double32_t>"")->GetName(). > (const char *) ""Artificial3<Double32_t,vector<Double32_t,myallocator<Double32_t> > >"". > root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). > (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". > ```. FWIW the output is still the same after reverting the hack in the Clang sources, which was apparently active by default...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:887,energy efficiency,alloc,allocator,887,"> Yep, seems to be all working still:. > . > ```. > root [0] template <typename T> struct myallocator : public std::allocator<T> {};. > root [1] template <typename T, typename Q = T > class Artificial1 {};. > root [2] template <typename T, typename Q = std::vector<T> > class Artificial2 {};. > root [3] template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. > root [4] TClass::GetClass(""Artificial1<Double32_t>"")->GetName(). > (const char *) ""Artificial1<Double32_t,Double32_t>"". > root [5] TClass::GetClass(""Artificial2<Double32_t>"")->GetName(). > (const char *) ""Artificial2<Double32_t,vector<Double32_t> >"". > root [6] TClass::GetClass(""Artificial3<Double32_t>"")->GetName(). > (const char *) ""Artificial3<Double32_t,vector<Double32_t,myallocator<Double32_t> > >"". > root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). > (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". > ```. FWIW the output is still the same after reverting the hack in the Clang sources, which was apparently active by default...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:104,integrability,pub,public,104,"> Yep, seems to be all working still:. > . > ```. > root [0] template <typename T> struct myallocator : public std::allocator<T> {};. > root [1] template <typename T, typename Q = T > class Artificial1 {};. > root [2] template <typename T, typename Q = std::vector<T> > class Artificial2 {};. > root [3] template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. > root [4] TClass::GetClass(""Artificial1<Double32_t>"")->GetName(). > (const char *) ""Artificial1<Double32_t,Double32_t>"". > root [5] TClass::GetClass(""Artificial2<Double32_t>"")->GetName(). > (const char *) ""Artificial2<Double32_t,vector<Double32_t> >"". > root [6] TClass::GetClass(""Artificial3<Double32_t>"")->GetName(). > (const char *) ""Artificial3<Double32_t,vector<Double32_t,myallocator<Double32_t> > >"". > root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). > (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". > ```. FWIW the output is still the same after reverting the hack in the Clang sources, which was apparently active by default...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13072:1051,security,hack,hack,1051,"> Yep, seems to be all working still:. > . > ```. > root [0] template <typename T> struct myallocator : public std::allocator<T> {};. > root [1] template <typename T, typename Q = T > class Artificial1 {};. > root [2] template <typename T, typename Q = std::vector<T> > class Artificial2 {};. > root [3] template <typename T, typename Q = std::vector<T, myallocator<T> > > class Artificial3 {};. > root [4] TClass::GetClass(""Artificial1<Double32_t>"")->GetName(). > (const char *) ""Artificial1<Double32_t,Double32_t>"". > root [5] TClass::GetClass(""Artificial2<Double32_t>"")->GetName(). > (const char *) ""Artificial2<Double32_t,vector<Double32_t> >"". > root [6] TClass::GetClass(""Artificial3<Double32_t>"")->GetName(). > (const char *) ""Artificial3<Double32_t,vector<Double32_t,myallocator<Double32_t> > >"". > root [7] TClass::GetClass(""Artificial3<Double32_t, std::vector<Double32_t, std::allocator<Double32_t> >>"")->GetName(). > (const char *) ""Artificial3<Double32_t,vector<Double32_t> >"". > ```. FWIW the output is still the same after reverting the hack in the Clang sources, which was apparently active by default...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13072
https://github.com/root-project/root/pull/13073:131,availability,sli,slightly,131,"Linux and macOS passed in the new CI, and Windows passed on Jenkins (plus some Linux and macOS builds), so I'm going to merge this slightly early to avoid the annoying warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13073
https://github.com/root-project/root/pull/13073:95,deployability,build,builds,95,"Linux and macOS passed in the new CI, and Windows passed on Jenkins (plus some Linux and macOS builds), so I'm going to merge this slightly early to avoid the annoying warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13073
https://github.com/root-project/root/pull/13073:131,reliability,sli,slightly,131,"Linux and macOS passed in the new CI, and Windows passed on Jenkins (plus some Linux and macOS builds), so I'm going to merge this slightly early to avoid the annoying warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13073
https://github.com/root-project/root/pull/13073:149,safety,avoid,avoid,149,"Linux and macOS passed in the new CI, and Windows passed on Jenkins (plus some Linux and macOS builds), so I'm going to merge this slightly early to avoid the annoying warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13073
https://github.com/root-project/root/issues/13074:72,usability,support,supported,72,"Thank you for reporting this issue. Unfortunately this is something not supported by ROOT GDML, you cannot use matrix inside and you will have to define each single value",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13074
https://github.com/root-project/root/issues/13074:58,usability,support,support,58,Thank you @lmoneta . However is there a strong reason why support for using matrix couldn't be added to ROOT GDML?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13074
https://github.com/root-project/root/issues/13074:123,modifiability,scal,scalar,123,"No strong reason, just lacking the person to implement it. And this is not really high priority because one can use either scalar variables or the Geant4 GDML writer to produce a file readable by ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13074
https://github.com/root-project/root/issues/13074:130,modifiability,variab,variables,130,"No strong reason, just lacking the person to implement it. And this is not really high priority because one can use either scalar variables or the Geant4 GDML writer to produce a file readable by ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13074
https://github.com/root-project/root/issues/13074:35,usability,person,person,35,"No strong reason, just lacking the person to implement it. And this is not really high priority because one can use either scalar variables or the Geant4 GDML writer to produce a file readable by ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13074
https://github.com/root-project/root/issues/13074:26,deployability,manag,managed,26,Using G4 is indeed how we managed to work around this. I will close this issue. Thank you!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13074
https://github.com/root-project/root/issues/13074:26,energy efficiency,manag,managed,26,Using G4 is indeed how we managed to work around this. I will close this issue. Thank you!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13074
https://github.com/root-project/root/issues/13074:26,safety,manag,managed,26,Using G4 is indeed how we managed to work around this. I will close this issue. Thank you!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13074
https://github.com/root-project/root/issues/13074:62,usability,close,close,62,Using G4 is indeed how we managed to work around this. I will close this issue. Thank you!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13074
https://github.com/root-project/root/issues/13075:143,deployability,API,API,143,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly. Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075
https://github.com/root-project/root/issues/13075:143,integrability,API,API,143,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly. Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075
https://github.com/root-project/root/issues/13075:206,integrability,wrap,wrapper,206,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly. Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075
https://github.com/root-project/root/issues/13075:143,interoperability,API,API,143,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly. Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075
https://github.com/root-project/root/issues/13075:206,interoperability,wrapper,wrapper,206,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly. Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075
https://github.com/root-project/root/issues/13075:156,safety,avoid,avoid,156,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly. Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075
https://github.com/root-project/root/issues/13075:101,testability,simpl,simple,101,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly. Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075
https://github.com/root-project/root/issues/13075:101,usability,simpl,simple,101,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly. Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075
https://github.com/root-project/root/issues/13075:194,usability,custom,custom-made,194,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly. Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075
https://github.com/root-project/root/issues/13075:110,interoperability,convers,conversation,110,"Thanks @pfs . @couet it is not clear to me whether this copy constructor has been implemented or not from the conversation, but it should be pretty straightforward. Can you take care, or, if already done, close the issue directly? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075
https://github.com/root-project/root/issues/13075:31,usability,clear,clear,31,"Thanks @pfs . @couet it is not clear to me whether this copy constructor has been implemented or not from the conversation, but it should be pretty straightforward. Can you take care, or, if already done, close the issue directly? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075
https://github.com/root-project/root/issues/13075:205,usability,close,close,205,"Thanks @pfs . @couet it is not clear to me whether this copy constructor has been implemented or not from the conversation, but it should be pretty straightforward. Can you take care, or, if already done, close the issue directly? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075
https://github.com/root-project/root/issues/13075:614,usability,user,users,614,"Hi all, I have taken a look at this a few months ago, and it is not 100 % straight forward because the copy constructors of the `TH2Poly` base class (`TH2`) has a highly non-trivial copy constructor, which calls virtual methods that are overridden in `TH2Poly` itself. So it is not as straight forward as calling the base class copy constructor and copying the additional members. But for someone who has a good grasp on C++ and is ready to take a dive into the `hist` classes, this is indeed a good issue. By the way, this issue has also been raised on Jira, which highlights that this is important to fix fo the users:. https://its.cern.ch/jira/browse/ROOT-10847",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075
https://github.com/root-project/root/issues/13075:104,usability,help,help,104,I had a look to and came to the same conclusion as @guitargeek. As it is hist related maybe @lmoneta by help in that area. ? It might be more obvious for him ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13075
https://github.com/root-project/root/pull/13076:16,safety,compl,completely,16,I see - miss it completely,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13076
https://github.com/root-project/root/pull/13076:16,security,compl,completely,16,I see - miss it completely,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13076
https://github.com/root-project/root/pull/13077:14,safety,review,review,14,"OK, then I'll review all the GUI",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13077
https://github.com/root-project/root/pull/13077:14,testability,review,review,14,"OK, then I'll review all the GUI",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13077
https://github.com/root-project/root/pull/13078:260,integrability,interfac,interface,260,Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. What do you think @guitargeek ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:260,interoperability,interfac,interface,260,Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. What do you think @guitargeek ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:93,modifiability,refact,refactor,93,Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. What do you think @guitargeek ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:260,modifiability,interfac,interface,260,Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. What do you think @guitargeek ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:93,performance,refactor,refactor,93,Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. What do you think @guitargeek ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:333,deployability,manag,management,333,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:857,deployability,observ,observables,857,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:333,energy efficiency,manag,management,333,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:262,integrability,interfac,interface,262,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:262,interoperability,interfac,interface,262,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:95,modifiability,refact,refactor,95,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:262,modifiability,interfac,interface,262,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:324,modifiability,variab,variable,324,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:921,modifiability,paramet,parameters,921,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:95,performance,refactor,refactor,95,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:333,safety,manag,management,333,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:761,safety,test,testHistFactory,761,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:792,safety,test,test,792,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:761,testability,test,testHistFactory,761,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:792,testability,test,test,792,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:857,testability,observ,observables,857,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:683,usability,support,support,683,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/pull/13078:822,usability,support,support,822,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. > . > What do you think @guitargeek ? I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free. * correct global observables definition and import. * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost). * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13078
https://github.com/root-project/root/issues/13079:22,deployability,upgrad,upgrade,22,"Hi @pcanal, maybe the upgrade of the builtin tbb version fixed this issue? https://github.com/root-project/root/pull/13724",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13079
https://github.com/root-project/root/issues/13079:49,deployability,version,version,49,"Hi @pcanal, maybe the upgrade of the builtin tbb version fixed this issue? https://github.com/root-project/root/pull/13724",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13079
https://github.com/root-project/root/issues/13079:49,integrability,version,version,49,"Hi @pcanal, maybe the upgrade of the builtin tbb version fixed this issue? https://github.com/root-project/root/pull/13724",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13079
https://github.com/root-project/root/issues/13079:22,modifiability,upgrad,upgrade,22,"Hi @pcanal, maybe the upgrade of the builtin tbb version fixed this issue? https://github.com/root-project/root/pull/13724",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13079
https://github.com/root-project/root/issues/13079:49,modifiability,version,version,49,"Hi @pcanal, maybe the upgrade of the builtin tbb version fixed this issue? https://github.com/root-project/root/pull/13724",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13079
https://github.com/root-project/root/issues/13080:144,integrability,filter,filter,144,"I think the command is assembled in `TSystem::CompileMacro`, which takes the library information from `TSystem::GetLibraries`. Maybe we need to filter out `[vdso]` in there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13080
https://github.com/root-project/root/issues/13080:12,usability,command,command,12,"I think the command is assembled in `TSystem::CompileMacro`, which takes the library information from `TSystem::GetLibraries`. Maybe we need to filter out `[vdso]` in there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13080
https://github.com/root-project/root/issues/13080:59,deployability,Updat,UpdateListOfSharedLibraries,59,"ok, thanks, indeed. It looks like it falls back to TCling::UpdateListOfSharedLibraries() (which is the only place where dl_iterate_phdr is called afaik) which in principle should filter this out. But it does not. Looking...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13080
https://github.com/root-project/root/issues/13080:179,integrability,filter,filter,179,"ok, thanks, indeed. It looks like it falls back to TCling::UpdateListOfSharedLibraries() (which is the only place where dl_iterate_phdr is called afaik) which in principle should filter this out. But it does not. Looking...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13080
https://github.com/root-project/root/issues/13080:203,reliability,doe,does,203,"ok, thanks, indeed. It looks like it falls back to TCling::UpdateListOfSharedLibraries() (which is the only place where dl_iterate_phdr is called afaik) which in principle should filter this out. But it does not. Looking...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13080
https://github.com/root-project/root/issues/13080:59,safety,Updat,UpdateListOfSharedLibraries,59,"ok, thanks, indeed. It looks like it falls back to TCling::UpdateListOfSharedLibraries() (which is the only place where dl_iterate_phdr is called afaik) which in principle should filter this out. But it does not. Looking...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13080
https://github.com/root-project/root/issues/13080:59,security,Updat,UpdateListOfSharedLibraries,59,"ok, thanks, indeed. It looks like it falls back to TCling::UpdateListOfSharedLibraries() (which is the only place where dl_iterate_phdr is called afaik) which in principle should filter this out. But it does not. Looking...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13080
https://github.com/root-project/root/issues/13080:75,interoperability,share,shared,75,"@hahnjo found it, there was a bug and some omissions in my initial fix for shared lib registration, I'll make a PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13080
https://github.com/root-project/root/issues/13080:86,interoperability,registr,registration,86,"@hahnjo found it, there was a bug and some omissions in my initial fix for shared lib registration, I'll make a PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13080
https://github.com/root-project/root/issues/13081:135,safety,test,test,135,"I compiled from master today, heads/master@v6-29-01-1733-g0e9f93c4b2 . Still the same, can do only single axis moves. Can someone else test this on Centos 9 or similar? Andrei.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13081
https://github.com/root-project/root/issues/13081:135,testability,test,test,135,"I compiled from master today, heads/master@v6-29-01-1733-g0e9f93c4b2 . Still the same, can do only single axis moves. Can someone else test this on Centos 9 or similar? Andrei.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13081
https://github.com/root-project/root/issues/13081:3,deployability,updat,update,3,"An update: if I compile and run ROOT on Scientific Linux 7, clip editing works even when I use Alma 9 for remote display. Andrei.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13081
https://github.com/root-project/root/issues/13081:3,safety,updat,update,3,"An update: if I compile and run ROOT on Scientific Linux 7, clip editing works even when I use Alma 9 for remote display. Andrei.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13081
https://github.com/root-project/root/issues/13081:3,security,updat,update,3,"An update: if I compile and run ROOT on Scientific Linux 7, clip editing works even when I use Alma 9 for remote display. Andrei.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13081
https://github.com/root-project/root/pull/13082:170,interoperability,semant,semantically,170,"> Combining kFixedWidth and kFitWidth seems surprising but I'm not the GUI expert here ;-). Well, the original combination of `kLHintsExpandX` and `kFixedWidth` was also semantically weird by design. I just try to keep the original idea, even if I don't see the goal. I might review them all at some point (but they are many)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13082
https://github.com/root-project/root/pull/13082:276,safety,review,review,276,"> Combining kFixedWidth and kFitWidth seems surprising but I'm not the GUI expert here ;-). Well, the original combination of `kLHintsExpandX` and `kFixedWidth` was also semantically weird by design. I just try to keep the original idea, even if I don't see the goal. I might review them all at some point (but they are many)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13082
https://github.com/root-project/root/pull/13082:276,testability,review,review,276,"> Combining kFixedWidth and kFitWidth seems surprising but I'm not the GUI expert here ;-). Well, the original combination of `kLHintsExpandX` and `kFixedWidth` was also semantically weird by design. I just try to keep the original idea, even if I don't see the goal. I might review them all at some point (but they are many)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13082
https://github.com/root-project/root/pull/13083:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13083
https://github.com/root-project/root/pull/13086:93,usability,prefer,preference,93,"Sorry for the many pushes, I had to get creative here... The result is quite ugly, no strong preference if we want to do this or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13086
https://github.com/root-project/root/issues/13088:156,interoperability,specif,specific,156,"Hi @bernhardmgruber , thank you for reporting this! I understand the problem, we need to make sure we give a meaningful name to the RNTuple. Regarding your specific example above, I have a doubt about the design. Since the input is a `TChain` with no name, there is no evident unique name to give to the imported RNTuple. If the `TChain` had a name then that would be the correct name to assign. But in this case, we could:. 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. 2. Check that all trees of the chain have the same name (the first one), and assign that. If this is not the case, fallback to assigning the first name anyway ? 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. Thoughts? Also inviting @pcanal and @jblomer to comment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:223,safety,input,input,223,"Hi @bernhardmgruber , thank you for reporting this! I understand the problem, we need to make sure we give a meaningful name to the RNTuple. Regarding your specific example above, I have a doubt about the design. Since the input is a `TChain` with no name, there is no evident unique name to give to the imported RNTuple. If the `TChain` had a name then that would be the correct name to assign. But in this case, we could:. 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. 2. Check that all trees of the chain have the same name (the first one), and assign that. If this is not the case, fallback to assigning the first name anyway ? 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. Thoughts? Also inviting @pcanal and @jblomer to comment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:950,safety,compl,complicated,950,"Hi @bernhardmgruber , thank you for reporting this! I understand the problem, we need to make sure we give a meaningful name to the RNTuple. Regarding your specific example above, I have a doubt about the design. Since the input is a `TChain` with no name, there is no evident unique name to give to the imported RNTuple. If the `TChain` had a name then that would be the correct name to assign. But in this case, we could:. 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. 2. Check that all trees of the chain have the same name (the first one), and assign that. If this is not the case, fallback to assigning the first name anyway ? 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. Thoughts? Also inviting @pcanal and @jblomer to comment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:950,security,compl,complicated,950,"Hi @bernhardmgruber , thank you for reporting this! I understand the problem, we need to make sure we give a meaningful name to the RNTuple. Regarding your specific example above, I have a doubt about the design. Since the input is a `TChain` with no name, there is no evident unique name to give to the imported RNTuple. If the `TChain` had a name then that would be the correct name to assign. But in this case, we could:. 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. 2. Check that all trees of the chain have the same name (the first one), and assign that. If this is not the case, fallback to assigning the first name anyway ? 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. Thoughts? Also inviting @pcanal and @jblomer to comment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:54,testability,understand,understand,54,"Hi @bernhardmgruber , thank you for reporting this! I understand the problem, we need to make sure we give a meaningful name to the RNTuple. Regarding your specific example above, I have a doubt about the design. Since the input is a `TChain` with no name, there is no evident unique name to give to the imported RNTuple. If the `TChain` had a name then that would be the correct name to assign. But in this case, we could:. 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. 2. Check that all trees of the chain have the same name (the first one), and assign that. If this is not the case, fallback to assigning the first name anyway ? 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. Thoughts? Also inviting @pcanal and @jblomer to comment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:897,testability,simpl,simple,897,"Hi @bernhardmgruber , thank you for reporting this! I understand the problem, we need to make sure we give a meaningful name to the RNTuple. Regarding your specific example above, I have a doubt about the design. Since the input is a `TChain` with no name, there is no evident unique name to give to the imported RNTuple. If the `TChain` had a name then that would be the correct name to assign. But in this case, we could:. 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. 2. Check that all trees of the chain have the same name (the first one), and assign that. If this is not the case, fallback to assigning the first name anyway ? 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. Thoughts? Also inviting @pcanal and @jblomer to comment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:223,usability,input,input,223,"Hi @bernhardmgruber , thank you for reporting this! I understand the problem, we need to make sure we give a meaningful name to the RNTuple. Regarding your specific example above, I have a doubt about the design. Since the input is a `TChain` with no name, there is no evident unique name to give to the imported RNTuple. If the `TChain` had a name then that would be the correct name to assign. But in this case, we could:. 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. 2. Check that all trees of the chain have the same name (the first one), and assign that. If this is not the case, fallback to assigning the first name anyway ? 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. Thoughts? Also inviting @pcanal and @jblomer to comment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:814,usability,user,user,814,"Hi @bernhardmgruber , thank you for reporting this! I understand the problem, we need to make sure we give a meaningful name to the RNTuple. Regarding your specific example above, I have a doubt about the design. Since the input is a `TChain` with no name, there is no evident unique name to give to the imported RNTuple. If the `TChain` had a name then that would be the correct name to assign. But in this case, we could:. 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. 2. Check that all trees of the chain have the same name (the first one), and assign that. If this is not the case, fallback to assigning the first name anyway ? 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. Thoughts? Also inviting @pcanal and @jblomer to comment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:897,usability,simpl,simple,897,"Hi @bernhardmgruber , thank you for reporting this! I understand the problem, we need to make sure we give a meaningful name to the RNTuple. Regarding your specific example above, I have a doubt about the design. Since the input is a `TChain` with no name, there is no evident unique name to give to the imported RNTuple. If the `TChain` had a name then that would be the correct name to assign. But in this case, we could:. 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. 2. Check that all trees of the chain have the same name (the first one), and assign that. If this is not the case, fallback to assigning the first name anyway ? 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. Thoughts? Also inviting @pcanal and @jblomer to comment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:55,reliability,doe,does,55,"Hello! I think in the case where the provided `TChain` does not have a name, picking the name of the first tree in the chain would be a sensible choice (provided this is well-documented, of course). In any case, if a different name is desired, one can always call `RNTupleImporter::SetNTupleName` to change the name of the target `RNTuple`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:175,usability,document,documented,175,"Hello! I think in the case where the provided `TChain` does not have a name, picking the name of the first tree in the chain would be a sensible choice (provided this is well-documented, of course). In any case, if a different name is desired, one can always call `RNTupleImporter::SetNTupleName` to change the name of the target `RNTuple`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:1022,deployability,observ,observed,1022,"> If the `TChain` had a name then that would be the correct name to assign. Yes. (I didn't know `TChain`'s could have a name. I thought they were conceptually just concatenations of trees). > 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. That sounds too deliberate to me. > 2. Check that all trees of the chain have the same name (the first one), and assign that. I think this would be the only sensible solution. But I don't kow how big `TChain`s can get and whether such a check would become expensive at some point. > If this is not the case, fallback to assigning the first name anyway ? Again, I think this is too deliberate. > 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. That is the the status quo, as observed by me. The name picked is `ROOT::Experimental::RNTuple`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:951,safety,compl,complicated,951,"> If the `TChain` had a name then that would be the correct name to assign. Yes. (I didn't know `TChain`'s could have a name. I thought they were conceptually just concatenations of trees). > 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. That sounds too deliberate to me. > 2. Check that all trees of the chain have the same name (the first one), and assign that. I think this would be the only sensible solution. But I don't kow how big `TChain`s can get and whether such a check would become expensive at some point. > If this is not the case, fallback to assigning the first name anyway ? Again, I think this is too deliberate. > 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. That is the the status quo, as observed by me. The name picked is `ROOT::Experimental::RNTuple`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:951,security,compl,complicated,951,"> If the `TChain` had a name then that would be the correct name to assign. Yes. (I didn't know `TChain`'s could have a name. I thought they were conceptually just concatenations of trees). > 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. That sounds too deliberate to me. > 2. Check that all trees of the chain have the same name (the first one), and assign that. I think this would be the only sensible solution. But I don't kow how big `TChain`s can get and whether such a check would become expensive at some point. > If this is not the case, fallback to assigning the first name anyway ? Again, I think this is too deliberate. > 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. That is the the status quo, as observed by me. The name picked is `ROOT::Experimental::RNTuple`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:898,testability,simpl,simple,898,"> If the `TChain` had a name then that would be the correct name to assign. Yes. (I didn't know `TChain`'s could have a name. I thought they were conceptually just concatenations of trees). > 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. That sounds too deliberate to me. > 2. Check that all trees of the chain have the same name (the first one), and assign that. I think this would be the only sensible solution. But I don't kow how big `TChain`s can get and whether such a check would become expensive at some point. > If this is not the case, fallback to assigning the first name anyway ? Again, I think this is too deliberate. > 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. That is the the status quo, as observed by me. The name picked is `ROOT::Experimental::RNTuple`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:1022,testability,observ,observed,1022,"> If the `TChain` had a name then that would be the correct name to assign. Yes. (I didn't know `TChain`'s could have a name. I thought they were conceptually just concatenations of trees). > 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. That sounds too deliberate to me. > 2. Check that all trees of the chain have the same name (the first one), and assign that. I think this would be the only sensible solution. But I don't kow how big `TChain`s can get and whether such a check would become expensive at some point. > If this is not the case, fallback to assigning the first name anyway ? Again, I think this is too deliberate. > 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. That is the the status quo, as observed by me. The name picked is `ROOT::Experimental::RNTuple`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:815,usability,user,user,815,"> If the `TChain` had a name then that would be the correct name to assign. Yes. (I didn't know `TChain`'s could have a name. I thought they were conceptually just concatenations of trees). > 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. That sounds too deliberate to me. > 2. Check that all trees of the chain have the same name (the first one), and assign that. I think this would be the only sensible solution. But I don't kow how big `TChain`s can get and whether such a check would become expensive at some point. > If this is not the case, fallback to assigning the first name anyway ? Again, I think this is too deliberate. > 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. That is the the status quo, as observed by me. The name picked is `ROOT::Experimental::RNTuple`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:898,usability,simpl,simple,898,"> If the `TChain` had a name then that would be the correct name to assign. Yes. (I didn't know `TChain`'s could have a name. I thought they were conceptually just concatenations of trees). > 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. That sounds too deliberate to me. > 2. Check that all trees of the chain have the same name (the first one), and assign that. I think this would be the only sensible solution. But I don't kow how big `TChain`s can get and whether such a check would become expensive at some point. > If this is not the case, fallback to assigning the first name anyway ? Again, I think this is too deliberate. > 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. That is the the status quo, as observed by me. The name picked is `ROOT::Experimental::RNTuple`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:1007,usability,statu,status,1007,"> If the `TChain` had a name then that would be the correct name to assign. Yes. (I didn't know `TChain`'s could have a name. I thought they were conceptually just concatenations of trees). > 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. That sounds too deliberate to me. > 2. Check that all trees of the chain have the same name (the first one), and assign that. I think this would be the only sensible solution. But I don't kow how big `TChain`s can get and whether such a check would become expensive at some point. > If this is not the case, fallback to assigning the first name anyway ? Again, I think this is too deliberate. > 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. That is the the status quo, as observed by me. The name picked is `ROOT::Experimental::RNTuple`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:443,energy efficiency,current,currently,443,"> But I don't kow how big TChains can get and whether such a check would become expensive at some point. Yes, sorry I should have given a bit more context. A `TChain` could also have O(10^3) files, in extreme cases O(10^4). . Personally, I agree with @enirolf as I still think getting the first name is not that bad of an idea. It's surely not super elegant, but I believe it is at least better than giving it an arbitrary name like it's done currently. Maybe a compromise could be:. 1. Check how many files the `TChain` has. 2. If it's less than `THRESHOLD`, then run the check that all files have the same tree name. The `THRESHOLD` number should probably be decided after a few performance benchmarks. If the files don't have all the same tree, I still think we should give the first tree name (and maybe issue a warning that we're doing so). 3. If it's more, just take the first tree name (with a warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:681,performance,perform,performance,681,"> But I don't kow how big TChains can get and whether such a check would become expensive at some point. Yes, sorry I should have given a bit more context. A `TChain` could also have O(10^3) files, in extreme cases O(10^4). . Personally, I agree with @enirolf as I still think getting the first name is not that bad of an idea. It's surely not super elegant, but I believe it is at least better than giving it an arbitrary name like it's done currently. Maybe a compromise could be:. 1. Check how many files the `TChain` has. 2. If it's less than `THRESHOLD`, then run the check that all files have the same tree name. The `THRESHOLD` number should probably be decided after a few performance benchmarks. If the files don't have all the same tree, I still think we should give the first tree name (and maybe issue a warning that we're doing so). 3. If it's more, just take the first tree name (with a warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:147,testability,context,context,147,"> But I don't kow how big TChains can get and whether such a check would become expensive at some point. Yes, sorry I should have given a bit more context. A `TChain` could also have O(10^3) files, in extreme cases O(10^4). . Personally, I agree with @enirolf as I still think getting the first name is not that bad of an idea. It's surely not super elegant, but I believe it is at least better than giving it an arbitrary name like it's done currently. Maybe a compromise could be:. 1. Check how many files the `TChain` has. 2. If it's less than `THRESHOLD`, then run the check that all files have the same tree name. The `THRESHOLD` number should probably be decided after a few performance benchmarks. If the files don't have all the same tree, I still think we should give the first tree name (and maybe issue a warning that we're doing so). 3. If it's more, just take the first tree name (with a warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:226,usability,Person,Personally,226,"> But I don't kow how big TChains can get and whether such a check would become expensive at some point. Yes, sorry I should have given a bit more context. A `TChain` could also have O(10^3) files, in extreme cases O(10^4). . Personally, I agree with @enirolf as I still think getting the first name is not that bad of an idea. It's surely not super elegant, but I believe it is at least better than giving it an arbitrary name like it's done currently. Maybe a compromise could be:. 1. Check how many files the `TChain` has. 2. If it's less than `THRESHOLD`, then run the check that all files have the same tree name. The `THRESHOLD` number should probably be decided after a few performance benchmarks. If the files don't have all the same tree, I still think we should give the first tree name (and maybe issue a warning that we're doing so). 3. If it's more, just take the first tree name (with a warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:681,usability,perform,performance,681,"> But I don't kow how big TChains can get and whether such a check would become expensive at some point. Yes, sorry I should have given a bit more context. A `TChain` could also have O(10^3) files, in extreme cases O(10^4). . Personally, I agree with @enirolf as I still think getting the first name is not that bad of an idea. It's surely not super elegant, but I believe it is at least better than giving it an arbitrary name like it's done currently. Maybe a compromise could be:. 1. Check how many files the `TChain` has. 2. If it's less than `THRESHOLD`, then run the check that all files have the same tree name. The `THRESHOLD` number should probably be decided after a few performance benchmarks. If the files don't have all the same tree, I still think we should give the first tree name (and maybe issue a warning that we're doing so). 3. If it's more, just take the first tree name (with a warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:146,usability,user,users,146,"Alright, than maybe really just take the first tree's name. The algorithm for chosing a name involving a threshold may also be surprising to some users. Imagine relying on the `TChan` picking the first tree's name and then adding a bunch of more files and suddenly the name changes :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:876,availability,sli,slides,876,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:592,deployability,depend,depending,592,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:592,integrability,depend,depending,592,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:592,modifiability,depend,depending,592,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:876,reliability,sli,slides,876,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:484,safety,except,exception,484,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:592,safety,depend,depending,592,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:30,security,sign,signature,30,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:592,testability,depend,depending,592,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:102,usability,user,user,102,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:169,usability,behavi,behavior,169,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:200,usability,behavi,behavior,200,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:221,usability,user,user,221,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:343,usability,user,user,343,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:546,usability,behavi,behavior,546,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:577,usability,prefer,prefer,577,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that. or. * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:4,safety,compl,completeness,4,"For completeness, `RNTupleImporter` already allows to supply a tree name:. ```c++. auto imp = ROOT::Experimental::RNTupleImporter::Create(&chain, ""B2HHH~zstd~10x.ntuple"");. imp->SetNTupleName(“DecayTree”);. imp->Import();. ```. My issue is just about an improvement of user experience.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:4,security,compl,completeness,4,"For completeness, `RNTupleImporter` already allows to supply a tree name:. ```c++. auto imp = ROOT::Experimental::RNTupleImporter::Create(&chain, ""B2HHH~zstd~10x.ntuple"");. imp->SetNTupleName(“DecayTree”);. imp->Import();. ```. My issue is just about an improvement of user experience.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:269,usability,user,user,269,"For completeness, `RNTupleImporter` already allows to supply a tree name:. ```c++. auto imp = ROOT::Experimental::RNTupleImporter::Create(&chain, ""B2HHH~zstd~10x.ntuple"");. imp->SetNTupleName(“DecayTree”);. imp->Import();. ```. My issue is just about an improvement of user experience.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/issues/13088:274,usability,experien,experience,274,"For completeness, `RNTupleImporter` already allows to supply a tree name:. ```c++. auto imp = ROOT::Experimental::RNTupleImporter::Create(&chain, ""B2HHH~zstd~10x.ntuple"");. imp->SetNTupleName(“DecayTree”);. imp->Import();. ```. My issue is just about an improvement of user experience.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13088
https://github.com/root-project/root/pull/13090:214,reliability,doe,doesn,214,"There are at least two things preventing this approach from working:. 1. Opening the file for recognition of the data source type assumes that the input string `fileNameGlob` is actually a file name (`TFile::Open` doesn't accept globs, rightfully). 2. It introduces a broken interaction with `Snapshot` at https://github.com/root-project/root/blob/e70af8243c601b6b32b515d90c1f16500745d904/tree/dataframe/inc/ROOT/RDF/RInterface.hxx#L2837-L2838 . Since `Snapshot` creates a new `RDataFrame` invoking the constructor with two strings *before* the `Snapshot` actually happens, the file will always not exist. This alone is practically a blocker for this approach",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:620,reliability,pra,practically,620,"There are at least two things preventing this approach from working:. 1. Opening the file for recognition of the data source type assumes that the input string `fileNameGlob` is actually a file name (`TFile::Open` doesn't accept globs, rightfully). 2. It introduces a broken interaction with `Snapshot` at https://github.com/root-project/root/blob/e70af8243c601b6b32b515d90c1f16500745d904/tree/dataframe/inc/ROOT/RDF/RInterface.hxx#L2837-L2838 . Since `Snapshot` creates a new `RDataFrame` invoking the constructor with two strings *before* the `Snapshot` actually happens, the file will always not exist. This alone is practically a blocker for this approach",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:30,safety,prevent,preventing,30,"There are at least two things preventing this approach from working:. 1. Opening the file for recognition of the data source type assumes that the input string `fileNameGlob` is actually a file name (`TFile::Open` doesn't accept globs, rightfully). 2. It introduces a broken interaction with `Snapshot` at https://github.com/root-project/root/blob/e70af8243c601b6b32b515d90c1f16500745d904/tree/dataframe/inc/ROOT/RDF/RInterface.hxx#L2837-L2838 . Since `Snapshot` creates a new `RDataFrame` invoking the constructor with two strings *before* the `Snapshot` actually happens, the file will always not exist. This alone is practically a blocker for this approach",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:147,safety,input,input,147,"There are at least two things preventing this approach from working:. 1. Opening the file for recognition of the data source type assumes that the input string `fileNameGlob` is actually a file name (`TFile::Open` doesn't accept globs, rightfully). 2. It introduces a broken interaction with `Snapshot` at https://github.com/root-project/root/blob/e70af8243c601b6b32b515d90c1f16500745d904/tree/dataframe/inc/ROOT/RDF/RInterface.hxx#L2837-L2838 . Since `Snapshot` creates a new `RDataFrame` invoking the constructor with two strings *before* the `Snapshot` actually happens, the file will always not exist. This alone is practically a blocker for this approach",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:30,security,preven,preventing,30,"There are at least two things preventing this approach from working:. 1. Opening the file for recognition of the data source type assumes that the input string `fileNameGlob` is actually a file name (`TFile::Open` doesn't accept globs, rightfully). 2. It introduces a broken interaction with `Snapshot` at https://github.com/root-project/root/blob/e70af8243c601b6b32b515d90c1f16500745d904/tree/dataframe/inc/ROOT/RDF/RInterface.hxx#L2837-L2838 . Since `Snapshot` creates a new `RDataFrame` invoking the constructor with two strings *before* the `Snapshot` actually happens, the file will always not exist. This alone is practically a blocker for this approach",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:147,usability,input,input,147,"There are at least two things preventing this approach from working:. 1. Opening the file for recognition of the data source type assumes that the input string `fileNameGlob` is actually a file name (`TFile::Open` doesn't accept globs, rightfully). 2. It introduces a broken interaction with `Snapshot` at https://github.com/root-project/root/blob/e70af8243c601b6b32b515d90c1f16500745d904/tree/dataframe/inc/ROOT/RDF/RInterface.hxx#L2837-L2838 . Since `Snapshot` creates a new `RDataFrame` invoking the constructor with two strings *before* the `Snapshot` actually happens, the file will always not exist. This alone is practically a blocker for this approach",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:275,usability,interact,interaction,275,"There are at least two things preventing this approach from working:. 1. Opening the file for recognition of the data source type assumes that the input string `fileNameGlob` is actually a file name (`TFile::Open` doesn't accept globs, rightfully). 2. It introduces a broken interaction with `Snapshot` at https://github.com/root-project/root/blob/e70af8243c601b6b32b515d90c1f16500745d904/tree/dataframe/inc/ROOT/RDF/RInterface.hxx#L2837-L2838 . Since `Snapshot` creates a new `RDataFrame` invoking the constructor with two strings *before* the `Snapshot` actually happens, the file will always not exist. This alone is practically a blocker for this approach",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:825,integrability,event,event,825,"My 2 cents:. 1. You have to expand the glob to an actual list of files and grab e.g. the first file in the list. One (not elegant) way to do it is to go through `TChain::Add`. Just performing the glob expansion with TChain does not require that there are TTrees in the file:. ```. /tmp touch foo.root. /tmp touch bar.root. /tmp root -l. root [0] TChain c;. root [1] c.Add(""*.root""). (int) 2. root [2] c.GetListOfFiles()->GetEntries(). (int) 2. root [3] c.GetListOfFiles()->At(0)->GetName(). (const char *) """". root [4] c.GetListOfFiles()->At(0)->GetTitle(). (const char *) ""/tmp/bar.root"". root [5] c.GetListOfFiles()->At(1)->GetTitle(). (const char *) ""/tmp/foo.root"". ```. 2. The quick fix is to assume TTree if the file does not exist. The better fix is probably to delay the decision to right before the beginning of the event loop.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:181,performance,perform,performing,181,"My 2 cents:. 1. You have to expand the glob to an actual list of files and grab e.g. the first file in the list. One (not elegant) way to do it is to go through `TChain::Add`. Just performing the glob expansion with TChain does not require that there are TTrees in the file:. ```. /tmp touch foo.root. /tmp touch bar.root. /tmp root -l. root [0] TChain c;. root [1] c.Add(""*.root""). (int) 2. root [2] c.GetListOfFiles()->GetEntries(). (int) 2. root [3] c.GetListOfFiles()->At(0)->GetName(). (const char *) """". root [4] c.GetListOfFiles()->At(0)->GetTitle(). (const char *) ""/tmp/bar.root"". root [5] c.GetListOfFiles()->At(1)->GetTitle(). (const char *) ""/tmp/foo.root"". ```. 2. The quick fix is to assume TTree if the file does not exist. The better fix is probably to delay the decision to right before the beginning of the event loop.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:223,reliability,doe,does,223,"My 2 cents:. 1. You have to expand the glob to an actual list of files and grab e.g. the first file in the list. One (not elegant) way to do it is to go through `TChain::Add`. Just performing the glob expansion with TChain does not require that there are TTrees in the file:. ```. /tmp touch foo.root. /tmp touch bar.root. /tmp root -l. root [0] TChain c;. root [1] c.Add(""*.root""). (int) 2. root [2] c.GetListOfFiles()->GetEntries(). (int) 2. root [3] c.GetListOfFiles()->At(0)->GetName(). (const char *) """". root [4] c.GetListOfFiles()->At(0)->GetTitle(). (const char *) ""/tmp/bar.root"". root [5] c.GetListOfFiles()->At(1)->GetTitle(). (const char *) ""/tmp/foo.root"". ```. 2. The quick fix is to assume TTree if the file does not exist. The better fix is probably to delay the decision to right before the beginning of the event loop.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:723,reliability,doe,does,723,"My 2 cents:. 1. You have to expand the glob to an actual list of files and grab e.g. the first file in the list. One (not elegant) way to do it is to go through `TChain::Add`. Just performing the glob expansion with TChain does not require that there are TTrees in the file:. ```. /tmp touch foo.root. /tmp touch bar.root. /tmp root -l. root [0] TChain c;. root [1] c.Add(""*.root""). (int) 2. root [2] c.GetListOfFiles()->GetEntries(). (int) 2. root [3] c.GetListOfFiles()->At(0)->GetName(). (const char *) """". root [4] c.GetListOfFiles()->At(0)->GetTitle(). (const char *) ""/tmp/bar.root"". root [5] c.GetListOfFiles()->At(1)->GetTitle(). (const char *) ""/tmp/foo.root"". ```. 2. The quick fix is to assume TTree if the file does not exist. The better fix is probably to delay the decision to right before the beginning of the event loop.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:181,usability,perform,performing,181,"My 2 cents:. 1. You have to expand the glob to an actual list of files and grab e.g. the first file in the list. One (not elegant) way to do it is to go through `TChain::Add`. Just performing the glob expansion with TChain does not require that there are TTrees in the file:. ```. /tmp touch foo.root. /tmp touch bar.root. /tmp root -l. root [0] TChain c;. root [1] c.Add(""*.root""). (int) 2. root [2] c.GetListOfFiles()->GetEntries(). (int) 2. root [3] c.GetListOfFiles()->At(0)->GetName(). (const char *) """". root [4] c.GetListOfFiles()->At(0)->GetTitle(). (const char *) ""/tmp/bar.root"". root [5] c.GetListOfFiles()->At(1)->GetTitle(). (const char *) ""/tmp/foo.root"". ```. 2. The quick fix is to assume TTree if the file does not exist. The better fix is probably to delay the decision to right before the beginning of the event loop.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:132,deployability,log,logic,132,"> You have to expand the glob to an actual list of files. Yes, I agree. This highlights a concrete use case for moving the globbing logic of `TChain` out of class. *It shouldn't be hard to do*:tm:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:132,safety,log,logic,132,"> You have to expand the glob to an actual list of files. Yes, I agree. This highlights a concrete use case for moving the globbing logic of `TChain` out of class. *It shouldn't be hard to do*:tm:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:132,security,log,logic,132,"> You have to expand the glob to an actual list of files. Yes, I agree. This highlights a concrete use case for moving the globbing logic of `TChain` out of class. *It shouldn't be hard to do*:tm:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:132,testability,log,logic,132,"> You have to expand the glob to an actual list of files. Yes, I agree. This highlights a concrete use case for moving the globbing logic of `TChain` out of class. *It shouldn't be hard to do*:tm:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:12,deployability,fail,failing,12,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:4,energy efficiency,current,current,4,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:417,energy efficiency,current,current,417,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:142,interoperability,format,format,142,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:174,interoperability,incompatib,incompatible,174,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:340,interoperability,bind,bindings,340,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:340,modifiability,bind,bindings,340,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:12,reliability,fail,failing,12,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:20,safety,test,tests,20,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:370,safety,test,test,370,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:398,safety,test,test,398,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:20,testability,test,tests,20,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:370,testability,test,test,370,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:398,testability,test,test,398,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:474,usability,user,users,474,"The current failing tests demonstrate possibly the only real blocker for this PR. The constructor now always opens the file to check the data format, and this is a backwards-incompatible change. Not a terrible one per se, but for example [test_headnode.py](https://github.com/root-project/root/blob/855f1790ab9a37637d7ddcc963b43247972f1d6e/bindings/experimental/distrdf/test/test_headnode.py#L153) test relies on the current constructor not opening the file argument. Maybe users in the wild could have a similar pattern, although this type of ""exploit"" may be also labeled as ""unwanted/unsupported"". I think we need some concrete opinions from @eguiraud , @jblomer , @Axel-Naumann , @pcanal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:316,availability,error,error,316,"As per the discussion with Vincenzo, we think we can provide the desired functionality without exposing `RSnapshotOptions::fOutputFormat` to users (until we can actually provide an output format other than TTree) and without breaking backwards-compatibility. P.S. we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to) -- but the discussion does not have to be entangled with this PR and feature implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:188,interoperability,format,format,188,"As per the discussion with Vincenzo, we think we can provide the desired functionality without exposing `RSnapshotOptions::fOutputFormat` to users (until we can actually provide an output format other than TTree) and without breaking backwards-compatibility. P.S. we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to) -- but the discussion does not have to be entangled with this PR and feature implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:244,interoperability,compatib,compatibility,244,"As per the discussion with Vincenzo, we think we can provide the desired functionality without exposing `RSnapshotOptions::fOutputFormat` to users (until we can actually provide an output format other than TTree) and without breaking backwards-compatibility. P.S. we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to) -- but the discussion does not have to be entangled with this PR and feature implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:316,performance,error,error,316,"As per the discussion with Vincenzo, we think we can provide the desired functionality without exposing `RSnapshotOptions::fOutputFormat` to users (until we can actually provide an output format other than TTree) and without breaking backwards-compatibility. P.S. we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to) -- but the discussion does not have to be entangled with this PR and feature implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:342,performance,time,time,342,"As per the discussion with Vincenzo, we think we can provide the desired functionality without exposing `RSnapshotOptions::fOutputFormat` to users (until we can actually provide an output format other than TTree) and without breaking backwards-compatibility. P.S. we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to) -- but the discussion does not have to be entangled with this PR and feature implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:364,reliability,doe,does,364,"As per the discussion with Vincenzo, we think we can provide the desired functionality without exposing `RSnapshotOptions::fOutputFormat` to users (until we can actually provide an output format other than TTree) and without breaking backwards-compatibility. P.S. we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to) -- but the discussion does not have to be entangled with this PR and feature implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:428,reliability,doe,does,428,"As per the discussion with Vincenzo, we think we can provide the desired functionality without exposing `RSnapshotOptions::fOutputFormat` to users (until we can actually provide an output format other than TTree) and without breaking backwards-compatibility. P.S. we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to) -- but the discussion does not have to be entangled with this PR and feature implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:316,safety,error,error,316,"As per the discussion with Vincenzo, we think we can provide the desired functionality without exposing `RSnapshotOptions::fOutputFormat` to users (until we can actually provide an output format other than TTree) and without breaking backwards-compatibility. P.S. we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to) -- but the discussion does not have to be entangled with this PR and feature implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:353,safety,input,input,353,"As per the discussion with Vincenzo, we think we can provide the desired functionality without exposing `RSnapshotOptions::fOutputFormat` to users (until we can actually provide an output format other than TTree) and without breaking backwards-compatibility. P.S. we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to) -- but the discussion does not have to be entangled with this PR and feature implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:95,security,expos,exposing,95,"As per the discussion with Vincenzo, we think we can provide the desired functionality without exposing `RSnapshotOptions::fOutputFormat` to users (until we can actually provide an output format other than TTree) and without breaking backwards-compatibility. P.S. we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to) -- but the discussion does not have to be entangled with this PR and feature implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:141,usability,user,users,141,"As per the discussion with Vincenzo, we think we can provide the desired functionality without exposing `RSnapshotOptions::fOutputFormat` to users (until we can actually provide an output format other than TTree) and without breaking backwards-compatibility. P.S. we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to) -- but the discussion does not have to be entangled with this PR and feature implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:316,usability,error,error,316,"As per the discussion with Vincenzo, we think we can provide the desired functionality without exposing `RSnapshotOptions::fOutputFormat` to users (until we can actually provide an output format other than TTree) and without breaking backwards-compatibility. P.S. we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to) -- but the discussion does not have to be entangled with this PR and feature implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:353,usability,input,input,353,"As per the discussion with Vincenzo, we think we can provide the desired functionality without exposing `RSnapshotOptions::fOutputFormat` to users (until we can actually provide an output format other than TTree) and without breaking backwards-compatibility. P.S. we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to) -- but the discussion does not have to be entangled with this PR and feature implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:54,availability,error,error,54,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:257,availability,error,erroring,257,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:54,performance,error,error,54,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:80,performance,time,time,80,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:175,performance,I/O,I/O,175,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:257,performance,error,erroring,257,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:286,performance,time,time,286,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:102,reliability,doe,does,102,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:303,reliability,doe,does,303,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:54,safety,error,error,54,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:91,safety,input,input,91,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:257,safety,error,erroring,257,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:54,usability,error,error,54,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:91,usability,input,input,91,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:243,usability,behavi,behaviour,243,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:257,usability,error,erroring,257,"> we can always discuss separately whether we want to error out at construction time if an input file does not exist (I think we might want to). I discussed about this at the I/O meeting last week, other comments were in favor of changing the behaviour and erroring out at construction time if the file does not exist. I think I will still move that part to another PR so that we can better discuss it there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:43,availability,error,error,43,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:72,availability,Error,Error,72,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:331,availability,state,state,331,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:461,availability,error,error,461,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:369,deployability,updat,update,369,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:108,energy efficiency,current,current,108,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:331,integrability,state,state,331,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:43,performance,error,error,43,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:72,performance,Error,Error,72,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:461,performance,error,error,461,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:43,safety,error,error,43,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:60,safety,test,tests,60,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:72,safety,Error,Error,72,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:369,safety,updat,update,369,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:461,safety,error,error,461,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:369,security,updat,update,369,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:60,testability,test,tests,60,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:43,usability,error,error,43,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:72,usability,Error,Error,72,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:461,usability,error,error,461,The new CI is able to trigger this kind of error in distrdf tests. ```. Error in <TROOT::WriteTObject>: The current directory (PyROOT) is not associated with a file. The object (x) has not been written. ```. Which (hopefully) stems from the fact we open the file in the RDF constructor without a `TDirectory::TContext` to save the state of the previous directory. I'll update the code to use TContext. The real problem is that Jenkins is unable to trigger this error....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:13,availability,error,error,13,What is this error in readTotemNtuple? :eyes:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:13,performance,error,error,13,What is this error in readTotemNtuple? :eyes:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:13,safety,error,error,13,What is this error in readTotemNtuple? :eyes:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:13,usability,error,error,13,What is this error in readTotemNtuple? :eyes:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:15,availability,error,error,15,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:80,deployability,contain,contains,80,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:717,energy efficiency,load,loaded,717,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:15,performance,error,error,15,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:717,performance,load,loaded,717,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:537,reliability,doe,doesn,537,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:15,safety,error,error,15,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:148,safety,compl,complaints,148,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:176,safety,test,test,176,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:494,safety,test,test,494,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:148,security,compl,complaints,148,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:176,testability,test,test,176,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:494,testability,test,test,494,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:15,usability,error,error,15,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:152,deployability,build,build,152,"Ah I didn't realize there was a sibling PR to roottest that changed the reference, thanks. I don't know why jenkins behaves differently from your local build, but taking a step back, why are you silencing these warnings?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:196,availability,error,errors,196,"> why are you silencing these warnings? This is to implement the changes in the way we discussed. We keep backwards compatibility for this PR, i.e. we don't throw an exception and we delegate the errors regarding non-existing files to the first time a branch is accessed, like it is currently done in RDF. The actual improvement, i.e. early error out, is left for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:341,availability,error,error,341,"> why are you silencing these warnings? This is to implement the changes in the way we discussed. We keep backwards compatibility for this PR, i.e. we don't throw an exception and we delegate the errors regarding non-existing files to the first time a branch is accessed, like it is currently done in RDF. The actual improvement, i.e. early error out, is left for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:283,energy efficiency,current,currently,283,"> why are you silencing these warnings? This is to implement the changes in the way we discussed. We keep backwards compatibility for this PR, i.e. we don't throw an exception and we delegate the errors regarding non-existing files to the first time a branch is accessed, like it is currently done in RDF. The actual improvement, i.e. early error out, is left for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:116,interoperability,compatib,compatibility,116,"> why are you silencing these warnings? This is to implement the changes in the way we discussed. We keep backwards compatibility for this PR, i.e. we don't throw an exception and we delegate the errors regarding non-existing files to the first time a branch is accessed, like it is currently done in RDF. The actual improvement, i.e. early error out, is left for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:196,performance,error,errors,196,"> why are you silencing these warnings? This is to implement the changes in the way we discussed. We keep backwards compatibility for this PR, i.e. we don't throw an exception and we delegate the errors regarding non-existing files to the first time a branch is accessed, like it is currently done in RDF. The actual improvement, i.e. early error out, is left for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:245,performance,time,time,245,"> why are you silencing these warnings? This is to implement the changes in the way we discussed. We keep backwards compatibility for this PR, i.e. we don't throw an exception and we delegate the errors regarding non-existing files to the first time a branch is accessed, like it is currently done in RDF. The actual improvement, i.e. early error out, is left for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:341,performance,error,error,341,"> why are you silencing these warnings? This is to implement the changes in the way we discussed. We keep backwards compatibility for this PR, i.e. we don't throw an exception and we delegate the errors regarding non-existing files to the first time a branch is accessed, like it is currently done in RDF. The actual improvement, i.e. early error out, is left for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:166,safety,except,exception,166,"> why are you silencing these warnings? This is to implement the changes in the way we discussed. We keep backwards compatibility for this PR, i.e. we don't throw an exception and we delegate the errors regarding non-existing files to the first time a branch is accessed, like it is currently done in RDF. The actual improvement, i.e. early error out, is left for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:196,safety,error,errors,196,"> why are you silencing these warnings? This is to implement the changes in the way we discussed. We keep backwards compatibility for this PR, i.e. we don't throw an exception and we delegate the errors regarding non-existing files to the first time a branch is accessed, like it is currently done in RDF. The actual improvement, i.e. early error out, is left for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:341,safety,error,error,341,"> why are you silencing these warnings? This is to implement the changes in the way we discussed. We keep backwards compatibility for this PR, i.e. we don't throw an exception and we delegate the errors regarding non-existing files to the first time a branch is accessed, like it is currently done in RDF. The actual improvement, i.e. early error out, is left for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:262,security,access,accessed,262,"> why are you silencing these warnings? This is to implement the changes in the way we discussed. We keep backwards compatibility for this PR, i.e. we don't throw an exception and we delegate the errors regarding non-existing files to the first time a branch is accessed, like it is currently done in RDF. The actual improvement, i.e. early error out, is left for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:196,usability,error,errors,196,"> why are you silencing these warnings? This is to implement the changes in the way we discussed. We keep backwards compatibility for this PR, i.e. we don't throw an exception and we delegate the errors regarding non-existing files to the first time a branch is accessed, like it is currently done in RDF. The actual improvement, i.e. early error out, is left for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:341,usability,error,error,341,"> why are you silencing these warnings? This is to implement the changes in the way we discussed. We keep backwards compatibility for this PR, i.e. we don't throw an exception and we delegate the errors regarding non-existing files to the first time a branch is accessed, like it is currently done in RDF. The actual improvement, i.e. early error out, is left for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:41,interoperability,compatib,compatibility,41,I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:8,testability,understand,understand,8,I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:234,availability,operat,operation,234,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:696,availability,Error,Error,696,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:733,availability,state,statements,733,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:607,energy efficiency,current,currently,607,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:210,integrability,Filter,Filter,210,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:733,integrability,state,statements,733,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:43,interoperability,compatib,compatibility,43,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:388,interoperability,compatib,compatibility,388,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:308,performance,time,time,308,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:355,performance,time,time,355,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:696,performance,Error,Error,696,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1298,performance,time,time,1298,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1464,performance,time,time,1464,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:656,safety,except,exception,656,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:696,safety,Error,Error,696,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:885,safety,test,test,885,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1261,safety,except,exception,1261,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1379,safety,test,test,1379,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:254,security,access,access,254,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1337,security,modif,modify,1337,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:10,testability,understand,understand,10,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:885,testability,test,test,885,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1379,testability,test,test,1379,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:505,usability,user,user,505,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:696,usability,Error,Error,696,"> I don't understand why to keep backwards compatibility we need to silence warnings that were previously not silenced..? The warning is raised at the first `TFile::Open`. Previously, that happened whenever a `Filter`,`Define` or any operation needed to access a branch of the TTree, i.e. after construction time. With this PR, it happens at construction time. In order to keep backwards compatibility, we discussed that the call to `TFile::Open`, at least for the purposes of this PR, should not let the user know that their file cannot be opened (yet), and that it is deferred to the first `Define` as it currently happens. Thus, we both do not raise an exception and we also have to hide the `Error: TFile cannot be opened` print statements to std::err that `TFile::Open` will trigger. So that's why I used the `RIgnoreErrorLevelRAII`. The fact that the warnings of the `readTotem` test are also silenced is merely a side-effect of having to implement the function in the way we discussed. At this point though, I am quite convinced that this is bringing more confusion than anything else, especially for a temporary quirk that I would have corrected in the next PR anyway. So I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. . Note that I will still need to modify the `.ref` file of the `readTotem` test because the warnings about the missing dictionaries will happen at construction time rather than during the first `Foreach` call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:138,performance,time,time,138,"Ah I see, thanks. > I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. sounds good",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:101,safety,except,exception,101,"Ah I see, thanks. > I think I will just go with the final solution that we decided, i.e. throwing an exception right away at construction time. sounds good",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:32,deployability,depend,depends,32,The `.ref` file in roottest now depends on the presence of `root7`... I'll see how to inject this knowledge in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:32,integrability,depend,depends,32,The `.ref` file in roottest now depends on the presence of `root7`... I'll see how to inject this knowledge in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:86,integrability,inject,inject,86,The `.ref` file in roottest now depends on the presence of `root7`... I'll see how to inject this knowledge in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:32,modifiability,depend,depends,32,The `.ref` file in roottest now depends on the presence of `root7`... I'll see how to inject this knowledge in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:32,safety,depend,depends,32,The `.ref` file in roottest now depends on the presence of `root7`... I'll see how to inject this knowledge in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:86,security,inject,inject,86,The `.ref` file in roottest now depends on the presence of `root7`... I'll see how to inject this knowledge in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:32,testability,depend,depends,32,The `.ref` file in roottest now depends on the presence of `root7`... I'll see how to inject this knowledge in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:4,deployability,build,builds,4,"All builds are green now, this is ready for another review @jblomer , @eguiraud",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:15,energy efficiency,green,green,15,"All builds are green now, this is ready for another review @jblomer , @eguiraud",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:52,safety,review,review,52,"All builds are green now, this is ready for another review @jblomer , @eguiraud",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:52,testability,review,review,52,"All builds are green now, this is ready for another review @jblomer , @eguiraud",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:135,integrability,wrap,wrapper,135,"As a drive-by comment, just to throw out the idea: Instead of opening the file at construction time, we could invent an ""indeterminate wrapper datasource"" that opens the file only once needed and then decides to internally create a datasource for either TTree or RNTuple, forwarding future calls through one layer of indirection. As far as I can tell (without having implemented it), this should solve the problem of dealing with partially constructed `RDataFrame`s and not require a backwards-incompatible change in behavior. The cost would be one additional indirection, but this may be just fine given that `RDataSource` is already a `virtual` interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:647,integrability,interfac,interface,647,"As a drive-by comment, just to throw out the idea: Instead of opening the file at construction time, we could invent an ""indeterminate wrapper datasource"" that opens the file only once needed and then decides to internally create a datasource for either TTree or RNTuple, forwarding future calls through one layer of indirection. As far as I can tell (without having implemented it), this should solve the problem of dealing with partially constructed `RDataFrame`s and not require a backwards-incompatible change in behavior. The cost would be one additional indirection, but this may be just fine given that `RDataSource` is already a `virtual` interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:135,interoperability,wrapper,wrapper,135,"As a drive-by comment, just to throw out the idea: Instead of opening the file at construction time, we could invent an ""indeterminate wrapper datasource"" that opens the file only once needed and then decides to internally create a datasource for either TTree or RNTuple, forwarding future calls through one layer of indirection. As far as I can tell (without having implemented it), this should solve the problem of dealing with partially constructed `RDataFrame`s and not require a backwards-incompatible change in behavior. The cost would be one additional indirection, but this may be just fine given that `RDataSource` is already a `virtual` interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:494,interoperability,incompatib,incompatible,494,"As a drive-by comment, just to throw out the idea: Instead of opening the file at construction time, we could invent an ""indeterminate wrapper datasource"" that opens the file only once needed and then decides to internally create a datasource for either TTree or RNTuple, forwarding future calls through one layer of indirection. As far as I can tell (without having implemented it), this should solve the problem of dealing with partially constructed `RDataFrame`s and not require a backwards-incompatible change in behavior. The cost would be one additional indirection, but this may be just fine given that `RDataSource` is already a `virtual` interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:647,interoperability,interfac,interface,647,"As a drive-by comment, just to throw out the idea: Instead of opening the file at construction time, we could invent an ""indeterminate wrapper datasource"" that opens the file only once needed and then decides to internally create a datasource for either TTree or RNTuple, forwarding future calls through one layer of indirection. As far as I can tell (without having implemented it), this should solve the problem of dealing with partially constructed `RDataFrame`s and not require a backwards-incompatible change in behavior. The cost would be one additional indirection, but this may be just fine given that `RDataSource` is already a `virtual` interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:308,modifiability,layer,layer,308,"As a drive-by comment, just to throw out the idea: Instead of opening the file at construction time, we could invent an ""indeterminate wrapper datasource"" that opens the file only once needed and then decides to internally create a datasource for either TTree or RNTuple, forwarding future calls through one layer of indirection. As far as I can tell (without having implemented it), this should solve the problem of dealing with partially constructed `RDataFrame`s and not require a backwards-incompatible change in behavior. The cost would be one additional indirection, but this may be just fine given that `RDataSource` is already a `virtual` interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:647,modifiability,interfac,interface,647,"As a drive-by comment, just to throw out the idea: Instead of opening the file at construction time, we could invent an ""indeterminate wrapper datasource"" that opens the file only once needed and then decides to internally create a datasource for either TTree or RNTuple, forwarding future calls through one layer of indirection. As far as I can tell (without having implemented it), this should solve the problem of dealing with partially constructed `RDataFrame`s and not require a backwards-incompatible change in behavior. The cost would be one additional indirection, but this may be just fine given that `RDataSource` is already a `virtual` interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:95,performance,time,time,95,"As a drive-by comment, just to throw out the idea: Instead of opening the file at construction time, we could invent an ""indeterminate wrapper datasource"" that opens the file only once needed and then decides to internally create a datasource for either TTree or RNTuple, forwarding future calls through one layer of indirection. As far as I can tell (without having implemented it), this should solve the problem of dealing with partially constructed `RDataFrame`s and not require a backwards-incompatible change in behavior. The cost would be one additional indirection, but this may be just fine given that `RDataSource` is already a `virtual` interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:517,usability,behavi,behavior,517,"As a drive-by comment, just to throw out the idea: Instead of opening the file at construction time, we could invent an ""indeterminate wrapper datasource"" that opens the file only once needed and then decides to internally create a datasource for either TTree or RNTuple, forwarding future calls through one layer of indirection. As far as I can tell (without having implemented it), this should solve the problem of dealing with partially constructed `RDataFrame`s and not require a backwards-incompatible change in behavior. The cost would be one additional indirection, but this may be just fine given that `RDataSource` is already a `virtual` interface...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:999,availability,error,error,999,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:231,energy efficiency,current,current,231,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:748,energy efficiency,current,current,748,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:804,energy efficiency,current,current,804,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:123,integrability,wrap,wrapper,123,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:714,integrability,schema,schema,714,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:65,interoperability,incompatib,incompatible,65,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:123,interoperability,wrapper,wrapper,123,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:841,interoperability,incompatib,incompatible,841,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:306,performance,time,time,306,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:326,performance,time,time,326,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:778,performance,time,time,778,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:999,performance,error,error,999,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:270,reliability,doe,does,270,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:907,reliability,doe,does,907,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:926,reliability,pra,practical,926,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:23,safety,input,input,23,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:999,safety,error,error,999,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:756,testability,understand,understanding,756,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:23,usability,input,input,23,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:88,usability,behavi,behaviour,88,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:239,usability,behavi,behaviour,239,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:486,usability,user,user,486,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:949,usability,user,users,949,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:956,usability,workflow,workflows,956,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:999,usability,error,error,999,"@hahnjo Thanks for the input, I am also wary about the backwards-incompatible change in behaviour. Your idea of the ""lazy"" wrapper source is sound and I also don't see major blockers against implementing it. On the other hand, the current behaviour of RDataFrame, which does not open files at construction time but at JITting time, is not really a design choice but rather a side-effect of using `TChain` as the concrete IO backend for all TTree-based RDataFrame instances, whether the user is processing a single file or more. Every other data source, including the RNTuple data source, opens a file. We could foresee that even with chains of RNTuple we still want to open the first file right away to derive the schema and some metadata. From my current understanding and the time spent on this PR, my current belief is that the backwards-incompatible change is almost a bugfix, and opening just one file does not introduce practical penalties in users' workflows, rather it also allows for early error catching potentially. What do you think about this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1444,availability,operat,operations,1444,"l obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with TChain as before). Bottom line, it was worth to investigate this idea as it also gave more insights on some of the not-immediately-evident parts of the machinery. Given the insights listed above, I decide to merge the PR as it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1233,deployability,manag,manager,1233,"l obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with TChain as before). Bottom line, it was worth to investigate this idea as it also gave more insights on some of the not-immediately-evident parts of the machinery. Given the insights listed above, I decide to merge the PR as it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:139,energy efficiency,current,current,139,"I tested offline @hahnjo 's proposal, as it would have had the nice advantage of avoiding the backwards-incompatible change brought by the current status of this PR. A summary of the insights I gathered:. 1. There are some technical obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1233,energy efficiency,manag,manager,1233,"l obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with TChain as before). Bottom line, it was worth to investigate this idea as it also gave more insights on some of the not-immediately-evident parts of the machinery. Given the insights listed above, I decide to merge the PR as it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:821,integrability,event,event,821,"I tested offline @hahnjo 's proposal, as it would have had the nice advantage of avoiding the backwards-incompatible change brought by the current status of this PR. A summary of the insights I gathered:. 1. There are some technical obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1000,integrability,schema,schema,1000,"ested offline @hahnjo 's proposal, as it would have had the nice advantage of avoiding the backwards-incompatible change brought by the current status of this PR. A summary of the insights I gathered:. 1. There are some technical obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with TC",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1264,integrability,schema,schema,1264,"l obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with TChain as before). Bottom line, it was worth to investigate this idea as it also gave more insights on some of the not-immediately-evident parts of the machinery. Given the insights listed above, I decide to merge the PR as it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1663,integrability,wrap,wrapped,1663,"l obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with TChain as before). Bottom line, it was worth to investigate this idea as it also gave more insights on some of the not-immediately-evident parts of the machinery. Given the insights listed above, I decide to merge the PR as it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:104,interoperability,incompatib,incompatible,104,"I tested offline @hahnjo 's proposal, as it would have had the nice advantage of avoiding the backwards-incompatible change brought by the current status of this PR. A summary of the insights I gathered:. 1. There are some technical obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:395,interoperability,format,format,395,"I tested offline @hahnjo 's proposal, as it would have had the nice advantage of avoiding the backwards-incompatible change brought by the current status of this PR. A summary of the insights I gathered:. 1. There are some technical obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1372,interoperability,incompatib,incompatible,1372,"l obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with TChain as before). Bottom line, it was worth to investigate this idea as it also gave more insights on some of the not-immediately-evident parts of the machinery. Given the insights listed above, I decide to merge the PR as it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1576,interoperability,Specif,Specifically,1576,"l obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with TChain as before). Bottom line, it was worth to investigate this idea as it also gave more insights on some of the not-immediately-evident parts of the machinery. Given the insights listed above, I decide to merge the PR as it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:411,reliability,doe,doesn,411,"I tested offline @hahnjo 's proposal, as it would have had the nice advantage of avoiding the backwards-incompatible change brought by the current status of this PR. A summary of the insights I gathered:. 1. There are some technical obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:458,reliability,pra,practically,458,"I tested offline @hahnjo 's proposal, as it would have had the nice advantage of avoiding the backwards-incompatible change brought by the current status of this PR. A summary of the insights I gathered:. 1. There are some technical obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:715,reliability,Pra,Practically,715,"I tested offline @hahnjo 's proposal, as it would have had the nice advantage of avoiding the backwards-incompatible change brought by the current status of this PR. A summary of the insights I gathered:. 1. There are some technical obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1757,reliability,doe,doesn,1757,"l obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with TChain as before). Bottom line, it was worth to investigate this idea as it also gave more insights on some of the not-immediately-evident parts of the machinery. Given the insights listed above, I decide to merge the PR as it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:2,safety,test,tested,2,"I tested offline @hahnjo 's proposal, as it would have had the nice advantage of avoiding the backwards-incompatible change brought by the current status of this PR. A summary of the insights I gathered:. 1. There are some technical obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:81,safety,avoid,avoiding,81,"I tested offline @hahnjo 's proposal, as it would have had the nice advantage of avoiding the backwards-incompatible change brought by the current status of this PR. A summary of the insights I gathered:. 1. There are some technical obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1233,safety,manag,manager,1233,"l obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with TChain as before). Bottom line, it was worth to investigate this idea as it also gave more insights on some of the not-immediately-evident parts of the machinery. Given the insights listed above, I decide to merge the PR as it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:2,testability,test,tested,2,"I tested offline @hahnjo 's proposal, as it would have had the nice advantage of avoiding the backwards-incompatible change brought by the current status of this PR. A summary of the insights I gathered:. 1. There are some technical obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:147,usability,statu,status,147,"I tested offline @hahnjo 's proposal, as it would have had the nice advantage of avoiding the backwards-incompatible change brought by the current status of this PR. A summary of the insights I gathered:. 1. There are some technical obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1131,usability,document,documentation,1131," current status of this PR. A summary of the insights I gathered:. 1. There are some technical obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with TChain as before). Bottom line, it was worth to investigate this idea as it also gave more insights on some of the not-immediately-eviden",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1836,usability,effectiv,effectively,1836,"l obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with TChain as before). Bottom line, it was worth to investigate this idea as it also gave more insights on some of the not-immediately-evident parts of the machinery. Given the insights listed above, I decide to merge the PR as it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1859,usability,behavi,behaviour,1859,"l obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with TChain as before). Bottom line, it was worth to investigate this idea as it also gave more insights on some of the not-immediately-evident parts of the machinery. Given the insights listed above, I decide to merge the PR as it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/pull/13090:1987,usability,workflow,workflow,1987,"l obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching. 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place. 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with TChain as before). Bottom line, it was worth to investigate this idea as it also gave more insights on some of the not-immediately-evident parts of the machinery. Given the insights listed above, I decide to merge the PR as it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13090
https://github.com/root-project/root/issues/13091:65,security,team,team,65,It looks like a bug in clan-cl. What do you expect from the ROOT team? we cannot fix a bug in clang-cl.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:508,availability,mask,masking,508,> It looks like a bug in clan-cl. What do you expect from the ROOT team? we cannot fix a bug in clang-cl. Even though clang-cl is not behaving like MSVC here the problem is that even if MSVC compiles the code it won't behave like ROOT plans it to behave (that is why https://github.com/llvm/llvm-project/issues/63494#issuecomment-1608917289 considers closing the issue I raised in llvm). . > What do you expect from the ROOT team? Fix the bug using MSVC. `wchar_t` is too small on MSVC but compiles the code masking a bug. . `_glyph = L'\U0001d538' + (_code[0] - 'A');` will never give the expected glyph with MSVC. . Linux: wchar_t == char32_t. Windows: wchar_t == char16_t. The code needs to be changed to consistently use `char32_t` to be correct across platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:708,availability,consist,consistently,708,> It looks like a bug in clan-cl. What do you expect from the ROOT team? we cannot fix a bug in clang-cl. Even though clang-cl is not behaving like MSVC here the problem is that even if MSVC compiles the code it won't behave like ROOT plans it to behave (that is why https://github.com/llvm/llvm-project/issues/63494#issuecomment-1608917289 considers closing the issue I raised in llvm). . > What do you expect from the ROOT team? Fix the bug using MSVC. `wchar_t` is too small on MSVC but compiles the code masking a bug. . `_glyph = L'\U0001d538' + (_code[0] - 'A');` will never give the expected glyph with MSVC. . Linux: wchar_t == char32_t. Windows: wchar_t == char16_t. The code needs to be changed to consistently use `char32_t` to be correct across platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:757,interoperability,platform,platforms,757,> It looks like a bug in clan-cl. What do you expect from the ROOT team? we cannot fix a bug in clang-cl. Even though clang-cl is not behaving like MSVC here the problem is that even if MSVC compiles the code it won't behave like ROOT plans it to behave (that is why https://github.com/llvm/llvm-project/issues/63494#issuecomment-1608917289 considers closing the issue I raised in llvm). . > What do you expect from the ROOT team? Fix the bug using MSVC. `wchar_t` is too small on MSVC but compiles the code masking a bug. . `_glyph = L'\U0001d538' + (_code[0] - 'A');` will never give the expected glyph with MSVC. . Linux: wchar_t == char32_t. Windows: wchar_t == char16_t. The code needs to be changed to consistently use `char32_t` to be correct across platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:67,security,team,team,67,> It looks like a bug in clan-cl. What do you expect from the ROOT team? we cannot fix a bug in clang-cl. Even though clang-cl is not behaving like MSVC here the problem is that even if MSVC compiles the code it won't behave like ROOT plans it to behave (that is why https://github.com/llvm/llvm-project/issues/63494#issuecomment-1608917289 considers closing the issue I raised in llvm). . > What do you expect from the ROOT team? Fix the bug using MSVC. `wchar_t` is too small on MSVC but compiles the code masking a bug. . `_glyph = L'\U0001d538' + (_code[0] - 'A');` will never give the expected glyph with MSVC. . Linux: wchar_t == char32_t. Windows: wchar_t == char16_t. The code needs to be changed to consistently use `char32_t` to be correct across platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:425,security,team,team,425,> It looks like a bug in clan-cl. What do you expect from the ROOT team? we cannot fix a bug in clang-cl. Even though clang-cl is not behaving like MSVC here the problem is that even if MSVC compiles the code it won't behave like ROOT plans it to behave (that is why https://github.com/llvm/llvm-project/issues/63494#issuecomment-1608917289 considers closing the issue I raised in llvm). . > What do you expect from the ROOT team? Fix the bug using MSVC. `wchar_t` is too small on MSVC but compiles the code masking a bug. . `_glyph = L'\U0001d538' + (_code[0] - 'A');` will never give the expected glyph with MSVC. . Linux: wchar_t == char32_t. Windows: wchar_t == char16_t. The code needs to be changed to consistently use `char32_t` to be correct across platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:235,testability,plan,plans,235,> It looks like a bug in clan-cl. What do you expect from the ROOT team? we cannot fix a bug in clang-cl. Even though clang-cl is not behaving like MSVC here the problem is that even if MSVC compiles the code it won't behave like ROOT plans it to behave (that is why https://github.com/llvm/llvm-project/issues/63494#issuecomment-1608917289 considers closing the issue I raised in llvm). . > What do you expect from the ROOT team? Fix the bug using MSVC. `wchar_t` is too small on MSVC but compiles the code masking a bug. . `_glyph = L'\U0001d538' + (_code[0] - 'A');` will never give the expected glyph with MSVC. . Linux: wchar_t == char32_t. Windows: wchar_t == char16_t. The code needs to be changed to consistently use `char32_t` to be correct across platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:134,usability,behavi,behaving,134,> It looks like a bug in clan-cl. What do you expect from the ROOT team? we cannot fix a bug in clang-cl. Even though clang-cl is not behaving like MSVC here the problem is that even if MSVC compiles the code it won't behave like ROOT plans it to behave (that is why https://github.com/llvm/llvm-project/issues/63494#issuecomment-1608917289 considers closing the issue I raised in llvm). . > What do you expect from the ROOT team? Fix the bug using MSVC. `wchar_t` is too small on MSVC but compiles the code masking a bug. . `_glyph = L'\U0001d538' + (_code[0] - 'A');` will never give the expected glyph with MSVC. . Linux: wchar_t == char32_t. Windows: wchar_t == char16_t. The code needs to be changed to consistently use `char32_t` to be correct across platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:708,usability,consist,consistently,708,> It looks like a bug in clan-cl. What do you expect from the ROOT team? we cannot fix a bug in clang-cl. Even though clang-cl is not behaving like MSVC here the problem is that even if MSVC compiles the code it won't behave like ROOT plans it to behave (that is why https://github.com/llvm/llvm-project/issues/63494#issuecomment-1608917289 considers closing the issue I raised in llvm). . > What do you expect from the ROOT team? Fix the bug using MSVC. `wchar_t` is too small on MSVC but compiles the code masking a bug. . `_glyph = L'\U0001d538' + (_code[0] - 'A');` will never give the expected glyph with MSVC. . Linux: wchar_t == char32_t. Windows: wchar_t == char16_t. The code needs to be changed to consistently use `char32_t` to be correct across platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:165,interoperability,compatib,compatibility,165,"`wchar_t` is used in 711 different places in ROOT. We cannot change all of them to `char32_t` moreover some methods signatures are using `wchar_t`, so, for backward compatibility, we cannot not change that. It seems that most compilers have `wchar_t` equivalent to `char32_t`. It seems only clang-cl has it equivalent to `char16_t`. We do not use clang-cl on Windows to compile ROOT (@bellenot can confirm). It seems this is a bad feature in clang-cl.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:116,security,sign,signatures,116,"`wchar_t` is used in 711 different places in ROOT. We cannot change all of them to `char32_t` moreover some methods signatures are using `wchar_t`, so, for backward compatibility, we cannot not change that. It seems that most compilers have `wchar_t` equivalent to `char32_t`. It seems only clang-cl has it equivalent to `char16_t`. We do not use clang-cl on Windows to compile ROOT (@bellenot can confirm). It seems this is a bad feature in clang-cl.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:398,usability,confirm,confirm,398,"`wchar_t` is used in 711 different places in ROOT. We cannot change all of them to `char32_t` moreover some methods signatures are using `wchar_t`, so, for backward compatibility, we cannot not change that. It seems that most compilers have `wchar_t` equivalent to `char32_t`. It seems only clang-cl has it equivalent to `char16_t`. We do not use clang-cl on Windows to compile ROOT (@bellenot can confirm). It seems this is a bad feature in clang-cl.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:63,modifiability,variab,variable,63,Note that one could change only the mathtext internal `_glyph` variable. I'll check what can be done.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:636,interoperability,platform,platform,636,> t seems that most compilers have wchar_t equivalent to char32_t. It seems only clang-cl has it equivalent to char16_t. @couet: No the problem is windows: https://godbolt.org/z/4YbW4M4r8 . Even worse GCC and MSVC dues the truncation differently. Basically the code is broken for symbols requiring more than 16 bit and you'll get garbage. (I don't even understand why I have to explain that it has nothing to do with the compiler....). @bellenot I doubt it is enough. You basically have to modify all functions which input/output `wchar_t` instead of `wchar_t*`. maybe use a surrogate type like `glyph_t` and adjust it according to the platform in use. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:517,safety,input,input,517,> t seems that most compilers have wchar_t equivalent to char32_t. It seems only clang-cl has it equivalent to char16_t. @couet: No the problem is windows: https://godbolt.org/z/4YbW4M4r8 . Even worse GCC and MSVC dues the truncation differently. Basically the code is broken for symbols requiring more than 16 bit and you'll get garbage. (I don't even understand why I have to explain that it has nothing to do with the compiler....). @bellenot I doubt it is enough. You basically have to modify all functions which input/output `wchar_t` instead of `wchar_t*`. maybe use a surrogate type like `glyph_t` and adjust it according to the platform in use. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:490,security,modif,modify,490,> t seems that most compilers have wchar_t equivalent to char32_t. It seems only clang-cl has it equivalent to char16_t. @couet: No the problem is windows: https://godbolt.org/z/4YbW4M4r8 . Even worse GCC and MSVC dues the truncation differently. Basically the code is broken for symbols requiring more than 16 bit and you'll get garbage. (I don't even understand why I have to explain that it has nothing to do with the compiler....). @bellenot I doubt it is enough. You basically have to modify all functions which input/output `wchar_t` instead of `wchar_t*`. maybe use a surrogate type like `glyph_t` and adjust it according to the platform in use. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:353,testability,understand,understand,353,> t seems that most compilers have wchar_t equivalent to char32_t. It seems only clang-cl has it equivalent to char16_t. @couet: No the problem is windows: https://godbolt.org/z/4YbW4M4r8 . Even worse GCC and MSVC dues the truncation differently. Basically the code is broken for symbols requiring more than 16 bit and you'll get garbage. (I don't even understand why I have to explain that it has nothing to do with the compiler....). @bellenot I doubt it is enough. You basically have to modify all functions which input/output `wchar_t` instead of `wchar_t*`. maybe use a surrogate type like `glyph_t` and adjust it according to the platform in use. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:517,usability,input,input,517,> t seems that most compilers have wchar_t equivalent to char32_t. It seems only clang-cl has it equivalent to char16_t. @couet: No the problem is windows: https://godbolt.org/z/4YbW4M4r8 . Even worse GCC and MSVC dues the truncation differently. Basically the code is broken for symbols requiring more than 16 bit and you'll get garbage. (I don't even understand why I have to explain that it has nothing to do with the compiler....). @bellenot I doubt it is enough. You basically have to modify all functions which input/output `wchar_t` instead of `wchar_t*`. maybe use a surrogate type like `glyph_t` and adjust it according to the platform in use. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:135,integrability,pub,public,135,"Well, as long as it doesn't break backward compatibility, anything can be done (i.e. internal methods). We **cannot** break user code (public interfaces), even if that means broken code on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:142,integrability,interfac,interfaces,142,"Well, as long as it doesn't break backward compatibility, anything can be done (i.e. internal methods). We **cannot** break user code (public interfaces), even if that means broken code on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:43,interoperability,compatib,compatibility,43,"Well, as long as it doesn't break backward compatibility, anything can be done (i.e. internal methods). We **cannot** break user code (public interfaces), even if that means broken code on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:142,interoperability,interfac,interfaces,142,"Well, as long as it doesn't break backward compatibility, anything can be done (i.e. internal methods). We **cannot** break user code (public interfaces), even if that means broken code on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:142,modifiability,interfac,interfaces,142,"Well, as long as it doesn't break backward compatibility, anything can be done (i.e. internal methods). We **cannot** break user code (public interfaces), even if that means broken code on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:20,reliability,doe,doesn,20,"Well, as long as it doesn't break backward compatibility, anything can be done (i.e. internal methods). We **cannot** break user code (public interfaces), even if that means broken code on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:124,usability,user,user,124,"Well, as long as it doesn't break backward compatibility, anything can be done (i.e. internal methods). We **cannot** break user code (public interfaces), even if that means broken code on Windows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:88,availability,error,errors,88,"Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to `wchar_t`), so we can try to fix them all at once? Thanks in advance!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:66,deployability,log,log,66,"Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to `wchar_t`), so we can try to fix them all at once? Thanks in advance!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:88,performance,error,errors,88,"Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to `wchar_t`), so we can try to fix them all at once? Thanks in advance!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:66,safety,log,log,66,"Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to `wchar_t`), so we can try to fix them all at once? Thanks in advance!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:88,safety,error,errors,88,"Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to `wchar_t`), so we can try to fix them all at once? Thanks in advance!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:66,security,log,log,66,"Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to `wchar_t`), so we can try to fix them all at once? Thanks in advance!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:66,testability,log,log,66,"Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to `wchar_t`), so we can try to fix them all at once? Thanks in advance!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:88,usability,error,errors,88,"Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to `wchar_t`), so we can try to fix them all at once? Thanks in advance!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:90,availability,error,errors,90,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:68,deployability,log,log,68,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:626,deployability,modul,modules,626,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:676,deployability,log,log,676,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:215,interoperability,specif,specify,215,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:626,modifiability,modul,modules,626,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:90,performance,error,errors,90,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:691,performance,time,time,691,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:68,safety,log,log,68,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:90,safety,error,errors,90,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:626,safety,modul,modules,626,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:676,safety,log,log,676,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:68,security,log,log,68,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:676,security,log,log,676,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:68,testability,log,log,68,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:676,testability,log,log,676,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:90,usability,error,errors,90,"> Hi, I have no warning at all on Windows. Can you provide the full log (all warnings and errors related to wchar_t), so we can try to fix them all at once? Thanks in advance! ~~@bellenot: That is because you don't specify a warning flag (At least I don't see any in the nightly CI) which means MSVC will default to an unuseful `W1` according to `cl -?` (`/W<n> set warning level (default n=1)`). A reasonable warning level for MSVC is `/W3`. Setting that should make C4066 visible (and probably a lot more relevant ones.).~~. Hmm I see https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/cmake/modules/SetUpWindows.cmake#L40C4-L40C4 I'll get a log when I get time to rebuild root with msvc. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:281,security,sign,signed,281,You might also want to take a look at these:. https://github.com/root-project/root/blob/416f75c9914f1ca35fdbad7d004f5c78cadf95a4/graf3d/eve7/glu/gluos.h#L62-L64. which seems to assume long is 64 bit. (at least I see `long size` in the code so I assume the correct type should be a signed size_t type and long on windows is only 32 bit and not 64 bit). (different issue from this one here),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:246,reliability,doe,doesn,246,"OK, so I have a possible solution, using `char32_t` instead of `wchar_t` and replace all the character literals like `L'\U0001d656'` by `U'\U0001d656'` everywhere in `tmathtext`, I verified it works, but in another hand, it's a huge change which doesn't change anything for the rendering (just try the `tmathtext.C` and `tmathtext2.C` tutorials). Anyway, I'll create a PR with that, and we'll see what happens. And thanks for the `root/graf3d/eve7/glu/gluos.h` info, I'll check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:181,testability,verif,verified,181,"OK, so I have a possible solution, using `char32_t` instead of `wchar_t` and replace all the character literals like `L'\U0001d656'` by `U'\U0001d656'` everywhere in `tmathtext`, I verified it works, but in another hand, it's a huge change which doesn't change anything for the rendering (just try the `tmathtext.C` and `tmathtext2.C` tutorials). Anyway, I'll create a PR with that, and we'll see what happens. And thanks for the `root/graf3d/eve7/glu/gluos.h` info, I'll check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:238,reliability,doe,doesn,238,"> OK, so I have a possible solution, using char32_t instead of wchar_t and replace all the character literals like L'\U0001d656' by U'\U0001d656' everywhere in tmathtext, I verified it works, but in another hand, it's a huge change which doesn't change anything for the rendering (just try the tmathtext.C and tmathtext2.C tutorials). Anyway, I'll create a PR with that, and we'll see what happens. I'll looked at those examples and I don't think those are running relevant text symbols to reach the L'\U0001d656' case .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:173,testability,verif,verified,173,"> OK, so I have a possible solution, using char32_t instead of wchar_t and replace all the character literals like L'\U0001d656' by U'\U0001d656' everywhere in tmathtext, I verified it works, but in another hand, it's a huge change which doesn't change anything for the rendering (just try the tmathtext.C and tmathtext2.C tutorials). Anyway, I'll create a PR with that, and we'll see what happens. I'll looked at those examples and I don't think those are running relevant text symbols to reach the L'\U0001d656' case .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:186,availability,error,errors,186,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`. So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:49,integrability,pub,public,49,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`. So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:56,integrability,interfac,interfaces,56,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`. So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:282,integrability,interfac,interfaces,282,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`. So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:56,interoperability,interfac,interfaces,56,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`. So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:282,interoperability,interfac,interfaces,282,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`. So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:56,modifiability,interfac,interfaces,56,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`. So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:282,modifiability,interfac,interfaces,282,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`. So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:186,performance,error,errors,186,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`. So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:352,reliability,doe,doesn,352,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`. So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:186,safety,error,errors,186,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`. So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:150,testability,simpl,simply,150,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`. So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:150,usability,simpl,simply,150,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`. So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:186,usability,error,errors,186,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`. So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:40,usability,close,close,40,I approved the PR. Once merged we might close this issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:14,reliability,doe,doesn,14,@couet the PR doesn't work. And I don't see any good solution...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/issues/13091:12,usability,close,close,12,So we might close the PR in that case. I do not see any good solution either.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13091
https://github.com/root-project/root/pull/13093:37,availability,operat,operator,37,Hello @sanjibansg @lmoneta The Where operator is working alright now and the tests are passing as well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13093
https://github.com/root-project/root/pull/13093:77,safety,test,tests,77,Hello @sanjibansg @lmoneta The Where operator is working alright now and the tests are passing as well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13093
https://github.com/root-project/root/pull/13093:77,testability,test,tests,77,Hello @sanjibansg @lmoneta The Where operator is working alright now and the tests are passing as well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13093
https://github.com/root-project/root/pull/13096:18,deployability,updat,updated,18,The PR branch got updated to fix conflicts with `master`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13096
https://github.com/root-project/root/pull/13096:33,interoperability,conflict,conflicts,33,The PR branch got updated to fix conflicts with `master`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13096
https://github.com/root-project/root/pull/13096:18,safety,updat,updated,18,The PR branch got updated to fix conflicts with `master`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13096
https://github.com/root-project/root/pull/13096:18,security,updat,updated,18,The PR branch got updated to fix conflicts with `master`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13096
https://github.com/root-project/root/pull/13097:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:161,deployability,Fail,Fail,161,"Hi @linev, this seems to have broken a number of tests in the new CI, see also [this summary page](https://github.com/root-project/root/runs/14569986255):. ```. Fail to detect supported browsers for image production. ```. Could you please have a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:161,reliability,Fail,Fail,161,"Hi @linev, this seems to have broken a number of tests in the new CI, see also [this summary page](https://github.com/root-project/root/runs/14569986255):. ```. Fail to detect supported browsers for image production. ```. Could you please have a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:49,safety,test,tests,49,"Hi @linev, this seems to have broken a number of tests in the new CI, see also [this summary page](https://github.com/root-project/root/runs/14569986255):. ```. Fail to detect supported browsers for image production. ```. Could you please have a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:169,safety,detect,detect,169,"Hi @linev, this seems to have broken a number of tests in the new CI, see also [this summary page](https://github.com/root-project/root/runs/14569986255):. ```. Fail to detect supported browsers for image production. ```. Could you please have a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:169,security,detect,detect,169,"Hi @linev, this seems to have broken a number of tests in the new CI, see also [this summary page](https://github.com/root-project/root/runs/14569986255):. ```. Fail to detect supported browsers for image production. ```. Could you please have a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:49,testability,test,tests,49,"Hi @linev, this seems to have broken a number of tests in the new CI, see also [this summary page](https://github.com/root-project/root/runs/14569986255):. ```. Fail to detect supported browsers for image production. ```. Could you please have a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:176,usability,support,supported,176,"Hi @linev, this seems to have broken a number of tests in the new CI, see also [this summary page](https://github.com/root-project/root/runs/14569986255):. ```. Fail to detect supported browsers for image production. ```. Could you please have a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:23,availability,error,error,23,"Hi @hahnjo,. It is new error message, which signals that chrome or firefox browser are missing to run these tests properly. I could add extra checks in the RCanvas::SaveAs method that it do nothing in such case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:29,integrability,messag,message,29,"Hi @hahnjo,. It is new error message, which signals that chrome or firefox browser are missing to run these tests properly. I could add extra checks in the RCanvas::SaveAs method that it do nothing in such case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:29,interoperability,messag,message,29,"Hi @hahnjo,. It is new error message, which signals that chrome or firefox browser are missing to run these tests properly. I could add extra checks in the RCanvas::SaveAs method that it do nothing in such case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:23,performance,error,error,23,"Hi @hahnjo,. It is new error message, which signals that chrome or firefox browser are missing to run these tests properly. I could add extra checks in the RCanvas::SaveAs method that it do nothing in such case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:156,reliability,RCa,RCanvas,156,"Hi @hahnjo,. It is new error message, which signals that chrome or firefox browser are missing to run these tests properly. I could add extra checks in the RCanvas::SaveAs method that it do nothing in such case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:23,safety,error,error,23,"Hi @hahnjo,. It is new error message, which signals that chrome or firefox browser are missing to run these tests properly. I could add extra checks in the RCanvas::SaveAs method that it do nothing in such case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:108,safety,test,tests,108,"Hi @hahnjo,. It is new error message, which signals that chrome or firefox browser are missing to run these tests properly. I could add extra checks in the RCanvas::SaveAs method that it do nothing in such case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:44,security,sign,signals,44,"Hi @hahnjo,. It is new error message, which signals that chrome or firefox browser are missing to run these tests properly. I could add extra checks in the RCanvas::SaveAs method that it do nothing in such case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:108,testability,test,tests,108,"Hi @hahnjo,. It is new error message, which signals that chrome or firefox browser are missing to run these tests properly. I could add extra checks in the RCanvas::SaveAs method that it do nothing in such case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13097:23,usability,error,error,23,"Hi @hahnjo,. It is new error message, which signals that chrome or firefox browser are missing to run these tests properly. I could add extra checks in the RCanvas::SaveAs method that it do nothing in such case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13097
https://github.com/root-project/root/pull/13098:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13098
https://github.com/root-project/root/pull/13098:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13098
https://github.com/root-project/root/pull/13098:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13098
https://github.com/root-project/root/pull/13100:71,testability,plan,plan,71,"I thought we could categorize this as ""bugfix"", seeing as this was the plan all along when `MakeChainForMT` was developed, but probably it's really just an improvement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13100
https://github.com/root-project/root/issues/13101:65,deployability,instal,install,65,"Hi! It seems ROOT picks up some outdated headers from `/opt/root/install/include/` during the build. This is a general problem that has nothing to do with RooFit, I have seen it several times happening in different contexts before. You can avoid this problem by un-installing ROOT from your system before you build the new ROOT version. Since this is a build-related issue, I have changed the issue title to reflect this and have assigned @bellenot. If uninstalling the existing ROOT release is not an acceptable solution for you for whatever reason, maybe @bellenot can comment more on what are the options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:94,deployability,build,build,94,"Hi! It seems ROOT picks up some outdated headers from `/opt/root/install/include/` during the build. This is a general problem that has nothing to do with RooFit, I have seen it several times happening in different contexts before. You can avoid this problem by un-installing ROOT from your system before you build the new ROOT version. Since this is a build-related issue, I have changed the issue title to reflect this and have assigned @bellenot. If uninstalling the existing ROOT release is not an acceptable solution for you for whatever reason, maybe @bellenot can comment more on what are the options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:265,deployability,instal,installing,265,"Hi! It seems ROOT picks up some outdated headers from `/opt/root/install/include/` during the build. This is a general problem that has nothing to do with RooFit, I have seen it several times happening in different contexts before. You can avoid this problem by un-installing ROOT from your system before you build the new ROOT version. Since this is a build-related issue, I have changed the issue title to reflect this and have assigned @bellenot. If uninstalling the existing ROOT release is not an acceptable solution for you for whatever reason, maybe @bellenot can comment more on what are the options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:309,deployability,build,build,309,"Hi! It seems ROOT picks up some outdated headers from `/opt/root/install/include/` during the build. This is a general problem that has nothing to do with RooFit, I have seen it several times happening in different contexts before. You can avoid this problem by un-installing ROOT from your system before you build the new ROOT version. Since this is a build-related issue, I have changed the issue title to reflect this and have assigned @bellenot. If uninstalling the existing ROOT release is not an acceptable solution for you for whatever reason, maybe @bellenot can comment more on what are the options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:328,deployability,version,version,328,"Hi! It seems ROOT picks up some outdated headers from `/opt/root/install/include/` during the build. This is a general problem that has nothing to do with RooFit, I have seen it several times happening in different contexts before. You can avoid this problem by un-installing ROOT from your system before you build the new ROOT version. Since this is a build-related issue, I have changed the issue title to reflect this and have assigned @bellenot. If uninstalling the existing ROOT release is not an acceptable solution for you for whatever reason, maybe @bellenot can comment more on what are the options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:353,deployability,build,build-related,353,"Hi! It seems ROOT picks up some outdated headers from `/opt/root/install/include/` during the build. This is a general problem that has nothing to do with RooFit, I have seen it several times happening in different contexts before. You can avoid this problem by un-installing ROOT from your system before you build the new ROOT version. Since this is a build-related issue, I have changed the issue title to reflect this and have assigned @bellenot. If uninstalling the existing ROOT release is not an acceptable solution for you for whatever reason, maybe @bellenot can comment more on what are the options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:484,deployability,releas,release,484,"Hi! It seems ROOT picks up some outdated headers from `/opt/root/install/include/` during the build. This is a general problem that has nothing to do with RooFit, I have seen it several times happening in different contexts before. You can avoid this problem by un-installing ROOT from your system before you build the new ROOT version. Since this is a build-related issue, I have changed the issue title to reflect this and have assigned @bellenot. If uninstalling the existing ROOT release is not an acceptable solution for you for whatever reason, maybe @bellenot can comment more on what are the options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:328,integrability,version,version,328,"Hi! It seems ROOT picks up some outdated headers from `/opt/root/install/include/` during the build. This is a general problem that has nothing to do with RooFit, I have seen it several times happening in different contexts before. You can avoid this problem by un-installing ROOT from your system before you build the new ROOT version. Since this is a build-related issue, I have changed the issue title to reflect this and have assigned @bellenot. If uninstalling the existing ROOT release is not an acceptable solution for you for whatever reason, maybe @bellenot can comment more on what are the options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:328,modifiability,version,version,328,"Hi! It seems ROOT picks up some outdated headers from `/opt/root/install/include/` during the build. This is a general problem that has nothing to do with RooFit, I have seen it several times happening in different contexts before. You can avoid this problem by un-installing ROOT from your system before you build the new ROOT version. Since this is a build-related issue, I have changed the issue title to reflect this and have assigned @bellenot. If uninstalling the existing ROOT release is not an acceptable solution for you for whatever reason, maybe @bellenot can comment more on what are the options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:186,performance,time,times,186,"Hi! It seems ROOT picks up some outdated headers from `/opt/root/install/include/` during the build. This is a general problem that has nothing to do with RooFit, I have seen it several times happening in different contexts before. You can avoid this problem by un-installing ROOT from your system before you build the new ROOT version. Since this is a build-related issue, I have changed the issue title to reflect this and have assigned @bellenot. If uninstalling the existing ROOT release is not an acceptable solution for you for whatever reason, maybe @bellenot can comment more on what are the options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:240,safety,avoid,avoid,240,"Hi! It seems ROOT picks up some outdated headers from `/opt/root/install/include/` during the build. This is a general problem that has nothing to do with RooFit, I have seen it several times happening in different contexts before. You can avoid this problem by un-installing ROOT from your system before you build the new ROOT version. Since this is a build-related issue, I have changed the issue title to reflect this and have assigned @bellenot. If uninstalling the existing ROOT release is not an acceptable solution for you for whatever reason, maybe @bellenot can comment more on what are the options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:215,testability,context,contexts,215,"Hi! It seems ROOT picks up some outdated headers from `/opt/root/install/include/` during the build. This is a general problem that has nothing to do with RooFit, I have seen it several times happening in different contexts before. You can avoid this problem by un-installing ROOT from your system before you build the new ROOT version. Since this is a build-related issue, I have changed the issue title to reflect this and have assigned @bellenot. If uninstalling the existing ROOT release is not an acceptable solution for you for whatever reason, maybe @bellenot can comment more on what are the options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:63,availability,error,errors,63,"@guitargeek thank you! I'm glad that ROOT doesn't have so many errors :) Yes, this is a strange issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:63,performance,error,errors,63,"@guitargeek thank you! I'm glad that ROOT doesn't have so many errors :) Yes, this is a strange issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:42,reliability,doe,doesn,42,"@guitargeek thank you! I'm glad that ROOT doesn't have so many errors :) Yes, this is a strange issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:63,safety,error,errors,63,"@guitargeek thank you! I'm glad that ROOT doesn't have so many errors :) Yes, this is a strange issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:63,usability,error,errors,63,"@guitargeek thank you! I'm glad that ROOT doesn't have so many errors :) Yes, this is a strange issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:39,deployability,instal,install,39,"Sorry, I have no experience with Linux install/uninstall/update procedures, but I'll try to figure out what can be done (not sure if it's really a CMake/ROOT issue though)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:57,deployability,updat,update,57,"Sorry, I have no experience with Linux install/uninstall/update procedures, but I'll try to figure out what can be done (not sure if it's really a CMake/ROOT issue though)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:57,safety,updat,update,57,"Sorry, I have no experience with Linux install/uninstall/update procedures, but I'll try to figure out what can be done (not sure if it's really a CMake/ROOT issue though)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:57,security,updat,update,57,"Sorry, I have no experience with Linux install/uninstall/update procedures, but I'll try to figure out what can be done (not sure if it's really a CMake/ROOT issue though)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:17,usability,experien,experience,17,"Sorry, I have no experience with Linux install/uninstall/update procedures, but I'll try to figure out what can be done (not sure if it's really a CMake/ROOT issue though)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:200,availability,error,error,200,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:234,availability,Error,Error,234,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:918,availability,error,error,918,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:24,deployability,instal,installed,24,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:61,deployability,version,version,61,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:174,deployability,instal,install,174,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:249,deployability,modul,modules,249,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:312,deployability,instal,install,312,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:364,deployability,Stack,Stack,364,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:403,deployability,modul,modules,403,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:467,deployability,modul,modules,467,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:596,deployability,version,version,596,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:659,deployability,instal,install,659,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:711,deployability,instal,installation,711,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:838,deployability,instal,install,838,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:61,integrability,version,version,61,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:78,integrability,repositor,repository,78,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:596,integrability,version,version,596,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:78,interoperability,repositor,repository,78,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:61,modifiability,version,version,61,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:249,modifiability,modul,modules,249,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:403,modifiability,modul,modules,403,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:467,modifiability,modul,modules,467,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:596,modifiability,version,version,596,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:200,performance,error,error,200,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:234,performance,Error,Error,234,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:908,performance,time,time,908,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:918,performance,error,error,918,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:847,reliability,doe,does,847,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:200,safety,error,error,200,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:234,safety,Error,Error,234,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:249,safety,modul,modules,249,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:403,safety,modul,modules,403,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:467,safety,modul,modules,467,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:918,safety,error,error,918,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:200,usability,error,error,200,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:234,usability,Error,Error,234,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:885,usability,command,command,885,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:918,usability,error,error,918,"So I deleted my freshly installed ROOT and pulled the newest version from the repository. When running. `cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../install ../src`. I got an error. `-- Looking for VDT. CMake Error at cmake/modules/FindVdt.cmake:48 (file):. file STRINGS file ""/opt/root/install/include/vdt/vdtMath.h"" cannot be read. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1591 (find_package). CMakeLists.txt:327 (include). -- Could NOT find Vdt: Found unsuitable version ""0.3"", but required is at least ""0.4"" (found /opt/root/install/include). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. `. As I wrote, the directory */opt/root/install* does not exist. When running the same command for the second time, the error is gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:215,availability,avail,available,215,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:24,deployability,instal,install,24,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:77,deployability,configurat,configuration,77,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:100,deployability,build,build,100,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:179,deployability,build,build,179,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:351,deployability,configurat,configuration,351,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:77,integrability,configur,configuration,77,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:351,integrability,configur,configuration,351,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:77,modifiability,configur,configuration,77,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:351,modifiability,configur,configuration,351,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:293,performance,time,time,293,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:322,performance,time,time,322,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:134,reliability,doe,does,134,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:215,reliability,availab,available,215,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:389,reliability,doe,does,389,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:215,safety,avail,available,215,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:77,security,configur,configuration,77,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:215,security,availab,available,215,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:351,security,configur,configuration,351,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:268,usability,command,command,268,"CMake thinks `/opt/root/install` exists. Maybe it's picking up and old cmake configuration from the build directory? If the directory does not exist, starting fresh from an empty build directory with no ROOT binary available in your environment should work fine. (the command works the second time because after the first time ROOT switches the cmake configuration to `builtin_vdt`, so it does not look for VDT in the system anymore).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/issues/13101:160,usability,close,closed,160,"I think so, yes. We should bump the priority of this, because the problem with compiling ROOT when there is already ROOT on the system comes back often (I just closed a duplicate issue once again).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13101
https://github.com/root-project/root/pull/13109:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13109
https://github.com/root-project/root/pull/13109:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13109
https://github.com/root-project/root/pull/13111:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13111
https://github.com/root-project/root/pull/13111:176,energy efficiency,optim,optimally,176,"Hi @gartrog, thanks for the fix and sorry for the very late reply! Can you maybe give us a reproducer for this problem, which works with your fix and doesn't work without? And optimally, turn this reproducer into a unit test that is added to this directory? https://github.com/root-project/root/issues/13110. Thanks a lot!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13111
https://github.com/root-project/root/pull/13111:150,reliability,doe,doesn,150,"Hi @gartrog, thanks for the fix and sorry for the very late reply! Can you maybe give us a reproducer for this problem, which works with your fix and doesn't work without? And optimally, turn this reproducer into a unit test that is added to this directory? https://github.com/root-project/root/issues/13110. Thanks a lot!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13111
https://github.com/root-project/root/pull/13111:220,safety,test,test,220,"Hi @gartrog, thanks for the fix and sorry for the very late reply! Can you maybe give us a reproducer for this problem, which works with your fix and doesn't work without? And optimally, turn this reproducer into a unit test that is added to this directory? https://github.com/root-project/root/issues/13110. Thanks a lot!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13111
https://github.com/root-project/root/pull/13111:215,testability,unit,unit,215,"Hi @gartrog, thanks for the fix and sorry for the very late reply! Can you maybe give us a reproducer for this problem, which works with your fix and doesn't work without? And optimally, turn this reproducer into a unit test that is added to this directory? https://github.com/root-project/root/issues/13110. Thanks a lot!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13111
https://github.com/root-project/root/pull/13111:220,testability,test,test,220,"Hi @gartrog, thanks for the fix and sorry for the very late reply! Can you maybe give us a reproducer for this problem, which works with your fix and doesn't work without? And optimally, turn this reproducer into a unit test that is added to this directory? https://github.com/root-project/root/issues/13110. Thanks a lot!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13111
https://github.com/root-project/root/pull/13111:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13111
https://github.com/root-project/root/pull/13112:36,availability,slo,slower,36,For the record do we know how much 'slower' things are getting?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13112
https://github.com/root-project/root/pull/13112:36,reliability,slo,slower,36,For the record do we know how much 'slower' things are getting?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13112
https://github.com/root-project/root/pull/13112:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos8-multicore/cxx17 with flags -DCTEST_TEST_EXCLUDE_NONE=On -Druntime_cxxmodules=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13112
https://github.com/root-project/root/pull/13112:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/cxx17 with flags -DCTEST_TEST_EXCLUDE_NONE=On -Druntime_cxxmodules=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13112
https://github.com/root-project/root/pull/13112:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/cxx17 with flags -DCTEST_TEST_EXCLUDE_NONE=On -Druntime_cxxmodules=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13112
https://github.com/root-project/root/pull/13112:40,deployability,observ,observation,40,"Sure, I only wanted to confirm my local observation that this revert happens to also solve https://github.com/root-project/root/issues/13058...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13112
https://github.com/root-project/root/pull/13112:40,testability,observ,observation,40,"Sure, I only wanted to confirm my local observation that this revert happens to also solve https://github.com/root-project/root/issues/13058...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13112
https://github.com/root-project/root/pull/13112:23,usability,confirm,confirm,23,"Sure, I only wanted to confirm my local observation that this revert happens to also solve https://github.com/root-project/root/issues/13058...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13112
https://github.com/root-project/root/pull/13121:4,availability,failur,failure,4,The failure in [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178340/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/) might look suspicious but I think it's unrelated. Let's see.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13121
https://github.com/root-project/root/pull/13121:111,availability,servic,services,111,The failure in [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178340/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/) might look suspicious but I think it's unrelated. Let's see.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13121
https://github.com/root-project/root/pull/13121:4,deployability,fail,failure,4,The failure in [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178340/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/) might look suspicious but I think it's unrelated. Let's see.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13121
https://github.com/root-project/root/pull/13121:111,deployability,servic,services,111,The failure in [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178340/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/) might look suspicious but I think it's unrelated. Let's see.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13121
https://github.com/root-project/root/pull/13121:163,deployability,build,build,163,The failure in [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178340/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/) might look suspicious but I think it's unrelated. Let's see.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13121
https://github.com/root-project/root/pull/13121:111,integrability,servic,services,111,The failure in [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178340/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/) might look suspicious but I think it's unrelated. Let's see.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13121
https://github.com/root-project/root/pull/13121:111,modifiability,servic,services,111,The failure in [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178340/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/) might look suspicious but I think it's unrelated. Let's see.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13121
https://github.com/root-project/root/pull/13121:4,performance,failur,failure,4,The failure in [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178340/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/) might look suspicious but I think it's unrelated. Let's see.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13121
https://github.com/root-project/root/pull/13121:4,reliability,fail,failure,4,The failure in [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178340/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/) might look suspicious but I think it's unrelated. Let's see.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13121
https://github.com/root-project/root/pull/13121:176,safety,test,testReport,176,The failure in [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178340/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/) might look suspicious but I think it's unrelated. Let's see.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13121
https://github.com/root-project/root/pull/13121:176,testability,test,testReport,176,The failure in [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178340/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/) might look suspicious but I think it's unrelated. Let's see.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13121
https://github.com/root-project/root/pull/13121:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13121
https://github.com/root-project/root/issues/13122:69,security,modif,modifies,69,Try to store canvas from `tutorials/graphs/annotation3d.C` macro. It modifies axes properties in the macro itself - like title or some special labels. You can do same with `Bessel.C` - but interactively before storing canvas to ROOT file,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:189,usability,interact,interactively,189,Try to store canvas from `tutorials/graphs/annotation3d.C` macro. It modifies axes properties in the macro itself - like title or some special labels. You can do same with `Bessel.C` - but interactively before storing canvas to ROOT file,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:139,energy efficiency,Draw,DrawCopy,139,I see that with `annotation3d.C` the changed labels are not stored in the canvas when it is displayed back. But it has nothing to do with `DrawCopy` because this macro uses only `Draw`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:179,energy efficiency,Draw,Draw,179,I see that with `annotation3d.C` the changed labels are not stored in the canvas when it is displayed back. But it has nothing to do with `DrawCopy` because this macro uses only `Draw`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:23,reliability,doe,doesn,23,Saving it as `.C` also doesn't work.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:113,deployability,fail,fail,113,`TF1::DrawCopy` not used in tutorials. . But if one modifies any of such tutorials and will try to use - it will fail.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:6,energy efficiency,Draw,DrawCopy,6,`TF1::DrawCopy` not used in tutorials. . But if one modifies any of such tutorials and will try to use - it will fail.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:113,reliability,fail,fail,113,`TF1::DrawCopy` not used in tutorials. . But if one modifies any of such tutorials and will try to use - it will fail.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:52,security,modif,modifies,52,`TF1::DrawCopy` not used in tutorials. . But if one modifies any of such tutorials and will try to use - it will fail.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:3,deployability,fail,fails,3,It fails already now. I am preparing a PR for the `.C` case first ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:3,reliability,fail,fails,3,It fails already now. I am preparing a PR for the `.C` case first ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:55,energy efficiency,Draw,Draw,55,"Now we have:. ```. auto f = new TF1(""x"",""x"",-1,1);. f->Draw();. f->GetXaxis()->ChangeLabel(5, -1, -1, -1, -1, -1,""CHANGED"");. c1->SaveAs(""c1.C"");. c1->SaveAs(""c1.root"");. ```. The changed label is saved in the .C file but not in the root file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:91,energy efficiency,Draw,DrawCopy,91,"> Therefore the axis are not persistent too and not saved in the root file. Olivier, `TF1::DrawCopy` is not about storage in the ROOT file. . It missing copying of histogram properties.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:64,energy efficiency,Draw,DrawCopy,64,@lmoneta . In this issue Serguei points out the fact that `TF1::DrawCopy` does not keep the axis labels and titles changes. This is normal because they are stored in the underlying histogram `fHistogram` and this histogram is [explicitly not copied](https://github.com/root-project/root/blob/03dd288fc06f65f5d9112d3cc5ca5796a170a437/hist/hist/src/TF1.cxx#L1008) . Is there a reason behind this ? . Does it make sense to copy also the underlying histogram ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:74,reliability,doe,does,74,@lmoneta . In this issue Serguei points out the fact that `TF1::DrawCopy` does not keep the axis labels and titles changes. This is normal because they are stored in the underlying histogram `fHistogram` and this histogram is [explicitly not copied](https://github.com/root-project/root/blob/03dd288fc06f65f5d9112d3cc5ca5796a170a437/hist/hist/src/TF1.cxx#L1008) . Is there a reason behind this ? . Does it make sense to copy also the underlying histogram ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:398,reliability,Doe,Does,398,@lmoneta . In this issue Serguei points out the fact that `TF1::DrawCopy` does not keep the axis labels and titles changes. This is normal because they are stored in the underlying histogram `fHistogram` and this histogram is [explicitly not copied](https://github.com/root-project/root/blob/03dd288fc06f65f5d9112d3cc5ca5796a170a437/hist/hist/src/TF1.cxx#L1008) . Is there a reason behind this ? . Does it make sense to copy also the underlying histogram ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:277,performance,memor,memory,277,> this histogram is [explicitly not copied](https://github.com/root-project/root/blob/03dd288fc06f65f5d9112d3cc5ca5796a170a437/hist/hist/src/TF1.cxx#L1008) . Is there a reason behind this ? . Does it make sense to copy also the underlying histogram ? I guess it was to avoid a memory leak: https://github.com/root-project/root/commit/c9e326e0dbebb4af52b58bfa3e73e80fb1f97682,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:192,reliability,Doe,Does,192,> this histogram is [explicitly not copied](https://github.com/root-project/root/blob/03dd288fc06f65f5d9112d3cc5ca5796a170a437/hist/hist/src/TF1.cxx#L1008) . Is there a reason behind this ? . Does it make sense to copy also the underlying histogram ? I guess it was to avoid a memory leak: https://github.com/root-project/root/commit/c9e326e0dbebb4af52b58bfa3e73e80fb1f97682,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:269,safety,avoid,avoid,269,> this histogram is [explicitly not copied](https://github.com/root-project/root/blob/03dd288fc06f65f5d9112d3cc5ca5796a170a437/hist/hist/src/TF1.cxx#L1008) . Is there a reason behind this ? . Does it make sense to copy also the underlying histogram ? I guess it was to avoid a memory leak: https://github.com/root-project/root/commit/c9e326e0dbebb4af52b58bfa3e73e80fb1f97682,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:277,usability,memor,memory,277,> this histogram is [explicitly not copied](https://github.com/root-project/root/blob/03dd288fc06f65f5d9112d3cc5ca5796a170a437/hist/hist/src/TF1.cxx#L1008) . Is there a reason behind this ? . Does it make sense to copy also the underlying histogram ? I guess it was to avoid a memory leak: https://github.com/root-project/root/commit/c9e326e0dbebb4af52b58bfa3e73e80fb1f97682,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:10,energy efficiency,Draw,DrawCopy,10,"> If TF1::DrawCopy() is used to draw the function, all axis settings (which are stored in histogram) are lost. A workaround would be to call: `TF1::Clone(); TF1::Draw();` which does copy the underlying histogram.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:32,energy efficiency,draw,draw,32,"> If TF1::DrawCopy() is used to draw the function, all axis settings (which are stored in histogram) are lost. A workaround would be to call: `TF1::Clone(); TF1::Draw();` which does copy the underlying histogram.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:162,energy efficiency,Draw,Draw,162,"> If TF1::DrawCopy() is used to draw the function, all axis settings (which are stored in histogram) are lost. A workaround would be to call: `TF1::Clone(); TF1::Draw();` which does copy the underlying histogram.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:177,reliability,doe,does,177,"> If TF1::DrawCopy() is used to draw the function, all axis settings (which are stored in histogram) are lost. A workaround would be to call: `TF1::Clone(); TF1::Draw();` which does copy the underlying histogram.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:38,usability,close,closed,38,@couet is this fixed? Can the item be closed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:130,energy efficiency,Draw,DrawCopy,130,"No, issue is still there. . As mentioned - `tutorials/math/Bessel.C` configures x axis title, but it does not appeared when `TF1::DrawCopy()` is called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:69,integrability,configur,configures,69,"No, issue is still there. . As mentioned - `tutorials/math/Bessel.C` configures x axis title, but it does not appeared when `TF1::DrawCopy()` is called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:69,modifiability,configur,configures,69,"No, issue is still there. . As mentioned - `tutorials/math/Bessel.C` configures x axis title, but it does not appeared when `TF1::DrawCopy()` is called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:101,reliability,doe,does,101,"No, issue is still there. . As mentioned - `tutorials/math/Bessel.C` configures x axis title, but it does not appeared when `TF1::DrawCopy()` is called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:69,security,configur,configures,69,"No, issue is still there. . As mentioned - `tutorials/math/Bessel.C` configures x axis title, but it does not appeared when `TF1::DrawCopy()` is called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:59,testability,plan,plan,59,"@couet @linev is this still a problem? If yes, what is the plan to fix this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/issues/13122:49,energy efficiency,Draw,DrawCopy,49,"Yes, issue is still there. One need to fix `TF1::DrawCopy()`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13122
https://github.com/root-project/root/pull/13123:34,deployability,modul,modules,34,That was probably relevant in pre-modules world. Maybe we can build in non-modules builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:62,deployability,build,build,62,That was probably relevant in pre-modules world. Maybe we can build in non-modules builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:75,deployability,modul,modules,75,That was probably relevant in pre-modules world. Maybe we can build in non-modules builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:83,deployability,build,builds,83,That was probably relevant in pre-modules world. Maybe we can build in non-modules builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:34,modifiability,modul,modules,34,That was probably relevant in pre-modules world. Maybe we can build in non-modules builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:75,modifiability,modul,modules,75,That was probably relevant in pre-modules world. Maybe we can build in non-modules builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:34,safety,modul,modules,34,That was probably relevant in pre-modules world. Maybe we can build in non-modules builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:75,safety,modul,modules,75,That was probably relevant in pre-modules world. Maybe we can build in non-modules builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On -Druntime_cxxmodules=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:36,availability,failur,failures,36,"I think this looks mostly good, the failures on `ROOT-debian10-i386` are timeouts (even though it's suspicious that the same tests timed out as the last time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:36,deployability,fail,failures,36,"I think this looks mostly good, the failures on `ROOT-debian10-i386` are timeouts (even though it's suspicious that the same tests timed out as the last time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:36,performance,failur,failures,36,"I think this looks mostly good, the failures on `ROOT-debian10-i386` are timeouts (even though it's suspicious that the same tests timed out as the last time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:73,performance,time,timeouts,73,"I think this looks mostly good, the failures on `ROOT-debian10-i386` are timeouts (even though it's suspicious that the same tests timed out as the last time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:131,performance,time,timed,131,"I think this looks mostly good, the failures on `ROOT-debian10-i386` are timeouts (even though it's suspicious that the same tests timed out as the last time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:153,performance,time,time,153,"I think this looks mostly good, the failures on `ROOT-debian10-i386` are timeouts (even though it's suspicious that the same tests timed out as the last time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:36,reliability,fail,failures,36,"I think this looks mostly good, the failures on `ROOT-debian10-i386` are timeouts (even though it's suspicious that the same tests timed out as the last time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:73,safety,timeout,timeouts,73,"I think this looks mostly good, the failures on `ROOT-debian10-i386` are timeouts (even though it's suspicious that the same tests timed out as the last time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:125,safety,test,tests,125,"I think this looks mostly good, the failures on `ROOT-debian10-i386` are timeouts (even though it's suspicious that the same tests timed out as the last time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/pull/13123:125,testability,test,tests,125,"I think this looks mostly good, the failures on `ROOT-debian10-i386` are timeouts (even though it's suspicious that the same tests timed out as the last time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13123
https://github.com/root-project/root/issues/13124:119,energy efficiency,Draw,DrawFrame,119,"It behaves like a TGraph. You do not need the option same:. ```. void scat2(). {. TCanvas * c1 = new TCanvas();. gPad->DrawFrame(-70, -70, 70, 70);. const int n = 10;. double x[n] = {-80, -70, -60, -50, -40, -30, -20, -10, 0, 10};. double y[n] = {-80, -70, -60, -50, -40, -30, -20, -10, 0, 10};. double c[n] = {-80, -70, -60, -50, -40, -30, -20, -10, 0, 10};. double s[n] = {-80, -70, -60, -50, -40, -30, -20, -10, 0, 10};. auto scatter = new TScatter(n, x, y, c, s);. scatter->Draw(""P"");. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13124
https://github.com/root-project/root/issues/13124:478,energy efficiency,Draw,Draw,478,"It behaves like a TGraph. You do not need the option same:. ```. void scat2(). {. TCanvas * c1 = new TCanvas();. gPad->DrawFrame(-70, -70, 70, 70);. const int n = 10;. double x[n] = {-80, -70, -60, -50, -40, -30, -20, -10, 0, 10};. double y[n] = {-80, -70, -60, -50, -40, -30, -20, -10, 0, 10};. double c[n] = {-80, -70, -60, -50, -40, -30, -20, -10, 0, 10};. double s[n] = {-80, -70, -60, -50, -40, -30, -20, -10, 0, 10};. auto scatter = new TScatter(n, x, y, c, s);. scatter->Draw(""P"");. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13124
https://github.com/root-project/root/pull/13127:10,energy efficiency,current,currently,10,"> Link is currently broken:. > . > ![image](https://user-images.githubusercontent.com/10999034/249826735-30cffdd9-4143-42b4-a69a-02ab311ac58c.png). ah yes, I noticed it yesterday too (I guess I added the space by mistake), thanks for the fix!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13127
https://github.com/root-project/root/pull/13127:52,usability,user,user-images,52,"> Link is currently broken:. > . > ![image](https://user-images.githubusercontent.com/10999034/249826735-30cffdd9-4143-42b4-a69a-02ab311ac58c.png). ah yes, I noticed it yesterday too (I guess I added the space by mistake), thanks for the fix!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13127
https://github.com/root-project/root/pull/13129:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13129
https://github.com/root-project/root/issues/13130:70,energy efficiency,alloc,allocates,70,This is likely something to be added to the suppression file: jitting allocates and never deallocates.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:81,energy efficiency,alloc,allocate,81,"Indeed, @pcanal invested a lot of time to avoid these cases but we still have to allocate some memory on making lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:34,performance,time,time,34,"Indeed, @pcanal invested a lot of time to avoid these cases but we still have to allocate some memory on making lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:95,performance,memor,memory,95,"Indeed, @pcanal invested a lot of time to avoid these cases but we still have to allocate some memory on making lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:42,safety,avoid,avoid,42,"Indeed, @pcanal invested a lot of time to avoid these cases but we still have to allocate some memory on making lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:95,usability,memor,memory,95,"Indeed, @pcanal invested a lot of time to avoid these cases but we still have to allocate some memory on making lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:96,integrability,coupl,couple,96,"This isn't jitting, and clang should not leak this. Please leave it open for me to look at in a couple of weeks. Thanks for the report!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:96,modifiability,coupl,couple,96,"This isn't jitting, and clang should not leak this. Please leave it open for me to look at in a couple of weeks. Thanks for the report!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:96,testability,coupl,couple,96,"This isn't jitting, and clang should not leak this. Please leave it open for me to look at in a couple of weeks. Thanks for the report!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:201,availability,ERROR,ERROR,201,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:179,deployability,version,versions,179,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:290,energy efficiency,alloc,allocated,290,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:716,energy efficiency,alloc,allocation,716,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:179,integrability,version,versions,179,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:179,modifiability,version,versions,179,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:201,performance,ERROR,ERROR,201,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:232,performance,memor,memory,232,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:759,reliability,doe,does,759,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:103,safety,sanit,sanitiser,103,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:125,safety,test,tests,125,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:201,safety,ERROR,ERROR,201,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:223,safety,detect,detected,223,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:103,security,sanit,sanitiser,103,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:223,security,detect,detected,223,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:120,testability,unit,unit,120,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:125,testability,test,tests,125,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:201,usability,ERROR,ERROR,201,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:232,usability,memor,memory,232,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:. ```. ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:. #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145. #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s). ```. **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:57,interoperability,share,share,57,Thanks - could you. - open a dedicated issue for this. - share way way more of the backtrace: ideally everything but at least until the first frame in TCling. Thanks for investing your time here!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:185,performance,time,time,185,Thanks - could you. - open a dedicated issue for this. - share way way more of the backtrace: ideally everything but at least until the first frame in TCling. Thanks for investing your time here!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:119,energy efficiency,alloc,allocates,119,"@vepadulano , not clear from the conversation to me, but is the comment above about the suppression file and how cling allocates addressing your original issue? If yes,could you close this item?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:33,interoperability,convers,conversation,33,"@vepadulano , not clear from the conversation to me, but is the comment above about the suppression file and how cling allocates addressing your original issue? If yes,could you close this item?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:18,usability,clear,clear,18,"@vepadulano , not clear from the conversation to me, but is the comment above about the suppression file and how cling allocates addressing your original issue? If yes,could you close this item?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:178,usability,close,close,178,"@vepadulano , not clear from the conversation to me, but is the comment above about the suppression file and how cling allocates addressing your original issue? If yes,could you close this item?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:60,performance,memor,memory-leak-during-repeated-fitting,60,This seems another occurrence: https://root-forum.cern.ch/t/memory-leak-during-repeated-fitting/58299/16 that also gets solved when going into 6.30. So maybe a backport for 6.28 would be useful.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:60,usability,memor,memory-leak-during-repeated-fitting,60,This seems another occurrence: https://root-forum.cern.ch/t/memory-leak-during-repeated-fitting/58299/16 that also gets solved when going into 6.30. So maybe a backport for 6.28 would be useful.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/issues/13130:23,usability,behavi,behaviour,23,I am closing since the behaviour is not reproducible.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13130
https://github.com/root-project/root/pull/13133:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13133
https://github.com/root-project/root/pull/13133:21,modifiability,variab,variable,21,"Just fixed an unused variable warning. PR looks good, thanks @grimmmyshini!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13133
https://github.com/root-project/root/pull/13133:31,performance,perform,performance,31,Do we have an idea of what the performance numbers are after landing this PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13133
https://github.com/root-project/root/pull/13133:31,usability,perform,performance,31,Do we have an idea of what the performance numbers are after landing this PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13133
https://github.com/root-project/root/pull/13133:33,performance,perform,performance,33,> Do we have an idea of what the performance numbers are after landing this PR? I sent it to you privately on mattermost earlier,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13133
https://github.com/root-project/root/pull/13133:33,usability,perform,performance,33,> Do we have an idea of what the performance numbers are after landing this PR? I sent it to you privately on mattermost earlier,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13133
https://github.com/root-project/root/pull/13134:0,reliability,Doe,Does,0,Does it mean - any class derived from TObject should have ClassDef and dictionary? Even if it helps here - there are many other libraries which do not create dictionaries.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:94,usability,help,helps,94,Does it mean - any class derived from TObject should have ClassDef and dictionary? Even if it helps here - there are many other libraries which do not create dictionaries.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2,reliability,Doe,Does,2,"> Does it mean - any class derived from TObject should have ClassDef and dictionary? I'm not sure, we'll need @pcanal here. My understanding of the problem is that `RFileDialog` has a member of type `RBrowserData` (which has an entry in the `LinkDef.h`) which has a member of type `std::unique_ptr<RBrowserDataCleanup>`, where `RBrowserDataCleanup` is only forward declared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:127,testability,understand,understanding,127,"> Does it mean - any class derived from TObject should have ClassDef and dictionary? I'm not sure, we'll need @pcanal here. My understanding of the problem is that `RFileDialog` has a member of type `RBrowserData` (which has an entry in the `LinkDef.h`) which has a member of type `std::unique_ptr<RBrowserDataCleanup>`, where `RBrowserDataCleanup` is only forward declared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:178,performance,I/O,I/O,178,Member in RBrowserData.hxx defined as:. ```. std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. It should be fully excluded from I/O. . Only if dictionary has problem with forward declarations. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:169,safety,compl,complaining,169,"Well, already the member in `RFileDialog` is declared as. ```c++. RBrowserData fBrowsable; ///<! central browsing element. ```. But my understanding is that this not IO complaining, but already `TClass`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:169,security,compl,complaining,169,"Well, already the member in `RFileDialog` is declared as. ```c++. RBrowserData fBrowsable; ///<! central browsing element. ```. But my understanding is that this not IO complaining, but already `TClass`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:135,testability,understand,understanding,135,"Well, already the member in `RFileDialog` is declared as. ```c++. RBrowserData fBrowsable; ///<! central browsing element. ```. But my understanding is that this not IO complaining, but already `TClass`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:43,safety,compl,complaining,43,"> But my understanding is that this not IO complaining, but already TClass... But again - it still should be possible to use such class definitions without moving specialization into header files. . I expect, that ClassDef and LinkDef.h changes are not necessary - just moving `RBrowserDataCleanup` to header files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:43,security,compl,complaining,43,"> But my understanding is that this not IO complaining, but already TClass... But again - it still should be possible to use such class definitions without moving specialization into header files. . I expect, that ClassDef and LinkDef.h changes are not necessary - just moving `RBrowserDataCleanup` to header files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:9,testability,understand,understanding,9,"> But my understanding is that this not IO complaining, but already TClass... But again - it still should be possible to use such class definitions without moving specialization into header files. . I expect, that ClassDef and LinkDef.h changes are not necessary - just moving `RBrowserDataCleanup` to header files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:96,modifiability,inherit,inherits,96,"> I expect, that ClassDef and LinkDef.h changes are not necessary . Technically since the class inherits from `TObject` it ought to have a `ClassDef` but it could/should be a `ClassDefInline`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:90,availability,failur,failure,90,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:228,availability,servic,services,228,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:383,availability,Error,Error,383,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:577,availability,Error,Error,577,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1068,availability,error,error,1068,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:90,deployability,fail,failure,90,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:228,deployability,servic,services,228,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:280,deployability,build,build,280,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:330,energy efficiency,core,core,330,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:228,integrability,servic,services,228,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:228,modifiability,servic,services,228,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:90,performance,failur,failure,90,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:383,performance,Error,Error,383,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:577,performance,Error,Error,577,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1068,performance,error,error,1068,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:90,reliability,fail,failure,90,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:293,safety,test,testReport,293,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:383,safety,Error,Error,383,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:577,safety,Error,Error,577,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1068,safety,error,error,1068,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:75,testability,understand,understand,75,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:293,testability,test,testReport,293,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:383,usability,Error,Error,383,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:577,usability,Error,Error,577,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1046,usability,indicat,indicates,1046,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1068,usability,error,error,1068,"I do not see anything inherently wrong with the changes BUT I really don't understand the failure and why moving the decl fixes them. I.e. it feels that this is hiding an existing problem. In particular, I see in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178429/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/:. ```. +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. +Error in <CreateRealData>: Cannot find data member # 0 of class . ```. Whereas I do not even see/find the use of `RBrowserDataCleanup` within a `std::tuple` ... I only see it used in a transient member:. ```. origin/master:gui/browserv7/inc/ROOT/RBrowserData.hxx: std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. ```. which should be suppressing any warning about missing information (albeit not the one above that usually indicates an internal error)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:138,integrability,sub,submitting,138,"> I expect, that ClassDef and LinkDef.h changes are not necessary - just moving RBrowserDataCleanup to header files. I tested this before submitting, and it didn't fix the problem. But I'm by no means an expert in this area, entirely possible that I'm missing something! > Fully agree. One should try to analyze why problem appears at all. @pcanal could you help with this? I'm not very familiar with this part of ROOT...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:119,safety,test,tested,119,"> I expect, that ClassDef and LinkDef.h changes are not necessary - just moving RBrowserDataCleanup to header files. I tested this before submitting, and it didn't fix the problem. But I'm by no means an expert in this area, entirely possible that I'm missing something! > Fully agree. One should try to analyze why problem appears at all. @pcanal could you help with this? I'm not very familiar with this part of ROOT...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:119,testability,test,tested,119,"> I expect, that ClassDef and LinkDef.h changes are not necessary - just moving RBrowserDataCleanup to header files. I tested this before submitting, and it didn't fix the problem. But I'm by no means an expert in this area, entirely possible that I'm missing something! > Fully agree. One should try to analyze why problem appears at all. @pcanal could you help with this? I'm not very familiar with this part of ROOT...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:358,usability,help,help,358,"> I expect, that ClassDef and LinkDef.h changes are not necessary - just moving RBrowserDataCleanup to header files. I tested this before submitting, and it didn't fix the problem. But I'm by no means an expert in this area, entirely possible that I'm missing something! > Fully agree. One should try to analyze why problem appears at all. @pcanal could you help with this? I'm not very familiar with this part of ROOT...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:601,availability,error,error,601,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:846,availability,error,error,846,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:69,deployability,depend,depend,69,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:894,deployability,depend,dependency,894,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:69,integrability,depend,depend,69,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:894,integrability,depend,dependency,894,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:69,modifiability,depend,depend,69,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:369,modifiability,inherit,inheriting,369,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:894,modifiability,depend,dependency,894,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:455,performance,I/O,I/O,455,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:601,performance,error,error,601,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:846,performance,error,error,846,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:69,safety,depend,depend,69,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:363,safety,avoid,avoid,363,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:395,safety,compl,completely,395,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:601,safety,error,error,601,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:846,safety,error,error,846,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:894,safety,depend,dependency,894,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:395,security,compl,completely,395,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:69,testability,depend,depend,69,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:773,testability,understand,understand,773,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:876,testability,understand,understand,876,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:894,testability,depend,dependency,894,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:601,usability,error,error,601,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:755,usability,clear,clear,755,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:846,usability,error,error,846,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`. 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change. 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? . 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:47,modifiability,inherit,inherits,47,"My understanding is that `RBrowserDataCleanup` inherits from `TObject` to have it registered in `gROOT`, cf. commit cb8d8b73ea856aa7b895c38112bbefbcf0967cfa that introduced it. A dictionary should, in fact, not be needed because the data members are transient. This is what needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3,testability,understand,understanding,3,"My understanding is that `RBrowserDataCleanup` inherits from `TObject` to have it registered in `gROOT`, cf. commit cb8d8b73ea856aa7b895c38112bbefbcf0967cfa that introduced it. A dictionary should, in fact, not be needed because the data members are transient. This is what needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:648,deployability,log,logical,648,"> RBrowserDataCleanup derives from TObject, so it must have a ClassDef. Is it so? . To my understanding, `ClassDef` required either for I/O and/or if class used with interpreter. . Both is not required for `RBrowserDataCleanup`. . Seems to be problem caused by dictionary generation for transient member `std::unique_ptr<RBrowserDataCleanup>`. I can very easily solve the problem - replacing `std::unique_ptr` by plain pointer. But this will not solve problem with dictionary - any user can have similar class layout and will face problem again. Forcing the user to provide dictionary for the class which does not appear in headers? It is not very logical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:136,performance,I/O,I/O,136,"> RBrowserDataCleanup derives from TObject, so it must have a ClassDef. Is it so? . To my understanding, `ClassDef` required either for I/O and/or if class used with interpreter. . Both is not required for `RBrowserDataCleanup`. . Seems to be problem caused by dictionary generation for transient member `std::unique_ptr<RBrowserDataCleanup>`. I can very easily solve the problem - replacing `std::unique_ptr` by plain pointer. But this will not solve problem with dictionary - any user can have similar class layout and will face problem again. Forcing the user to provide dictionary for the class which does not appear in headers? It is not very logical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:605,reliability,doe,does,605,"> RBrowserDataCleanup derives from TObject, so it must have a ClassDef. Is it so? . To my understanding, `ClassDef` required either for I/O and/or if class used with interpreter. . Both is not required for `RBrowserDataCleanup`. . Seems to be problem caused by dictionary generation for transient member `std::unique_ptr<RBrowserDataCleanup>`. I can very easily solve the problem - replacing `std::unique_ptr` by plain pointer. But this will not solve problem with dictionary - any user can have similar class layout and will face problem again. Forcing the user to provide dictionary for the class which does not appear in headers? It is not very logical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:648,safety,log,logical,648,"> RBrowserDataCleanup derives from TObject, so it must have a ClassDef. Is it so? . To my understanding, `ClassDef` required either for I/O and/or if class used with interpreter. . Both is not required for `RBrowserDataCleanup`. . Seems to be problem caused by dictionary generation for transient member `std::unique_ptr<RBrowserDataCleanup>`. I can very easily solve the problem - replacing `std::unique_ptr` by plain pointer. But this will not solve problem with dictionary - any user can have similar class layout and will face problem again. Forcing the user to provide dictionary for the class which does not appear in headers? It is not very logical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:648,security,log,logical,648,"> RBrowserDataCleanup derives from TObject, so it must have a ClassDef. Is it so? . To my understanding, `ClassDef` required either for I/O and/or if class used with interpreter. . Both is not required for `RBrowserDataCleanup`. . Seems to be problem caused by dictionary generation for transient member `std::unique_ptr<RBrowserDataCleanup>`. I can very easily solve the problem - replacing `std::unique_ptr` by plain pointer. But this will not solve problem with dictionary - any user can have similar class layout and will face problem again. Forcing the user to provide dictionary for the class which does not appear in headers? It is not very logical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:90,testability,understand,understanding,90,"> RBrowserDataCleanup derives from TObject, so it must have a ClassDef. Is it so? . To my understanding, `ClassDef` required either for I/O and/or if class used with interpreter. . Both is not required for `RBrowserDataCleanup`. . Seems to be problem caused by dictionary generation for transient member `std::unique_ptr<RBrowserDataCleanup>`. I can very easily solve the problem - replacing `std::unique_ptr` by plain pointer. But this will not solve problem with dictionary - any user can have similar class layout and will face problem again. Forcing the user to provide dictionary for the class which does not appear in headers? It is not very logical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:648,testability,log,logical,648,"> RBrowserDataCleanup derives from TObject, so it must have a ClassDef. Is it so? . To my understanding, `ClassDef` required either for I/O and/or if class used with interpreter. . Both is not required for `RBrowserDataCleanup`. . Seems to be problem caused by dictionary generation for transient member `std::unique_ptr<RBrowserDataCleanup>`. I can very easily solve the problem - replacing `std::unique_ptr` by plain pointer. But this will not solve problem with dictionary - any user can have similar class layout and will face problem again. Forcing the user to provide dictionary for the class which does not appear in headers? It is not very logical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:482,usability,user,user,482,"> RBrowserDataCleanup derives from TObject, so it must have a ClassDef. Is it so? . To my understanding, `ClassDef` required either for I/O and/or if class used with interpreter. . Both is not required for `RBrowserDataCleanup`. . Seems to be problem caused by dictionary generation for transient member `std::unique_ptr<RBrowserDataCleanup>`. I can very easily solve the problem - replacing `std::unique_ptr` by plain pointer. But this will not solve problem with dictionary - any user can have similar class layout and will face problem again. Forcing the user to provide dictionary for the class which does not appear in headers? It is not very logical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:558,usability,user,user,558,"> RBrowserDataCleanup derives from TObject, so it must have a ClassDef. Is it so? . To my understanding, `ClassDef` required either for I/O and/or if class used with interpreter. . Both is not required for `RBrowserDataCleanup`. . Seems to be problem caused by dictionary generation for transient member `std::unique_ptr<RBrowserDataCleanup>`. I can very easily solve the problem - replacing `std::unique_ptr` by plain pointer. But this will not solve problem with dictionary - any user can have similar class layout and will face problem again. Forcing the user to provide dictionary for the class which does not appear in headers? It is not very logical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1309,availability,error,errors,1309,"lude ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -42,15 +44,15 @@ namespace Experimental {. . class RBrowserDataCleanup : public TObject {. . - RBrowserData &fData;. + RBrowserData *fData{nullptr}; //! . public:. - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1832,availability,Error,Error,1832,"oveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1946,availability,avail,available,1946,"efInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2015,availability,Error,Error,2015,"ic:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2129,availability,avail,available,2129,"Handle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2198,availability,Error,Error,2198,"(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2312,availability,avail,available,2312,"hen before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2381,availability,Error,Error,2381,"/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2495,availability,avail,available,2495,"padulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2564,availability,Error,Error,2564,"ottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2678,availability,avail,available,2678,n TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2747,availability,Error,Error,2747,ent as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2861,availability,avail,available,2861,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2930,availability,Error,Error,2930,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3044,availability,avail,available,3044,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3113,availability,Error,Error,3113,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3227,availability,avail,available,3227,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3296,availability,Error,Error,3296,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3410,availability,avail,available,3410,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3479,availability,Error,Error,3479,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3593,availability,avail,available,3593,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3662,availability,Error,Error,3662,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3776,availability,avail,available,3776,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3845,availability,Error,Error,3845,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3959,availability,avail,available,3959,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4028,availability,Error,Error,4028,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4142,availability,avail,available,4142,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4211,availability,Error,Error,4211,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4325,availability,avail,available,4325,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4394,availability,Error,Error,4394,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4508,availability,avail,available,4508,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4577,availability,Error,Error,4577,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class t,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4691,availability,avail,available,4691,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Erro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4760,availability,Error,Error,4760,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4874,availability,avail,available,4874,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4943,availability,Error,Error,4943,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5057,availability,avail,available,5057,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5126,availability,Error,Error,5126,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5240,availability,avail,available,5240,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5309,availability,Error,Error,5309,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5423,availability,avail,available,5423,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5492,availability,Error,Error,5492,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5692,availability,Error,Error,5692,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5912,availability,Error,Error,5912,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:6112,availability,Error,Error,6112,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:6346,availability,error,errors,6346,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1604,deployability,log,log,1604,"eanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no inter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1429,energy efficiency,core,core,1429,"5 +44,15 @@ namespace Experimental {. . class RBrowserDataCleanup : public TObject {. . - RBrowserData &fData;. + RBrowserData *fData{nullptr}; //! . public:. - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1579,energy efficiency,core,core,1579,"public:. - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1850,energy efficiency,Load,LoadClassInfo,1850,"}. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2033,energy efficiency,Load,LoadClassInfo,2033,"BrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2216,energy efficiency,Load,LoadClassInfo,2216,"GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2399,energy efficiency,Load,LoadClassInfo,2399,"tproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2582,energy efficiency,Load,LoadClassInfo,2582,"tatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2765,energy efficiency,Load,LoadClassInfo,2765,548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2948,energy efficiency,Load,LoadClassInfo,2948, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3131,energy efficiency,Load,LoadClassInfo,3131, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3314,energy efficiency,Load,LoadClassInfo,3314, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3497,energy efficiency,Load,LoadClassInfo,3497, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3680,energy efficiency,Load,LoadClassInfo,3680, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3863,energy efficiency,Load,LoadClassInfo,3863, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4046,energy efficiency,Load,LoadClassInfo,4046, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4229,energy efficiency,Load,LoadClassInfo,4229, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4412,energy efficiency,Load,LoadClassInfo,4412, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4595,energy efficiency,Load,LoadClassInfo,4595, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4778,energy efficiency,Load,LoadClassInfo,4778," even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4961,energy efficiency,Load,LoadClassInfo,4961," even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5144,energy efficiency,Load,LoadClassInfo,5144," even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5327,energy efficiency,Load,LoadClassInfo,5327," even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I gu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:18,integrability,rout,route,18,"FYI,. I tried the route of `ClassDefInline` with poor results. First off, the class now need a default constructor, which means I had to turn the reference data member to a pointer. The diff is here. ```. --- a/gui/browserv7/src/RBrowserData.cxx. +++ b/gui/browserv7/src/RBrowserData.cxx. @@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -42,15 +44,15 @@ namespace Experimental {. . class RBrowserDataCleanup : public TObject {. . - RBrowserData &fData;. + RBrowserData *fData{nullptr}; //! . public:. - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:499,integrability,pub,public,499,"FYI,. I tried the route of `ClassDefInline` with poor results. First off, the class now need a default constructor, which means I had to turn the reference data member to a pointer. The diff is here. ```. --- a/gui/browserv7/src/RBrowserData.cxx. +++ b/gui/browserv7/src/RBrowserData.cxx. @@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -42,15 +44,15 @@ namespace Experimental {. . class RBrowserDataCleanup : public TObject {. . - RBrowserData &fData;. + RBrowserData *fData{nullptr}; //! . public:. - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:581,integrability,pub,public,581,"FYI,. I tried the route of `ClassDefInline` with poor results. First off, the class now need a default constructor, which means I had to turn the reference data member to a pointer. The diff is here. ```. --- a/gui/browserv7/src/RBrowserData.cxx. +++ b/gui/browserv7/src/RBrowserData.cxx. @@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -42,15 +44,15 @@ namespace Experimental {. . class RBrowserDataCleanup : public TObject {. . - RBrowserData &fData;. + RBrowserData *fData{nullptr}; //! . public:. - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1014,integrability,pub,public,1014," route of `ClassDefInline` with poor results. First off, the class now need a default constructor, which means I had to turn the reference data member to a pointer. The diff is here. ```. --- a/gui/browserv7/src/RBrowserData.cxx. +++ b/gui/browserv7/src/RBrowserData.cxx. @@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -42,15 +44,15 @@ namespace Experimental {. . class RBrowserDataCleanup : public TObject {. . - RBrowserData &fData;. + RBrowserData *fData{nullptr}; //! . public:. - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Er",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1999,integrability,rout,routine,1999,"7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class RO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2182,integrability,rout,routine,2182,";. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class RO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2365,integrability,rout,routine,2365,"1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class RO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2548,integrability,rout,routine,2548,"check-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class RO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2731,integrability,rout,routine,2731,n TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class RO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2914,integrability,rout,routine,2914,tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class RO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3097,integrability,rout,routine,3097,tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class RO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3280,integrability,rout,routine,3280,tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class RO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3463,integrability,rout,routine,3463,tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class RO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3646,integrability,rout,routine,3646,tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class RO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3829,integrability,rout,routine,3829,tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class RO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4012,integrability,rout,routine,4012,tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class RO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4195,integrability,rout,routine,4195,tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class RO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4378,integrability,rout,routine,4378,tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class RO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4561,integrability,rout,routine,4561,tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4744,integrability,rout,routine,4744,"tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 o",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4927,integrability,rout,routine,4927,"tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoCla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5110,integrability,rout,routine,5110,"tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Er",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5293,integrability,rout,routine,5293,"tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5476,integrability,rout,routine,5476,"tal::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:6479,interoperability,convers,conversation,6479,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1309,performance,error,errors,1309,"lude ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -42,15 +44,15 @@ namespace Experimental {. . class RBrowserDataCleanup : public TObject {. . - RBrowserData &fData;. + RBrowserData *fData{nullptr}; //! . public:. - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1832,performance,Error,Error,1832,"oveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1850,performance,Load,LoadClassInfo,1850,"}. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2015,performance,Error,Error,2015,"ic:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2033,performance,Load,LoadClassInfo,2033,"BrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2198,performance,Error,Error,2198,"(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2216,performance,Load,LoadClassInfo,2216,"GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2381,performance,Error,Error,2381,"/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2399,performance,Load,LoadClassInfo,2399,"tproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2564,performance,Error,Error,2564,"ottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2582,performance,Load,LoadClassInfo,2582,"tatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2747,performance,Error,Error,2747,ent as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2765,performance,Load,LoadClassInfo,2765,548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2930,performance,Error,Error,2930,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2948,performance,Load,LoadClassInfo,2948, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3113,performance,Error,Error,3113,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3131,performance,Load,LoadClassInfo,3131, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3296,performance,Error,Error,3296,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3314,performance,Load,LoadClassInfo,3314, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3479,performance,Error,Error,3479,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3497,performance,Load,LoadClassInfo,3497, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3662,performance,Error,Error,3662,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3680,performance,Load,LoadClassInfo,3680, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3845,performance,Error,Error,3845,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3863,performance,Load,LoadClassInfo,3863, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4028,performance,Error,Error,4028,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4046,performance,Load,LoadClassInfo,4046, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4211,performance,Error,Error,4211,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4229,performance,Load,LoadClassInfo,4229, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4394,performance,Error,Error,4394,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4412,performance,Load,LoadClassInfo,4412, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4577,performance,Error,Error,4577,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class t,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4595,performance,Load,LoadClassInfo,4595, even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4760,performance,Error,Error,4760,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4778,performance,Load,LoadClassInfo,4778," even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4943,performance,Error,Error,4943,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4961,performance,Load,LoadClassInfo,4961," even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5126,performance,Error,Error,5126,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5144,performance,Load,LoadClassInfo,5144," even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5309,performance,Error,Error,5309,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5327,performance,Load,LoadClassInfo,5327," even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I gu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5492,performance,Error,Error,5492,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5692,performance,Error,Error,5692,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5912,performance,Error,Error,5912,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:6112,performance,Error,Error,6112,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:6346,performance,error,errors,6346,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1946,reliability,availab,available,1946,"efInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2129,reliability,availab,available,2129,"Handle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2312,reliability,availab,available,2312,"hen before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2495,reliability,availab,available,2495,"padulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2678,reliability,availab,available,2678,n TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2861,reliability,availab,available,2861,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3044,reliability,availab,available,3044,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3227,reliability,availab,available,3227,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3410,reliability,availab,available,3410,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3593,reliability,availab,available,3593,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3776,reliability,availab,available,3776,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3959,reliability,availab,available,3959,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4142,reliability,availab,available,4142,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4325,reliability,availab,available,4325,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4508,reliability,availab,available,4508,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4691,reliability,availab,available,4691,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Erro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4874,reliability,availab,available,4874,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5057,reliability,availab,available,5057,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5240,reliability,availab,available,5240,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5423,reliability,availab,available,5423,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1288,safety,test,test,1288,"@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -42,15 +44,15 @@ namespace Experimental {. . class RBrowserDataCleanup : public TObject {. . - RBrowserData &fData;. + RBrowserData *fData{nullptr}; //! . public:. - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1309,safety,error,errors,1309,"lude ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -42,15 +44,15 @@ namespace Experimental {. . class RBrowserDataCleanup : public TObject {. . - RBrowserData &fData;. + RBrowserData *fData{nullptr}; //! . public:. - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1604,safety,log,log,1604,"eanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no inter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1832,safety,Error,Error,1832,"oveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1946,safety,avail,available,1946,"efInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2015,safety,Error,Error,2015,"ic:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2129,safety,avail,available,2129,"Handle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2198,safety,Error,Error,2198,"(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2312,safety,avail,available,2312,"hen before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2381,safety,Error,Error,2381,"/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2495,safety,avail,available,2495,"padulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2564,safety,Error,Error,2564,"ottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2678,safety,avail,available,2678,n TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2747,safety,Error,Error,2747,ent as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2861,safety,avail,available,2861,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2930,safety,Error,Error,2930,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3044,safety,avail,available,3044,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3113,safety,Error,Error,3113,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3227,safety,avail,available,3227,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3296,safety,Error,Error,3296,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3410,safety,avail,available,3410,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3479,safety,Error,Error,3479,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3593,safety,avail,available,3593,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3662,safety,Error,Error,3662,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3776,safety,avail,available,3776,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3845,safety,Error,Error,3845,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3959,safety,avail,available,3959,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4028,safety,Error,Error,4028,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4142,safety,avail,available,4142,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4211,safety,Error,Error,4211,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4325,safety,avail,available,4325,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4394,safety,Error,Error,4394,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4508,safety,avail,available,4508,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4577,safety,Error,Error,4577,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class t,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4691,safety,avail,available,4691,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Erro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4760,safety,Error,Error,4760,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4874,safety,avail,available,4874,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4943,safety,Error,Error,4943,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5057,safety,avail,available,5057,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5126,safety,Error,Error,5126,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5240,safety,avail,available,5240,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5309,safety,Error,Error,5309,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5423,safety,avail,available,5423,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5492,safety,Error,Error,5492,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5692,safety,Error,Error,5692,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5912,safety,Error,Error,5912,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:6112,safety,Error,Error,6112,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:6346,safety,error,errors,6346,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1604,security,log,log,1604,"eanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no inter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1946,security,availab,available,1946,"efInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2129,security,availab,available,2129,"Handle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2312,security,availab,available,2312,"hen before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2495,security,availab,available,2495,"padulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2678,security,availab,available,2678,n TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2861,security,availab,available,2861,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3044,security,availab,available,3044,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3227,security,availab,available,3227,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3410,security,availab,available,3410,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3593,security,availab,available,3593,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3776,security,availab,available,3776,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3959,security,availab,available,3959,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4142,security,availab,available,4142,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4325,security,availab,available,4325,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::Loa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4508,security,availab,available,4508,no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4691,security,availab,available,4691,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Erro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4874,security,availab,available,4874,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5057,security,availab,available,5057,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5240,security,availab,available,5240,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5423,security,availab,available,5423,"no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1288,testability,test,test,1288,"@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -42,15 +44,15 @@ namespace Experimental {. . class RBrowserDataCleanup : public TObject {. . - RBrowserData &fData;. + RBrowserData *fData{nullptr}; //! . public:. - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1604,testability,log,log,1604,"eanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no inter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1309,usability,error,errors,1309,"lude ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -42,15 +44,15 @@ namespace Experimental {. . class RBrowserDataCleanup : public TObject {. . - RBrowserData &fData;. + RBrowserData *fData{nullptr}; //! . public:. - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}. + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}. + RBrowserDataCleanup() {} // Needed by ClassDefInline. . - void RecursiveRemove(TObject *obj) override. - {. - fData.RemoveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1832,usability,Error,Error,1832,"oveFromCache(obj);. - }. + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }. +. + ClassDefInline(RBrowserDataCleanup, 1);. };. }. }. @@ -67,7 +69,7 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2015,usability,Error,Error,2015,"ic:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);. R__LOCKGUARD(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2198,usability,Error,Error,2198,"(gROOTMutex);. gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. }. ```. And the test gives even more errors then before:. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2381,usability,Error,Error,2381,"/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2564,usability,Error,Error,2564,"ottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023. 1548: @@ -14,5 +14,29 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2747,usability,Error,Error,2747,ent as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2930,usability,Error,Error,2930,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3113,usability,Error,Error,3113,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3296,usability,Error,Error,3296,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3479,usability,Error,Error,3479,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3662,usability,Error,Error,3662,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3845,usability,Error,Error,3845,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4028,usability,Error,Error,4028,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4211,usability,Error,Error,4211,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4394,usability,Error,Error,4394,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimenta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4577,usability,Error,Error,4577,taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class t,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4760,usability,Error,Error,4760,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:4943,usability,Error,Error,4943,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5126,usability,Error,Error,5126,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5309,usability,Error,Error,5309,"taCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5492,usability,Error,Error,5492,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5692,usability,Error,Error,5692,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5912,usability,Error,Error,5912,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:6112,usability,Error,Error,6112,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:6346,usability,error,errors,6346,"erDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. I guess the new errors come from the fact I am not generating a dictionary in `Linkdef.h`? Anyway, maybe this will give more food for thought to the conversation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:330,reliability,doe,does,330,">> Is it so? > Yes, as written in the manual. . I still do not see reason why dictionary is necessary here. . It is really question for @pcanal. . Is there special handling of `std::unique_ptr<T>` for the types derived from `TObject`? . In dictionary for transient members? . And how one gets such information for the class which does not appears in header files? As I mention - there is much simpler workaround with plain pointer. But once I implement it - one immediately forgets about the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:393,testability,simpl,simpler,393,">> Is it so? > Yes, as written in the manual. . I still do not see reason why dictionary is necessary here. . It is really question for @pcanal. . Is there special handling of `std::unique_ptr<T>` for the types derived from `TObject`? . In dictionary for transient members? . And how one gets such information for the class which does not appears in header files? As I mention - there is much simpler workaround with plain pointer. But once I implement it - one immediately forgets about the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:393,usability,simpl,simpler,393,">> Is it so? > Yes, as written in the manual. . I still do not see reason why dictionary is necessary here. . It is really question for @pcanal. . Is there special handling of `std::unique_ptr<T>` for the types derived from `TObject`? . In dictionary for transient members? . And how one gets such information for the class which does not appears in header files? As I mention - there is much simpler workaround with plain pointer. But once I implement it - one immediately forgets about the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:286,availability,error,error,286,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:305,availability,error,errors,305,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:814,availability,Error,Error,814,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1014,availability,Error,Error,1014,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1234,availability,Error,Error,1234,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1434,availability,Error,Error,1434,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:587,deployability,log,log,587,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:412,energy efficiency,core,core,412,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:562,energy efficiency,core,core,562,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:286,performance,error,error,286,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:305,performance,error,errors,305,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:814,performance,Error,Error,814,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1014,performance,Error,Error,1014,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1234,performance,Error,Error,1234,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1434,performance,Error,Error,1434,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:172,safety,test,testing,172,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:286,safety,error,error,286,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:305,safety,error,errors,305,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:587,safety,log,log,587,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:814,safety,Error,Error,814,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1014,safety,Error,Error,1014,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1234,safety,Error,Error,1234,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1434,safety,Error,Error,1434,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:587,security,log,log,587,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:172,testability,test,testing,172,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:587,testability,log,log,587,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:286,usability,error,error,286,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:305,usability,error,errors,305,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:814,usability,Error,Error,814,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1014,usability,Error,Error,1014,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1234,usability,Error,Error,1234,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1434,usability,Error,Error,1434,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor? Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors. ```. 1548: -- BEGIN OUTDIFF OUTPUT --. 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021. 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023. 1548: @@ -14,5 +14,9 @@. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog! ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:442,deployability,fail,fail,442,"> To my understanding, ClassDef required either for I/O and/or if class used with interpreter. Not only. If an object inherits from `TObject`, it gets the member functions `IsA` and `Class`. If the derived class does have a `ClassDef` those will returns the wrong answer (i.e `this is object is a TObject` rather than `this object is a derived class`). In practice this means that the behavior will be inconsistent and ***some things*** will fail silently (for example the Graphical interface will not be able to know which type object this is).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:483,integrability,interfac,interface,483,"> To my understanding, ClassDef required either for I/O and/or if class used with interpreter. Not only. If an object inherits from `TObject`, it gets the member functions `IsA` and `Class`. If the derived class does have a `ClassDef` those will returns the wrong answer (i.e `this is object is a TObject` rather than `this object is a derived class`). In practice this means that the behavior will be inconsistent and ***some things*** will fail silently (for example the Graphical interface will not be able to know which type object this is).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:483,interoperability,interfac,interface,483,"> To my understanding, ClassDef required either for I/O and/or if class used with interpreter. Not only. If an object inherits from `TObject`, it gets the member functions `IsA` and `Class`. If the derived class does have a `ClassDef` those will returns the wrong answer (i.e `this is object is a TObject` rather than `this object is a derived class`). In practice this means that the behavior will be inconsistent and ***some things*** will fail silently (for example the Graphical interface will not be able to know which type object this is).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:118,modifiability,inherit,inherits,118,"> To my understanding, ClassDef required either for I/O and/or if class used with interpreter. Not only. If an object inherits from `TObject`, it gets the member functions `IsA` and `Class`. If the derived class does have a `ClassDef` those will returns the wrong answer (i.e `this is object is a TObject` rather than `this object is a derived class`). In practice this means that the behavior will be inconsistent and ***some things*** will fail silently (for example the Graphical interface will not be able to know which type object this is).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:483,modifiability,interfac,interface,483,"> To my understanding, ClassDef required either for I/O and/or if class used with interpreter. Not only. If an object inherits from `TObject`, it gets the member functions `IsA` and `Class`. If the derived class does have a `ClassDef` those will returns the wrong answer (i.e `this is object is a TObject` rather than `this object is a derived class`). In practice this means that the behavior will be inconsistent and ***some things*** will fail silently (for example the Graphical interface will not be able to know which type object this is).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:52,performance,I/O,I/O,52,"> To my understanding, ClassDef required either for I/O and/or if class used with interpreter. Not only. If an object inherits from `TObject`, it gets the member functions `IsA` and `Class`. If the derived class does have a `ClassDef` those will returns the wrong answer (i.e `this is object is a TObject` rather than `this object is a derived class`). In practice this means that the behavior will be inconsistent and ***some things*** will fail silently (for example the Graphical interface will not be able to know which type object this is).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:212,reliability,doe,does,212,"> To my understanding, ClassDef required either for I/O and/or if class used with interpreter. Not only. If an object inherits from `TObject`, it gets the member functions `IsA` and `Class`. If the derived class does have a `ClassDef` those will returns the wrong answer (i.e `this is object is a TObject` rather than `this object is a derived class`). In practice this means that the behavior will be inconsistent and ***some things*** will fail silently (for example the Graphical interface will not be able to know which type object this is).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:356,reliability,pra,practice,356,"> To my understanding, ClassDef required either for I/O and/or if class used with interpreter. Not only. If an object inherits from `TObject`, it gets the member functions `IsA` and `Class`. If the derived class does have a `ClassDef` those will returns the wrong answer (i.e `this is object is a TObject` rather than `this object is a derived class`). In practice this means that the behavior will be inconsistent and ***some things*** will fail silently (for example the Graphical interface will not be able to know which type object this is).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:442,reliability,fail,fail,442,"> To my understanding, ClassDef required either for I/O and/or if class used with interpreter. Not only. If an object inherits from `TObject`, it gets the member functions `IsA` and `Class`. If the derived class does have a `ClassDef` those will returns the wrong answer (i.e `this is object is a TObject` rather than `this object is a derived class`). In practice this means that the behavior will be inconsistent and ***some things*** will fail silently (for example the Graphical interface will not be able to know which type object this is).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:8,testability,understand,understanding,8,"> To my understanding, ClassDef required either for I/O and/or if class used with interpreter. Not only. If an object inherits from `TObject`, it gets the member functions `IsA` and `Class`. If the derived class does have a `ClassDef` those will returns the wrong answer (i.e `this is object is a TObject` rather than `this object is a derived class`). In practice this means that the behavior will be inconsistent and ***some things*** will fail silently (for example the Graphical interface will not be able to know which type object this is).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:385,usability,behavi,behavior,385,"> To my understanding, ClassDef required either for I/O and/or if class used with interpreter. Not only. If an object inherits from `TObject`, it gets the member functions `IsA` and `Class`. If the derived class does have a `ClassDef` those will returns the wrong answer (i.e `this is object is a TObject` rather than `this object is a derived class`). In practice this means that the behavior will be inconsistent and ***some things*** will fail silently (for example the Graphical interface will not be able to know which type object this is).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:144,availability,error,error,144,"> Ah yes, I turned 0 to 1 while testing the other changes. Reverting back to 0 and keeping the rest of the diff as it is, I get again the usual error and no extra errors. I think those are a bug. I am seeing it in a completely different setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:163,availability,error,errors,163,"> Ah yes, I turned 0 to 1 while testing the other changes. Reverting back to 0 and keeping the rest of the diff as it is, I get again the usual error and no extra errors. I think those are a bug. I am seeing it in a completely different setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:144,performance,error,error,144,"> Ah yes, I turned 0 to 1 while testing the other changes. Reverting back to 0 and keeping the rest of the diff as it is, I get again the usual error and no extra errors. I think those are a bug. I am seeing it in a completely different setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:163,performance,error,errors,163,"> Ah yes, I turned 0 to 1 while testing the other changes. Reverting back to 0 and keeping the rest of the diff as it is, I get again the usual error and no extra errors. I think those are a bug. I am seeing it in a completely different setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:32,safety,test,testing,32,"> Ah yes, I turned 0 to 1 while testing the other changes. Reverting back to 0 and keeping the rest of the diff as it is, I get again the usual error and no extra errors. I think those are a bug. I am seeing it in a completely different setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:144,safety,error,error,144,"> Ah yes, I turned 0 to 1 while testing the other changes. Reverting back to 0 and keeping the rest of the diff as it is, I get again the usual error and no extra errors. I think those are a bug. I am seeing it in a completely different setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:163,safety,error,errors,163,"> Ah yes, I turned 0 to 1 while testing the other changes. Reverting back to 0 and keeping the rest of the diff as it is, I get again the usual error and no extra errors. I think those are a bug. I am seeing it in a completely different setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:216,safety,compl,completely,216,"> Ah yes, I turned 0 to 1 while testing the other changes. Reverting back to 0 and keeping the rest of the diff as it is, I get again the usual error and no extra errors. I think those are a bug. I am seeing it in a completely different setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:216,security,compl,completely,216,"> Ah yes, I turned 0 to 1 while testing the other changes. Reverting back to 0 and keeping the rest of the diff as it is, I get again the usual error and no extra errors. I think those are a bug. I am seeing it in a completely different setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:32,testability,test,testing,32,"> Ah yes, I turned 0 to 1 while testing the other changes. Reverting back to 0 and keeping the rest of the diff as it is, I get again the usual error and no extra errors. I think those are a bug. I am seeing it in a completely different setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:144,usability,error,error,144,"> Ah yes, I turned 0 to 1 while testing the other changes. Reverting back to 0 and keeping the rest of the diff as it is, I get again the usual error and no extra errors. I think those are a bug. I am seeing it in a completely different setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:163,usability,error,errors,163,"> Ah yes, I turned 0 to 1 while testing the other changes. Reverting back to 0 and keeping the rest of the diff as it is, I get again the usual error and no extra errors. I think those are a bug. I am seeing it in a completely different setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5,availability,Error,Error,5,"```. Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. ```. Problem is this line. That is `data member with index 0` here? `TClass::CreateRealData` tries interpret class member for which no information is provided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5,performance,Error,Error,5,"```. Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. ```. Problem is this line. That is `data member with index 0` here? `TClass::CreateRealData` tries interpret class member for which no information is provided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5,safety,Error,Error,5,"```. Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. ```. Problem is this line. That is `data member with index 0` here? `TClass::CreateRealData` tries interpret class member for which no information is provided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:5,usability,Error,Error,5,"```. Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >. ```. Problem is this line. That is `data member with index 0` here? `TClass::CreateRealData` tries interpret class member for which no information is provided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:206,energy efficiency,load,loads,206,"> I tried the route of ClassDefInline with poor results. . Rigth ... When not creating a dictionary, the information about data member, etc. has to come from the interpreter at run-time .. i.e. it needs to loads the definition .... So indeed if the goal is to keep this class declared only in a source file, this is not the solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:14,integrability,rout,route,14,"> I tried the route of ClassDefInline with poor results. . Rigth ... When not creating a dictionary, the information about data member, etc. has to come from the interpreter at run-time .. i.e. it needs to loads the definition .... So indeed if the goal is to keep this class declared only in a source file, this is not the solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:181,performance,time,time,181,"> I tried the route of ClassDefInline with poor results. . Rigth ... When not creating a dictionary, the information about data member, etc. has to come from the interpreter at run-time .. i.e. it needs to loads the definition .... So indeed if the goal is to keep this class declared only in a source file, this is not the solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:206,performance,load,loads,206,"> I tried the route of ClassDefInline with poor results. . Rigth ... When not creating a dictionary, the information about data member, etc. has to come from the interpreter at run-time .. i.e. it needs to loads the definition .... So indeed if the goal is to keep this class declared only in a source file, this is not the solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1909,availability,error,error,1909,"+ b/gui/browserv7/src/RBrowserData.cxx. @@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -67,9 +69,9 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3192,deployability,fail,failed,3192,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2039,energy efficiency,core,core,2039,"+. #include <algorithm>. #include <regex>. . @@ -67,9 +69,9 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3048,energy efficiency,core,core-execStatusBitsCheck,3048,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3139,energy efficiency,core,core-execStatusBitsCheck,3139,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1104,integrability,pub,public,1104,"OT/RBrowserData.hxx. index c7a68fd41d..8543e100a7 100644. --- a/gui/browserv7/inc/ROOT/RBrowserData.hxx. +++ b/gui/browserv7/inc/ROOT/RBrowserData.hxx. @@ -49,7 +49,7 @@ class RBrowserData {. std::vector<const Browsable::RItem *> fLastSortedItems; ///<! sorted child items, used in requests. std::string fLastSortMethod; ///<! last sort method. bool fLastSortReverse{false}; ///<! last request reverse order. - std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove. + RBrowserDataCleanup *fCleanupHandle; ///<! cleanup handle for RecursiveRemove. . void ResetLastRequestData(bool with_element);. . diff --git a/gui/browserv7/src/RBrowserData.cxx b/gui/browserv7/src/RBrowserData.cxx. index 99096f5deb..bb17487a27 100644. --- a/gui/browserv7/src/RBrowserData.cxx. +++ b/gui/browserv7/src/RBrowserData.cxx. @@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -67,9 +69,9 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1909,performance,error,error,1909,"+ b/gui/browserv7/src/RBrowserData.cxx. @@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -67,9 +69,9 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3192,reliability,fail,failed,3192,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1909,safety,error,error,1909,"+ b/gui/browserv7/src/RBrowserData.cxx. @@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -67,9 +69,9 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1922,safety,test,test,1922,"serv7/src/RBrowserData.cxx. @@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -67,9 +69,9 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Se",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1948,safety,TEST,TEST,1948,". @@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -67,9 +69,9 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes fo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3002,safety,TEST,TEST,3002,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3022,safety,Test,Test,3022,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3109,safety,test,tests,3109,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3170,safety,test,tests,3170,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3186,safety,test,tests,3186,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1922,testability,test,test,1922,"serv7/src/RBrowserData.cxx. @@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -67,9 +69,9 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Se",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1948,testability,TEST,TEST,1948,". @@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -67,9 +69,9 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes fo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2081,testability,verif,verify,2081,". @@ -67,9 +69,9 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:2929,testability,verif,verify,2929,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3002,testability,TEST,TEST,3002,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3022,testability,Test,Test,3022,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3109,testability,test,tests,3109,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3170,testability,test,tests,3170,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:3186,testability,test,tests,3186,". + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarned. 1548: Second verify all classes for any overlaps. 1548: (int) 0. 1548: . 1548: -- END TEST OUTPUT --. 1/1 Test #1548: roottest-root-core-execStatusBitsCheck ... Passed 24.47 sec. The following tests passed:. 	roottest-root-core-execStatusBitsCheck. 100% tests passed, 0 tests failed out of 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:1909,usability,error,error,1909,"+ b/gui/browserv7/src/RBrowserData.cxx. @@ -26,6 +26,8 @@. #include ""TBufferJSON.h"". #include ""TEnv.h"". . +#include ""TObject.h"". +. #include <algorithm>. #include <regex>. . @@ -67,9 +69,9 @@ public:. . RBrowserData::RBrowserData(). {. - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);. + fCleanupHandle = new RBrowserDataCleanup(*this);. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Add(fCleanupHandle);. }. . /////////////////////////////////////////////////////////////////////. @@ -79,7 +81,9 @@ RBrowserData::~RBrowserData(). {. // should be here because of fCleanupHandle destructor. R__LOCKGUARD(gROOTMutex);. - gROOT->GetListOfCleanups()->Remove(fCleanupHandle.get());. + gROOT->GetListOfCleanups()->Remove(fCleanupHandle);. +. + delete fCleanupHandle;. }. ```. i.e. moving from `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *` for the data member. This unfortunately (*sigh*) fixes the error in the test. ```. 1548: -- BEGIN TEST OUTPUT --. 1548: . 1548: Processing /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.C... 1548: First verify verbose output in the case of TStreamerElement. 1548: Bit 0 declared in TObject as kCanDelete. 1548: Bit 3 declared in TObject as kMustCleanup. 1548: Bit 4 declared in TObject as kIsReferenced. 1548: Bit 5 declared in TObject as kHasUUID. 1548: Bit 6 declared in TStreamerElement as kHasRange. 1548: Bit 6 declared in TObject as kCannotPick. 1548: Bit 8 declared in TObject as kNoContextMenu. 1548: Bit 9 declared in TStreamerElement as kCache. 1548: Bit 10 declared in TStreamerElement as kRepeat. 1548: Bit 11 declared in TStreamerElement as kRead. 1548: Bit 12 declared in TStreamerElement as kWrite. 1548: Bit 13 declared in TStreamerElement as kDoNotDelete. 1548: Bit 13 declared in TObject as kInvalidObject. 1548: Bit 14 declared in TStreamerElement as kWholeObject. 1548: Bit 21 declared in TStreamerElement as kWarn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:38,availability,error,error,38,> This unfortunately (sigh) fixes the error in the test. This is expected. I using such design pattern often. Seems to be problem is when creating `TClass` instance. . There is difference in handling for `T *` and `unique_ptr<T>` transient members. I can imagine that `TClass` tries to get full dictionary for the class when seeing member `unique_ptr<T>`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:38,performance,error,error,38,> This unfortunately (sigh) fixes the error in the test. This is expected. I using such design pattern often. Seems to be problem is when creating `TClass` instance. . There is difference in handling for `T *` and `unique_ptr<T>` transient members. I can imagine that `TClass` tries to get full dictionary for the class when seeing member `unique_ptr<T>`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:38,safety,error,error,38,> This unfortunately (sigh) fixes the error in the test. This is expected. I using such design pattern often. Seems to be problem is when creating `TClass` instance. . There is difference in handling for `T *` and `unique_ptr<T>` transient members. I can imagine that `TClass` tries to get full dictionary for the class when seeing member `unique_ptr<T>`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:51,safety,test,test,51,> This unfortunately (sigh) fixes the error in the test. This is expected. I using such design pattern often. Seems to be problem is when creating `TClass` instance. . There is difference in handling for `T *` and `unique_ptr<T>` transient members. I can imagine that `TClass` tries to get full dictionary for the class when seeing member `unique_ptr<T>`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:51,testability,test,test,51,> This unfortunately (sigh) fixes the error in the test. This is expected. I using such design pattern often. Seems to be problem is when creating `TClass` instance. . There is difference in handling for `T *` and `unique_ptr<T>` transient members. I can imagine that `TClass` tries to get full dictionary for the class when seeing member `unique_ptr<T>`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:38,usability,error,error,38,> This unfortunately (sigh) fixes the error in the test. This is expected. I using such design pattern often. Seems to be problem is when creating `TClass` instance. . There is difference in handling for `T *` and `unique_ptr<T>` transient members. I can imagine that `TClass` tries to get full dictionary for the class when seeing member `unique_ptr<T>`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:38,availability,error,error,38,> This unfortunately (sigh) fixes the error in the test. This indicates a bug in the code (that is supposed to make support for unique_ptr 'transparent').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:38,performance,error,error,38,> This unfortunately (sigh) fixes the error in the test. This indicates a bug in the code (that is supposed to make support for unique_ptr 'transparent').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:38,safety,error,error,38,> This unfortunately (sigh) fixes the error in the test. This indicates a bug in the code (that is supposed to make support for unique_ptr 'transparent').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:51,safety,test,test,51,> This unfortunately (sigh) fixes the error in the test. This indicates a bug in the code (that is supposed to make support for unique_ptr 'transparent').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:51,testability,test,test,51,> This unfortunately (sigh) fixes the error in the test. This indicates a bug in the code (that is supposed to make support for unique_ptr 'transparent').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:38,usability,error,error,38,> This unfortunately (sigh) fixes the error in the test. This indicates a bug in the code (that is supposed to make support for unique_ptr 'transparent').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:62,usability,indicat,indicates,62,> This unfortunately (sigh) fixes the error in the test. This indicates a bug in the code (that is supposed to make support for unique_ptr 'transparent').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:116,usability,support,support,116,> This unfortunately (sigh) fixes the error in the test. This indicates a bug in the code (that is supposed to make support for unique_ptr 'transparent').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:10,safety,reme,remember,10,"@pcanal I remember that you wanted TClass to InspectMembers unique_ptr and determine its data layout also for transient members, to make sure ""the information is complete"" or something. Here it seems that you would like to have this behavior changed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:162,safety,compl,complete,162,"@pcanal I remember that you wanted TClass to InspectMembers unique_ptr and determine its data layout also for transient members, to make sure ""the information is complete"" or something. Here it seems that you would like to have this behavior changed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:162,security,compl,complete,162,"@pcanal I remember that you wanted TClass to InspectMembers unique_ptr and determine its data layout also for transient members, to make sure ""the information is complete"" or something. Here it seems that you would like to have this behavior changed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:233,usability,behavi,behavior,233,"@pcanal I remember that you wanted TClass to InspectMembers unique_ptr and determine its data layout also for transient members, to make sure ""the information is complete"" or something. Here it seems that you would like to have this behavior changed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:151,energy efficiency,current,current,151,"The suggestion of having a header in `res/` doesn't work unfortunately because the payload code expects to `#include` everything. So we stick with the current change for now, to unblock the C++17 PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:44,reliability,doe,doesn,44,"The suggestion of having a header in `res/` doesn't work unfortunately because the payload code expects to `#include` everything. So we stick with the current change for now, to unblock the C++17 PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:23,energy efficiency,current,current,23,"> So we stick with the current change for now, to unblock the C++17 PR? Almost. The class needs to be moved into the `ROOT::Experimental::Internal::` to document it as private to ROOT's implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:153,usability,document,document,153,"> So we stick with the current change for now, to unblock the C++17 PR? Almost. The class needs to be moved into the `ROOT::Experimental::Internal::` to document it as private to ROOT's implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:275,availability,error,errors,275,"> Here it seems that you would like to have this behavior changed? It seems more complicated than that ... The underlying problem needs to be investigated. Once this PR is merged, an issue will be open with words along the line of 'revert this commit, run this and see these errors messages`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:282,integrability,messag,messages,282,"> Here it seems that you would like to have this behavior changed? It seems more complicated than that ... The underlying problem needs to be investigated. Once this PR is merged, an issue will be open with words along the line of 'revert this commit, run this and see these errors messages`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:282,interoperability,messag,messages,282,"> Here it seems that you would like to have this behavior changed? It seems more complicated than that ... The underlying problem needs to be investigated. Once this PR is merged, an issue will be open with words along the line of 'revert this commit, run this and see these errors messages`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:275,performance,error,errors,275,"> Here it seems that you would like to have this behavior changed? It seems more complicated than that ... The underlying problem needs to be investigated. Once this PR is merged, an issue will be open with words along the line of 'revert this commit, run this and see these errors messages`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:81,safety,compl,complicated,81,"> Here it seems that you would like to have this behavior changed? It seems more complicated than that ... The underlying problem needs to be investigated. Once this PR is merged, an issue will be open with words along the line of 'revert this commit, run this and see these errors messages`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:275,safety,error,errors,275,"> Here it seems that you would like to have this behavior changed? It seems more complicated than that ... The underlying problem needs to be investigated. Once this PR is merged, an issue will be open with words along the line of 'revert this commit, run this and see these errors messages`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:81,security,compl,complicated,81,"> Here it seems that you would like to have this behavior changed? It seems more complicated than that ... The underlying problem needs to be investigated. Once this PR is merged, an issue will be open with words along the line of 'revert this commit, run this and see these errors messages`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:49,usability,behavi,behavior,49,"> Here it seems that you would like to have this behavior changed? It seems more complicated than that ... The underlying problem needs to be investigated. Once this PR is merged, an issue will be open with words along the line of 'revert this commit, run this and see these errors messages`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:275,usability,error,errors,275,"> Here it seems that you would like to have this behavior changed? It seems more complicated than that ... The underlying problem needs to be investigated. Once this PR is merged, an issue will be open with words along the line of 'revert this commit, run this and see these errors messages`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:25,energy efficiency,current,current,25,"> > So we stick with the current change for now, to unblock the C++17 PR? > . > Almost. The class needs to be moved into the `ROOT::Experimental::Internal::` to document it as private to ROOT's implementation. Ok, so basically doing what @vepadulano had in https://github.com/root-project/root/pull/13257... Will do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:161,usability,document,document,161,"> > So we stick with the current change for now, to unblock the C++17 PR? > . > Almost. The class needs to be moved into the `ROOT::Experimental::Internal::` to document it as private to ROOT's implementation. Ok, so basically doing what @vepadulano had in https://github.com/root-project/root/pull/13257... Will do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:11,deployability,build,build,11,@phsft-bot build just on ubuntu2204/nortcxxmod with flags -DCMAKE_CXX_STANDARD=17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod with flags -DCMAKE_CXX_STANDARD=17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod with flags -DCMAKE_CXX_STANDARD=17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13134:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod with flags -DCMAKE_CXX_STANDARD=17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13134
https://github.com/root-project/root/pull/13138:67,interoperability,format,format,67,"BTW, there is quite a lot of coding violations according to `clang-format`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13138
https://github.com/root-project/root/pull/13138:158,deployability,build,build,158,"clang-format always complain about JSROOT - because it is not formatted as clang-format expects. I do not think it is possible or feasible. For instance, `js/build/jsroot.js` is automatically generated and I have no control over it formatting. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13138
https://github.com/root-project/root/pull/13138:178,deployability,automat,automatically,178,"clang-format always complain about JSROOT - because it is not formatted as clang-format expects. I do not think it is possible or feasible. For instance, `js/build/jsroot.js` is automatically generated and I have no control over it formatting. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13138
https://github.com/root-project/root/pull/13138:6,interoperability,format,format,6,"clang-format always complain about JSROOT - because it is not formatted as clang-format expects. I do not think it is possible or feasible. For instance, `js/build/jsroot.js` is automatically generated and I have no control over it formatting. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13138
https://github.com/root-project/root/pull/13138:62,interoperability,format,formatted,62,"clang-format always complain about JSROOT - because it is not formatted as clang-format expects. I do not think it is possible or feasible. For instance, `js/build/jsroot.js` is automatically generated and I have no control over it formatting. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13138
https://github.com/root-project/root/pull/13138:81,interoperability,format,format,81,"clang-format always complain about JSROOT - because it is not formatted as clang-format expects. I do not think it is possible or feasible. For instance, `js/build/jsroot.js` is automatically generated and I have no control over it formatting. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13138
https://github.com/root-project/root/pull/13138:232,interoperability,format,formatting,232,"clang-format always complain about JSROOT - because it is not formatted as clang-format expects. I do not think it is possible or feasible. For instance, `js/build/jsroot.js` is automatically generated and I have no control over it formatting. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13138
https://github.com/root-project/root/pull/13138:20,safety,compl,complain,20,"clang-format always complain about JSROOT - because it is not formatted as clang-format expects. I do not think it is possible or feasible. For instance, `js/build/jsroot.js` is automatically generated and I have no control over it formatting. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13138
https://github.com/root-project/root/pull/13138:20,security,compl,complain,20,"clang-format always complain about JSROOT - because it is not formatted as clang-format expects. I do not think it is possible or feasible. For instance, `js/build/jsroot.js` is automatically generated and I have no control over it formatting. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13138
https://github.com/root-project/root/pull/13138:216,security,control,control,216,"clang-format always complain about JSROOT - because it is not formatted as clang-format expects. I do not think it is possible or feasible. For instance, `js/build/jsroot.js` is automatically generated and I have no control over it formatting. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13138
https://github.com/root-project/root/pull/13138:178,testability,automat,automatically,178,"clang-format always complain about JSROOT - because it is not formatted as clang-format expects. I do not think it is possible or feasible. For instance, `js/build/jsroot.js` is automatically generated and I have no control over it formatting. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13138
https://github.com/root-project/root/pull/13138:216,testability,control,control,216,"clang-format always complain about JSROOT - because it is not formatted as clang-format expects. I do not think it is possible or feasible. For instance, `js/build/jsroot.js` is automatically generated and I have no control over it formatting. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13138
https://github.com/root-project/root/pull/13139:11,deployability,build,build,11,"@phsft-bot build just on mac11/cxx17, mac11arm/cxx17, mac12/cxx17, mac12arm/cxx17, mac13/cxx20, mac13arm/cxx20",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:160,availability,servic,services,160,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:365,availability,servic,services,365,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:631,availability,servic,services,631,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:895,availability,servic,services,895,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:2,deployability,Build,Build,2,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:8,deployability,fail,failed,8,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:84,deployability,build,build,84,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:118,deployability,build,build,118,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:160,deployability,servic,services,160,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:212,deployability,build,build,212,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:241,deployability,Fail,Failing,241,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:365,deployability,servic,services,365,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:417,deployability,build,build,417,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:631,deployability,servic,services,631,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:683,deployability,build,build,683,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:895,deployability,servic,services,895,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:947,deployability,build,build,947,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:1175,deployability,patch,patch,1175,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:160,integrability,servic,services,160,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:365,integrability,servic,services,365,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:631,integrability,servic,services,631,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:895,integrability,servic,services,895,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:160,modifiability,servic,services,160,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:365,modifiability,servic,services,365,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:631,modifiability,servic,services,631,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:895,modifiability,servic,services,895,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:8,reliability,fail,failed,8,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:241,reliability,Fail,Failing,241,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:249,safety,test,tests,249,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:430,safety,test,testReport,430,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:696,safety,test,testReport,696,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:960,safety,test,testReport,960,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:1175,safety,patch,patch,1175,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:1175,security,patch,patch,1175,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:249,testability,test,tests,249,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:430,testability,test,testReport,430,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:696,testability,test,testReport,696,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:960,testability,test,testReport,960,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:69,usability,User,Users,69,> Build failed on mac13/cxx20. Running on macphsft21.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/console). > ### Failing tests:. > . > * [projectroot.roottest.python.distrdf.common.roottest_python_distrdf_common_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/common/roottest_python_distrdf_common_test_all/). > . > * [projectroot.roottest.python.distrdf.dask.roottest_python_distrdf_dask_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/). > . > * [projectroot.roottest.python.distrdf.spark.roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/178636/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/). I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:122,deployability,patch,patch,122,"> I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization. Ok, not sure I fully understand what you propose... Can you add this change before the final ""fixup"" commit? You can push to the PR, right, or do I need to enable this somehow?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:122,safety,patch,patch,122,"> I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization. Ok, not sure I fully understand what you propose... Can you add this change before the final ""fixup"" commit? You can push to the PR, right, or do I need to enable this somehow?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:122,security,patch,patch,122,"> I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization. Ok, not sure I fully understand what you propose... Can you add this change before the final ""fixup"" commit? You can push to the PR, right, or do I need to enable this somehow?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:185,testability,understand,understand,185,"> I believe we need to put a `cling::Interpreter::PushTransactionRAII` in `cling::ParseProto::Parse` because with the new patch we might trigger a deserialization. Ok, not sure I fully understand what you propose... Can you add this change before the final ""fixup"" commit? You can push to the PR, right, or do I need to enable this somehow?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:11,deployability,build,build,11,"@phsft-bot build just on mac11/cxx17, mac11arm/cxx17, mac12/cxx17, mac12arm/cxx17, mac13/cxx20, mac13arm/cxx20 with flags -DCTEST_TEST_EXCLUDE_NONE=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13139:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=OFF -DCTEST_TEST_EXCLUDE_NONE=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13139
https://github.com/root-project/root/pull/13140:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13140
https://github.com/root-project/root/pull/13143:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13143
https://github.com/root-project/root/pull/13143:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13143
https://github.com/root-project/root/pull/13144:83,deployability,manag,managed,83,"- Applied fixes suggetsed by @linev (thanks!). - The Marker size was not properlly managed. The mapping of the smallest marker size to the real marker was always zero. Now we have the lower and higher marker size as data member. Before it was only ""scale"". try thise example:. ```. void scatter4(). {. const int n = 5;. double x[n] = {1,2,3,4,5};. double y[n] = {1,2,3,4,5};. double c[n] = {1,2,3,4,5};. double s[n] = {1,2,3,4,5};. int ci[n] = {2,3,4,5,6};. gStyle->SetPalette(n,ci);. TScatter * s4 = new TScatter(n, x, y, c, s);. s4->SetMarkerStyle(kFullCircle);. s4->Draw(""AP"");. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13144
https://github.com/root-project/root/pull/13144:249,deployability,scale,scale,249,"- Applied fixes suggetsed by @linev (thanks!). - The Marker size was not properlly managed. The mapping of the smallest marker size to the real marker was always zero. Now we have the lower and higher marker size as data member. Before it was only ""scale"". try thise example:. ```. void scatter4(). {. const int n = 5;. double x[n] = {1,2,3,4,5};. double y[n] = {1,2,3,4,5};. double c[n] = {1,2,3,4,5};. double s[n] = {1,2,3,4,5};. int ci[n] = {2,3,4,5,6};. gStyle->SetPalette(n,ci);. TScatter * s4 = new TScatter(n, x, y, c, s);. s4->SetMarkerStyle(kFullCircle);. s4->Draw(""AP"");. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13144
https://github.com/root-project/root/pull/13144:83,energy efficiency,manag,managed,83,"- Applied fixes suggetsed by @linev (thanks!). - The Marker size was not properlly managed. The mapping of the smallest marker size to the real marker was always zero. Now we have the lower and higher marker size as data member. Before it was only ""scale"". try thise example:. ```. void scatter4(). {. const int n = 5;. double x[n] = {1,2,3,4,5};. double y[n] = {1,2,3,4,5};. double c[n] = {1,2,3,4,5};. double s[n] = {1,2,3,4,5};. int ci[n] = {2,3,4,5,6};. gStyle->SetPalette(n,ci);. TScatter * s4 = new TScatter(n, x, y, c, s);. s4->SetMarkerStyle(kFullCircle);. s4->Draw(""AP"");. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13144
https://github.com/root-project/root/pull/13144:249,energy efficiency,scale,scale,249,"- Applied fixes suggetsed by @linev (thanks!). - The Marker size was not properlly managed. The mapping of the smallest marker size to the real marker was always zero. Now we have the lower and higher marker size as data member. Before it was only ""scale"". try thise example:. ```. void scatter4(). {. const int n = 5;. double x[n] = {1,2,3,4,5};. double y[n] = {1,2,3,4,5};. double c[n] = {1,2,3,4,5};. double s[n] = {1,2,3,4,5};. int ci[n] = {2,3,4,5,6};. gStyle->SetPalette(n,ci);. TScatter * s4 = new TScatter(n, x, y, c, s);. s4->SetMarkerStyle(kFullCircle);. s4->Draw(""AP"");. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13144
https://github.com/root-project/root/pull/13144:569,energy efficiency,Draw,Draw,569,"- Applied fixes suggetsed by @linev (thanks!). - The Marker size was not properlly managed. The mapping of the smallest marker size to the real marker was always zero. Now we have the lower and higher marker size as data member. Before it was only ""scale"". try thise example:. ```. void scatter4(). {. const int n = 5;. double x[n] = {1,2,3,4,5};. double y[n] = {1,2,3,4,5};. double c[n] = {1,2,3,4,5};. double s[n] = {1,2,3,4,5};. int ci[n] = {2,3,4,5,6};. gStyle->SetPalette(n,ci);. TScatter * s4 = new TScatter(n, x, y, c, s);. s4->SetMarkerStyle(kFullCircle);. s4->Draw(""AP"");. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13144
https://github.com/root-project/root/pull/13144:249,modifiability,scal,scale,249,"- Applied fixes suggetsed by @linev (thanks!). - The Marker size was not properlly managed. The mapping of the smallest marker size to the real marker was always zero. Now we have the lower and higher marker size as data member. Before it was only ""scale"". try thise example:. ```. void scatter4(). {. const int n = 5;. double x[n] = {1,2,3,4,5};. double y[n] = {1,2,3,4,5};. double c[n] = {1,2,3,4,5};. double s[n] = {1,2,3,4,5};. int ci[n] = {2,3,4,5,6};. gStyle->SetPalette(n,ci);. TScatter * s4 = new TScatter(n, x, y, c, s);. s4->SetMarkerStyle(kFullCircle);. s4->Draw(""AP"");. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13144
https://github.com/root-project/root/pull/13144:249,performance,scale,scale,249,"- Applied fixes suggetsed by @linev (thanks!). - The Marker size was not properlly managed. The mapping of the smallest marker size to the real marker was always zero. Now we have the lower and higher marker size as data member. Before it was only ""scale"". try thise example:. ```. void scatter4(). {. const int n = 5;. double x[n] = {1,2,3,4,5};. double y[n] = {1,2,3,4,5};. double c[n] = {1,2,3,4,5};. double s[n] = {1,2,3,4,5};. int ci[n] = {2,3,4,5,6};. gStyle->SetPalette(n,ci);. TScatter * s4 = new TScatter(n, x, y, c, s);. s4->SetMarkerStyle(kFullCircle);. s4->Draw(""AP"");. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13144
https://github.com/root-project/root/pull/13144:83,safety,manag,managed,83,"- Applied fixes suggetsed by @linev (thanks!). - The Marker size was not properlly managed. The mapping of the smallest marker size to the real marker was always zero. Now we have the lower and higher marker size as data member. Before it was only ""scale"". try thise example:. ```. void scatter4(). {. const int n = 5;. double x[n] = {1,2,3,4,5};. double y[n] = {1,2,3,4,5};. double c[n] = {1,2,3,4,5};. double s[n] = {1,2,3,4,5};. int ci[n] = {2,3,4,5,6};. gStyle->SetPalette(n,ci);. TScatter * s4 = new TScatter(n, x, y, c, s);. s4->SetMarkerStyle(kFullCircle);. s4->Draw(""AP"");. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13144
https://github.com/root-project/root/pull/13145:298,deployability,log,logically,298,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:132,safety,Test,TestBit,132,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:187,safety,test,test,187,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:244,safety,Test,TestBit,244,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:270,safety,Test,TestBit,270,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:298,safety,log,logically,298,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:331,safety,Test,TestBits,331,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:376,safety,Test,TestBits,376,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:298,security,log,logically,298,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:132,testability,Test,TestBit,132,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:187,testability,test,test,187,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:244,testability,Test,TestBit,244,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:270,testability,Test,TestBit,270,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:298,testability,log,logically,298,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:331,testability,Test,TestBits,331,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13145:376,testability,Test,TestBits,376,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913. ```. if (TestBit(kDoNotProcess|kAddressSet)) . ```. It mixtures test of bits from different enum. One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`. Also logically one could better call `TestBits` and cast to UInt_t like . ```. if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) . ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13145
https://github.com/root-project/root/pull/13146:206,deployability,modul,module,206,"In case you like the idea, the result is the following:. ![image](https://github.com/root-project/root/assets/10544/7f5ffb6e-ad60-4e10-9de0-2bde1348173a). I.e. you will have a time range associated to each module loading and you should be able to correlate them with the actual memory increase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:213,energy efficiency,load,loading,213,"In case you like the idea, the result is the following:. ![image](https://github.com/root-project/root/assets/10544/7f5ffb6e-ad60-4e10-9de0-2bde1348173a). I.e. you will have a time range associated to each module loading and you should be able to correlate them with the actual memory increase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:206,modifiability,modul,module,206,"In case you like the idea, the result is the following:. ![image](https://github.com/root-project/root/assets/10544/7f5ffb6e-ad60-4e10-9de0-2bde1348173a). I.e. you will have a time range associated to each module loading and you should be able to correlate them with the actual memory increase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:176,performance,time,time,176,"In case you like the idea, the result is the following:. ![image](https://github.com/root-project/root/assets/10544/7f5ffb6e-ad60-4e10-9de0-2bde1348173a). I.e. you will have a time range associated to each module loading and you should be able to correlate them with the actual memory increase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:213,performance,load,loading,213,"In case you like the idea, the result is the following:. ![image](https://github.com/root-project/root/assets/10544/7f5ffb6e-ad60-4e10-9de0-2bde1348173a). I.e. you will have a time range associated to each module loading and you should be able to correlate them with the actual memory increase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:278,performance,memor,memory,278,"In case you like the idea, the result is the following:. ![image](https://github.com/root-project/root/assets/10544/7f5ffb6e-ad60-4e10-9de0-2bde1348173a). I.e. you will have a time range associated to each module loading and you should be able to correlate them with the actual memory increase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:206,safety,modul,module,206,"In case you like the idea, the result is the following:. ![image](https://github.com/root-project/root/assets/10544/7f5ffb6e-ad60-4e10-9de0-2bde1348173a). I.e. you will have a time range associated to each module loading and you should be able to correlate them with the actual memory increase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:278,usability,memor,memory,278,"In case you like the idea, the result is the following:. ![image](https://github.com/root-project/root/assets/10544/7f5ffb6e-ad60-4e10-9de0-2bde1348173a). I.e. you will have a time range associated to each module loading and you should be able to correlate them with the actual memory increase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:106,integrability,compon,components,106,It's not clear to me what the actually issue with Jenkins is. It looks like a fluke in one of the jenkins components. Could you restart the test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:106,interoperability,compon,components,106,It's not clear to me what the actually issue with Jenkins is. It looks like a fluke in one of the jenkins components. Could you restart the test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:106,modifiability,compon,components,106,It's not clear to me what the actually issue with Jenkins is. It looks like a fluke in one of the jenkins components. Could you restart the test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:140,safety,test,test,140,It's not clear to me what the actually issue with Jenkins is. It looks like a fluke in one of the jenkins components. Could you restart the test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:140,testability,test,test,140,It's not clear to me what the actually issue with Jenkins is. It looks like a fluke in one of the jenkins components. Could you restart the test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:9,usability,clear,clear,9,It's not clear to me what the actually issue with Jenkins is. It looks like a fluke in one of the jenkins components. Could you restart the test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:11,deployability,build,build,11,@phsft-bot build just on mac11/noimt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:492,deployability,API,API,492,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:524,deployability,log,logging,524,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:600,deployability,version,version,600,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:145,integrability,wrap,wrapping,145,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:156,integrability,coupl,couple,156,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:282,integrability,wrap,wrapper,282,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:492,integrability,API,API,492,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:600,integrability,version,version,600,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:282,interoperability,wrapper,wrapper,282,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:492,interoperability,API,API,492,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:156,modifiability,coupl,couple,156,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:600,modifiability,version,version,600,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:273,safety,compl,complete,273,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:524,safety,log,logging,524,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:273,security,compl,complete,273,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:416,security,Sign,Signpost,416,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:524,security,log,logging,524,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:156,testability,coupl,couple,156,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:524,testability,log,logging,524,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:510,usability,user,user,510,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:500,deployability,API,API,500,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:532,deployability,log,logging,532,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:608,deployability,version,version,608,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:147,integrability,wrap,wrapping,147,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:158,integrability,coupl,couple,158,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:290,integrability,wrap,wrapper,290,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:500,integrability,API,API,500,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:608,integrability,version,version,608,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:290,interoperability,wrapper,wrapper,290,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:500,interoperability,API,API,500,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:158,modifiability,coupl,couple,158,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:608,modifiability,version,version,608,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:281,safety,compl,complete,281,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:532,safety,log,logging,532,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:281,security,compl,complete,281,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:424,security,Sign,Signpost,424,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:532,security,log,logging,532,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:158,testability,coupl,couple,158,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:532,testability,log,logging,532,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:518,usability,user,user,518,"> I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. > . > On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT? Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:293,modifiability,pac,package,293,"> Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT. Ok, that will take a bit though, since I have other priorities right now. Shall I just close this PR and reopen a different one once I have the development done? Would you be ok if it were an external package?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:179,usability,close,close,179,"> Yes, that would make sense to me. We can add it as part of the foundation folder in ROOT. Ok, that will take a bit though, since I have other priorities right now. Shall I just close this PR and reopen a different one once I have the development done? Would you be ok if it were an external package?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:41,deployability,depend,depends,41,Whether an external package is an option depends on significance :-) What does O2 do with this on Linux?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:41,integrability,depend,depends,41,Whether an external package is an option depends on significance :-) What does O2 do with this on Linux?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:20,modifiability,pac,package,20,Whether an external package is an option depends on significance :-) What does O2 do with this on Linux?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:41,modifiability,depend,depends,41,Whether an external package is an option depends on significance :-) What does O2 do with this on Linux?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:74,reliability,doe,does,74,Whether an external package is an option depends on significance :-) What does O2 do with this on Linux?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:41,safety,depend,depends,41,Whether an external package is an option depends on significance :-) What does O2 do with this on Linux?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:52,security,sign,significance,52,Whether an external package is an option depends on significance :-) What does O2 do with this on Linux?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:41,testability,depend,depends,41,Whether an external package is an option depends on significance :-) What does O2 do with this on Linux?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:48,deployability,log,logging,48,"There is a hook which allows you to define your logging function, and it then uses it to print a nested output log, where the nesting level depends on how many intervals you have in flight. See the description here: https://github.com/AliceO2Group/AliceO2/pull/11645",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:111,deployability,log,log,111,"There is a hook which allows you to define your logging function, and it then uses it to print a nested output log, where the nesting level depends on how many intervals you have in flight. See the description here: https://github.com/AliceO2Group/AliceO2/pull/11645",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:140,deployability,depend,depends,140,"There is a hook which allows you to define your logging function, and it then uses it to print a nested output log, where the nesting level depends on how many intervals you have in flight. See the description here: https://github.com/AliceO2Group/AliceO2/pull/11645",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:140,integrability,depend,depends,140,"There is a hook which allows you to define your logging function, and it then uses it to print a nested output log, where the nesting level depends on how many intervals you have in flight. See the description here: https://github.com/AliceO2Group/AliceO2/pull/11645",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:140,modifiability,depend,depends,140,"There is a hook which allows you to define your logging function, and it then uses it to print a nested output log, where the nesting level depends on how many intervals you have in flight. See the description here: https://github.com/AliceO2Group/AliceO2/pull/11645",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:48,safety,log,logging,48,"There is a hook which allows you to define your logging function, and it then uses it to print a nested output log, where the nesting level depends on how many intervals you have in flight. See the description here: https://github.com/AliceO2Group/AliceO2/pull/11645",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:111,safety,log,log,111,"There is a hook which allows you to define your logging function, and it then uses it to print a nested output log, where the nesting level depends on how many intervals you have in flight. See the description here: https://github.com/AliceO2Group/AliceO2/pull/11645",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:140,safety,depend,depends,140,"There is a hook which allows you to define your logging function, and it then uses it to print a nested output log, where the nesting level depends on how many intervals you have in flight. See the description here: https://github.com/AliceO2Group/AliceO2/pull/11645",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:48,security,log,logging,48,"There is a hook which allows you to define your logging function, and it then uses it to print a nested output log, where the nesting level depends on how many intervals you have in flight. See the description here: https://github.com/AliceO2Group/AliceO2/pull/11645",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:111,security,log,log,111,"There is a hook which allows you to define your logging function, and it then uses it to print a nested output log, where the nesting level depends on how many intervals you have in flight. See the description here: https://github.com/AliceO2Group/AliceO2/pull/11645",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:11,testability,hook,hook,11,"There is a hook which allows you to define your logging function, and it then uses it to print a nested output log, where the nesting level depends on how many intervals you have in flight. See the description here: https://github.com/AliceO2Group/AliceO2/pull/11645",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:48,testability,log,logging,48,"There is a hook which allows you to define your logging function, and it then uses it to print a nested output log, where the nesting level depends on how many intervals you have in flight. See the description here: https://github.com/AliceO2Group/AliceO2/pull/11645",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:111,testability,log,log,111,"There is a hook which allows you to define your logging function, and it then uses it to print a nested output log, where the nesting level depends on how many intervals you have in flight. See the description here: https://github.com/AliceO2Group/AliceO2/pull/11645",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:140,testability,depend,depends,140,"There is a hook which allows you to define your logging function, and it then uses it to print a nested output log, where the nesting level depends on how many intervals you have in flight. See the description here: https://github.com/AliceO2Group/AliceO2/pull/11645",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:182,availability,ping,ping,182,"Ah I was hoping for something like `in valgrind, you can see...` or similar :-) OK we'll discuss, many people are on vacation these days so please give us a couple of weeks! Can you ping me mid Sept if you haven't heard back? And thanks for sharing this proposal!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:157,integrability,coupl,couple,157,"Ah I was hoping for something like `in valgrind, you can see...` or similar :-) OK we'll discuss, many people are on vacation these days so please give us a couple of weeks! Can you ping me mid Sept if you haven't heard back? And thanks for sharing this proposal!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:157,modifiability,coupl,couple,157,"Ah I was hoping for something like `in valgrind, you can see...` or similar :-) OK we'll discuss, many people are on vacation these days so please give us a couple of weeks! Can you ping me mid Sept if you haven't heard back? And thanks for sharing this proposal!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:157,testability,coupl,couple,157,"Ah I was hoping for something like `in valgrind, you can see...` or similar :-) OK we'll discuss, many people are on vacation these days so please give us a couple of weeks! Can you ping me mid Sept if you haven't heard back? And thanks for sharing this proposal!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13146:51,performance,time,time,51,"sounds good. I can prepare something more by then, time permitting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13146
https://github.com/root-project/root/pull/13149:27,deployability,log,logic,27,"I had missed a case in the logic of the new warning, let's try again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13149
https://github.com/root-project/root/pull/13149:27,safety,log,logic,27,"I had missed a case in the logic of the new warning, let's try again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13149
https://github.com/root-project/root/pull/13149:27,security,log,logic,27,"I had missed a case in the logic of the new warning, let's try again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13149
https://github.com/root-project/root/pull/13149:27,testability,log,logic,27,"I had missed a case in the logic of the new warning, let's try again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13149
https://github.com/root-project/root/pull/13149:27,reliability,doe,does,27,"> Template name `Notifier` does not convey that the only type we actually expect to be passed is TTree:. I suppose this is now true. Originally this was intended to be use for any other (user developed) similar cases. Since we would rather deprecate this Notify feature, I agree this is fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13149
https://github.com/root-project/root/pull/13149:187,usability,user,user,187,"> Template name `Notifier` does not convey that the only type we actually expect to be passed is TTree:. I suppose this is now true. Originally this was intended to be use for any other (user developed) similar cases. Since we would rather deprecate this Notify feature, I agree this is fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13149
https://github.com/root-project/root/pull/13150:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13150
https://github.com/root-project/root/pull/13150:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13150
https://github.com/root-project/root/pull/13150:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13150
https://github.com/root-project/root/pull/13151:45,usability,help,help,45,"Seems to work now, PR not needed (and didn't help either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13151
https://github.com/root-project/root/pull/13152:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13152
https://github.com/root-project/root/pull/13152:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13152
https://github.com/root-project/root/issues/13157:58,interoperability,format,formatting,58,"@couet @DarkoVeberic the examples are just missing proper formatting, you can tell from the _italic_ where the `*` symbols are supposed to be displayed. The code in the examples should be escaped.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13157
https://github.com/root-project/root/issues/13157:395,integrability,sub,submit,395,Here's a PR that fixes the formatting issue: https://github.com/root-project/root/pull/13166. I think the docs were written for a documentation system predating doxygen that was formatting text as code if it was preceded by 4 spaces. Now we use `~~~{.cpp}` or similar. @DarkoVeberic thank you for reporting and please do report other problems with the docs should you find them (or feel free to submit pull requests to fix these kind of things!).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13157
https://github.com/root-project/root/issues/13157:27,interoperability,format,formatting,27,Here's a PR that fixes the formatting issue: https://github.com/root-project/root/pull/13166. I think the docs were written for a documentation system predating doxygen that was formatting text as code if it was preceded by 4 spaces. Now we use `~~~{.cpp}` or similar. @DarkoVeberic thank you for reporting and please do report other problems with the docs should you find them (or feel free to submit pull requests to fix these kind of things!).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13157
https://github.com/root-project/root/issues/13157:178,interoperability,format,formatting,178,Here's a PR that fixes the formatting issue: https://github.com/root-project/root/pull/13166. I think the docs were written for a documentation system predating doxygen that was formatting text as code if it was preceded by 4 spaces. Now we use `~~~{.cpp}` or similar. @DarkoVeberic thank you for reporting and please do report other problems with the docs should you find them (or feel free to submit pull requests to fix these kind of things!).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13157
https://github.com/root-project/root/issues/13157:130,usability,document,documentation,130,Here's a PR that fixes the formatting issue: https://github.com/root-project/root/pull/13166. I think the docs were written for a documentation system predating doxygen that was formatting text as code if it was preceded by 4 spaces. Now we use `~~~{.cpp}` or similar. @DarkoVeberic thank you for reporting and please do report other problems with the docs should you find them (or feel free to submit pull requests to fix these kind of things!).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13157
https://github.com/root-project/root/pull/13160:222,interoperability,incompatib,incompatible,222,"I only took a quick look but I see at least one major difference between the old and the new implementation: the new one throws if a directory cannot be opened. I agree that in principle that's better, but it's a backward-incompatible change. (EDIT: just raising a warning flag about that fact. I'm not saying it's necessarily a deal-breaker).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:706,availability,sli,slight,706,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:1375,availability,error,error,1375,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:143,deployability,depend,depend,143,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:526,deployability,log,logic,526,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:938,deployability,log,logic,938,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:143,integrability,depend,depend,143,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:1266,integrability,sub,subjectively,1266,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:143,modifiability,depend,depend,143,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:1375,performance,error,error,1375,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:706,reliability,sli,slight,706,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:789,reliability,doe,doesn,789,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:143,safety,depend,depend,143,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:396,safety,test,test,396,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:456,safety,safe,safety,456,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:526,safety,log,logic,526,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:938,safety,log,logic,938,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:1375,safety,error,error,1375,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:526,security,log,logic,526,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:938,security,log,logic,938,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:143,testability,depend,depend,143,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:396,testability,test,test,396,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:526,testability,log,logic,526,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:938,testability,log,logic,938,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:591,usability,intuit,intuitively,591,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:819,usability,behavi,behaviour,819,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:914,usability,behavi,behaviour,914,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:1294,usability,behavi,behaviour,1294,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:1348,usability,behavi,behaviour,1348,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:1375,usability,error,error,1375,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:1522,usability,behavi,behaviour,1522,"> I think it should live in InternalTreeUtils? I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases? I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it. 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:229,availability,avail,available,229,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:549,availability,sli,slight,549,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:98,deployability,depend,depend,98,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:98,integrability,depend,depend,98,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:98,modifiability,depend,depend,98,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:229,reliability,availab,available,229,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:293,reliability,doe,does,293,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:549,reliability,sli,slight,549,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:98,safety,depend,depend,98,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:229,safety,avail,available,229,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:403,safety,test,test,403,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:426,safety,test,tests,426,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:635,safety,avoid,avoid,635,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:849,safety,risk,risking,849,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:229,security,availab,available,229,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:849,security,risk,risking,849,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:98,testability,depend,depend,98,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:403,testability,test,test,403,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:426,testability,test,tests,426,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing? > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax? > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:25,safety,input,inputs,25,@eguiraud thanks for the inputs. I modified the previous commit and now the PR is ready for review. More tests were added (including one for remote globbing that we didn't test before). I will add documentation to the function once we agree on the rest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:92,safety,review,review,92,@eguiraud thanks for the inputs. I modified the previous commit and now the PR is ready for review. More tests were added (including one for remote globbing that we didn't test before). I will add documentation to the function once we agree on the rest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:105,safety,test,tests,105,@eguiraud thanks for the inputs. I modified the previous commit and now the PR is ready for review. More tests were added (including one for remote globbing that we didn't test before). I will add documentation to the function once we agree on the rest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:172,safety,test,test,172,@eguiraud thanks for the inputs. I modified the previous commit and now the PR is ready for review. More tests were added (including one for remote globbing that we didn't test before). I will add documentation to the function once we agree on the rest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:35,security,modif,modified,35,@eguiraud thanks for the inputs. I modified the previous commit and now the PR is ready for review. More tests were added (including one for remote globbing that we didn't test before). I will add documentation to the function once we agree on the rest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:92,testability,review,review,92,@eguiraud thanks for the inputs. I modified the previous commit and now the PR is ready for review. More tests were added (including one for remote globbing that we didn't test before). I will add documentation to the function once we agree on the rest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:105,testability,test,tests,105,@eguiraud thanks for the inputs. I modified the previous commit and now the PR is ready for review. More tests were added (including one for remote globbing that we didn't test before). I will add documentation to the function once we agree on the rest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:172,testability,test,test,172,@eguiraud thanks for the inputs. I modified the previous commit and now the PR is ready for review. More tests were added (including one for remote globbing that we didn't test before). I will add documentation to the function once we agree on the rest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:25,usability,input,inputs,25,@eguiraud thanks for the inputs. I modified the previous commit and now the PR is ready for review. More tests were added (including one for remote globbing that we didn't test before). I will add documentation to the function once we agree on the rest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13160:197,usability,document,documentation,197,@eguiraud thanks for the inputs. I modified the previous commit and now the PR is ready for review. More tests were added (including one for remote globbing that we didn't test before). I will add documentation to the function once we agree on the rest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13160
https://github.com/root-project/root/pull/13164:22,integrability,coupl,couple,22,Force-pushed to fix a couple of typos.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13164
https://github.com/root-project/root/pull/13164:22,modifiability,coupl,couple,22,Force-pushed to fix a couple of typos.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13164
https://github.com/root-project/root/pull/13164:22,testability,coupl,couple,22,Force-pushed to fix a couple of typos.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13164
https://github.com/root-project/root/pull/13165:217,availability,sli,slightly,217,"I think this is a clear sign we want this patch. ![image](https://github.com/root-project/root/assets/15638895/dc7f1386-c921-4796-8a92-172026517ba8). One could say that returning a string that ends with ""\n"" would be slightly more annoying for post-processing, but I really don't think that counterargument has enough weight",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13165
https://github.com/root-project/root/pull/13165:42,deployability,patch,patch,42,"I think this is a clear sign we want this patch. ![image](https://github.com/root-project/root/assets/15638895/dc7f1386-c921-4796-8a92-172026517ba8). One could say that returning a string that ends with ""\n"" would be slightly more annoying for post-processing, but I really don't think that counterargument has enough weight",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13165
https://github.com/root-project/root/pull/13165:217,reliability,sli,slightly,217,"I think this is a clear sign we want this patch. ![image](https://github.com/root-project/root/assets/15638895/dc7f1386-c921-4796-8a92-172026517ba8). One could say that returning a string that ends with ""\n"" would be slightly more annoying for post-processing, but I really don't think that counterargument has enough weight",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13165
https://github.com/root-project/root/pull/13165:42,safety,patch,patch,42,"I think this is a clear sign we want this patch. ![image](https://github.com/root-project/root/assets/15638895/dc7f1386-c921-4796-8a92-172026517ba8). One could say that returning a string that ends with ""\n"" would be slightly more annoying for post-processing, but I really don't think that counterargument has enough weight",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13165
https://github.com/root-project/root/pull/13165:24,security,sign,sign,24,"I think this is a clear sign we want this patch. ![image](https://github.com/root-project/root/assets/15638895/dc7f1386-c921-4796-8a92-172026517ba8). One could say that returning a string that ends with ""\n"" would be slightly more annoying for post-processing, but I really don't think that counterargument has enough weight",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13165
https://github.com/root-project/root/pull/13165:42,security,patch,patch,42,"I think this is a clear sign we want this patch. ![image](https://github.com/root-project/root/assets/15638895/dc7f1386-c921-4796-8a92-172026517ba8). One could say that returning a string that ends with ""\n"" would be slightly more annoying for post-processing, but I really don't think that counterargument has enough weight",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13165
https://github.com/root-project/root/pull/13165:18,usability,clear,clear,18,"I think this is a clear sign we want this patch. ![image](https://github.com/root-project/root/assets/15638895/dc7f1386-c921-4796-8a92-172026517ba8). One could say that returning a string that ends with ""\n"" would be slightly more annoying for post-processing, but I really don't think that counterargument has enough weight",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13165
https://github.com/root-project/root/pull/13167:26,deployability,patch,patch,26,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:711,deployability,log,log,711,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:726,deployability,log,logger,726,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:1538,integrability,sub,submit,1538,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:153,interoperability,bind,bindings,153,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:212,interoperability,bind,bindings,212,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:313,interoperability,bind,bindings,313,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:377,interoperability,bind,bindings,377,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:753,interoperability,prox,proxies,753,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:779,interoperability,prox,proxies,779,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:890,interoperability,distribut,distributed,890,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:988,interoperability,prox,proxies,988,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:1236,interoperability,prox,proxies,1236,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:1507,interoperability,prox,proxies,1507,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:1560,interoperability,prox,proxy,1560,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:1584,interoperability,prox,proxy,1584,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:153,modifiability,bind,bindings,153,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:212,modifiability,bind,bindings,212,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:313,modifiability,bind,bindings,313,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:377,modifiability,bind,bindings,377,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:476,performance,concurren,concurrent,476,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:1609,performance,concurren,concurrent,1609,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:926,reliability,doe,doesn,926,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:26,safety,patch,patch,26,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:711,safety,log,log,711,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:726,safety,log,logger,726,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:1070,safety,avoid,avoid,1070,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:26,security,patch,patch,26,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:711,security,log,log,711,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:726,security,log,logger,726,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:711,testability,log,log,711,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:726,testability,log,logger,726,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/pull/13167:934,usability,support,support,934,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff. diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py. index cf0d095e7a..765aea1c56 100644. --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py. +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py. @@ -17,7 +17,7 @@ import types. . import concurrent.futures. . -from typing import TYPE_CHECKING. +from typing import Iterable, TYPE_CHECKING. . from DistRDF.Backends import build_backends_submodules. . @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):. return logger. . . -def RunGraphs(proxies):. +def RunGraphs(proxies: Iterable) -> int:. """""". Trigger the execution of multiple RDataFrame computation graphs on a certain. distributed backend. If the backend doesn't support multiple job. @@ -83,6 +83,9 @@ def RunGraphs(proxies):. actions belonging to different RDataFrame graphs will be. triggered to avoid useless calls. . + Return:. + (int): The number of unique computation graphs executed by this call. +. Example:. . @code{.py}. @@ -99,7 +102,7 @@ def RunGraphs(proxies):. ]. . # Execute the 3 computation graphs. - RunGraphs(histoproxies). + n_graphs_run = RunGraphs(histoproxies). # Retrieve all the histograms in one go. histos = [histoproxy.GetValue() for histoproxy in histoproxies]. @endcode. @@ -121,6 +124,8 @@ def RunGraphs(proxies):. futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]. concurrent.futures.wait(futures). . + return len(uniqueproxies). +. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13167
https://github.com/root-project/root/issues/13174:100,integrability,complian,compliant,100,"Hi @mkrzewic,. Many thanks for reporting! FWIW, my preference would be to go for the standard POSIX-compliant shell `/bin/sh` unless `bash` is absolutely required. Cheers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13174
https://github.com/root-project/root/issues/13174:85,interoperability,standard,standard,85,"Hi @mkrzewic,. Many thanks for reporting! FWIW, my preference would be to go for the standard POSIX-compliant shell `/bin/sh` unless `bash` is absolutely required. Cheers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13174
https://github.com/root-project/root/issues/13174:100,safety,compl,compliant,100,"Hi @mkrzewic,. Many thanks for reporting! FWIW, my preference would be to go for the standard POSIX-compliant shell `/bin/sh` unless `bash` is absolutely required. Cheers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13174
https://github.com/root-project/root/issues/13174:100,security,compl,compliant,100,"Hi @mkrzewic,. Many thanks for reporting! FWIW, my preference would be to go for the standard POSIX-compliant shell `/bin/sh` unless `bash` is absolutely required. Cheers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13174
https://github.com/root-project/root/issues/13174:51,usability,prefer,preference,51,"Hi @mkrzewic,. Many thanks for reporting! FWIW, my preference would be to go for the standard POSIX-compliant shell `/bin/sh` unless `bash` is absolutely required. Cheers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13174
https://github.com/root-project/root/pull/13175:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13175
https://github.com/root-project/root/pull/13175:0,availability,ping,ping,0,ping @vgvassilev,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13175
https://github.com/root-project/root/pull/13179:154,energy efficiency,model,models,154,"We can't say 100 % that nobody uses it, but I would be very surprised if it is used, because using it will almost certainly result in messed up ownership models.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13179
https://github.com/root-project/root/pull/13179:154,security,model,models,154,"We can't say 100 % that nobody uses it, but I would be very surprised if it is used, because using it will almost certainly result in messed up ownership models.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13179
https://github.com/root-project/root/pull/13181:566,availability,error,error,566,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:682,deployability,patch,patch,682,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:404,performance,time,times,404,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:566,performance,error,error,566,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:93,reliability,doe,does,93,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:664,reliability,diagno,diagnostics,664,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:566,safety,error,error,566,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:682,safety,patch,patch,682,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:682,security,patch,patch,682,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:284,testability,assert,assertions,284,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:351,testability,assert,assert,351,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:384,testability,assert,assertion,384,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:664,testability,diagno,diagnostics,664,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:38,usability,clear,clearing,38,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:566,usability,error,error,566,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:920,usability,command,command,920,"> * Revert changes to `emitLLVMUsed`: clearing the vectors `LLVMUsed` and `LLVMCompilerUsed` does not seem. > needed because `CodeGenerator::StartModule` will swap the entire `CodeGenModule`. > . Makes sense to me. > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. The problem is generated (synthesized) code which have no source location information. Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. > . > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. That was probably relevant for the PCH and rootmaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:571,availability,error,error,571,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:687,deployability,patch,patch,687,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:837,deployability,build,builds,837,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:191,performance,time,times,191,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:444,performance,Memor,MemoryBuffer,444,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:571,performance,error,error,571,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:669,reliability,diagno,diagnostics,669,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:467,safety,valid,valid,467,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:571,safety,error,error,571,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:687,safety,patch,patch,687,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:1266,safety,valid,valid,1266,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:687,security,patch,patch,687,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:71,testability,assert,assertions,71,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:138,testability,assert,assert,138,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:171,testability,assert,assertion,171,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:669,testability,diagno,diagnostics,669,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:863,testability,assert,assertions,863,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:444,usability,Memor,MemoryBuffer,444,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:571,usability,error,error,571,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:1039,usability,command,command,1039,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:1173,usability,command,command,1173,"> > * Revert changes to `SourceManager::isBeforeInTranslationUnit`: if assertions are enabled `llvm_unreachable` has the same effects as `assert(0)`. As we don't see this assertion in recent times, this change is probably not relevant anymore. > . > The problem is generated (synthesized) code which have no source location information. Is that still true? In `IncrementalParser::ParseInternal`, I see that all code parsed gets written into a `MemoryBuffer` that has valid `SourceLocation`s - see also the comment next to `initializeVirtualFile`. > Then when you have an error resulting in multiple overloads we will need to compare their source locations to order the diagnostics. This patch makes this codes to work while the llvm_unreachable makes it crash in production. Maybe, but this sounds incredibly fragile. Also CMS has `DBG` builds, I guess they have assertions enabled in LLVM? > > * Revert change in `SourceLocation::isBeforeInTranslationUnitThan`: I believe that all locations have a `SourceManager` nowadays, even from the command line. > . > That was probably relevant for the PCH and rootmaps? Commit b71b9035fd2359c0644b0c16328f76323fd02df6 mentions the command line, but this should equally go through the virtual file I mentioned above and have valid locations these days, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:20,safety,test,test,20,"@smuzaffar, can you test this PR within cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:20,testability,test,test,20,"@smuzaffar, can you test this PR within cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:153,deployability,patch,patches,153,"> @smuzaffar, can you test this PR within cmssw? @iarspider , @aandvalenzuela can you please test this? You need to open a PR using [hahnjo:revert-clang-patches](https://github.com/hahnjo/root/tree/revert-clang-patches) branch agaisnt the [cms-sw/root](https://github.com/cms-sw/root) root master latest branch usd by ROOT6 IBs and then start the tests for ROOT6 IBs from that PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:211,deployability,patch,patches,211,"> @smuzaffar, can you test this PR within cmssw? @iarspider , @aandvalenzuela can you please test this? You need to open a PR using [hahnjo:revert-clang-patches](https://github.com/hahnjo/root/tree/revert-clang-patches) branch agaisnt the [cms-sw/root](https://github.com/cms-sw/root) root master latest branch usd by ROOT6 IBs and then start the tests for ROOT6 IBs from that PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:22,safety,test,test,22,"> @smuzaffar, can you test this PR within cmssw? @iarspider , @aandvalenzuela can you please test this? You need to open a PR using [hahnjo:revert-clang-patches](https://github.com/hahnjo/root/tree/revert-clang-patches) branch agaisnt the [cms-sw/root](https://github.com/cms-sw/root) root master latest branch usd by ROOT6 IBs and then start the tests for ROOT6 IBs from that PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:93,safety,test,test,93,"> @smuzaffar, can you test this PR within cmssw? @iarspider , @aandvalenzuela can you please test this? You need to open a PR using [hahnjo:revert-clang-patches](https://github.com/hahnjo/root/tree/revert-clang-patches) branch agaisnt the [cms-sw/root](https://github.com/cms-sw/root) root master latest branch usd by ROOT6 IBs and then start the tests for ROOT6 IBs from that PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:153,safety,patch,patches,153,"> @smuzaffar, can you test this PR within cmssw? @iarspider , @aandvalenzuela can you please test this? You need to open a PR using [hahnjo:revert-clang-patches](https://github.com/hahnjo/root/tree/revert-clang-patches) branch agaisnt the [cms-sw/root](https://github.com/cms-sw/root) root master latest branch usd by ROOT6 IBs and then start the tests for ROOT6 IBs from that PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:211,safety,patch,patches,211,"> @smuzaffar, can you test this PR within cmssw? @iarspider , @aandvalenzuela can you please test this? You need to open a PR using [hahnjo:revert-clang-patches](https://github.com/hahnjo/root/tree/revert-clang-patches) branch agaisnt the [cms-sw/root](https://github.com/cms-sw/root) root master latest branch usd by ROOT6 IBs and then start the tests for ROOT6 IBs from that PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:347,safety,test,tests,347,"> @smuzaffar, can you test this PR within cmssw? @iarspider , @aandvalenzuela can you please test this? You need to open a PR using [hahnjo:revert-clang-patches](https://github.com/hahnjo/root/tree/revert-clang-patches) branch agaisnt the [cms-sw/root](https://github.com/cms-sw/root) root master latest branch usd by ROOT6 IBs and then start the tests for ROOT6 IBs from that PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:153,security,patch,patches,153,"> @smuzaffar, can you test this PR within cmssw? @iarspider , @aandvalenzuela can you please test this? You need to open a PR using [hahnjo:revert-clang-patches](https://github.com/hahnjo/root/tree/revert-clang-patches) branch agaisnt the [cms-sw/root](https://github.com/cms-sw/root) root master latest branch usd by ROOT6 IBs and then start the tests for ROOT6 IBs from that PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:211,security,patch,patches,211,"> @smuzaffar, can you test this PR within cmssw? @iarspider , @aandvalenzuela can you please test this? You need to open a PR using [hahnjo:revert-clang-patches](https://github.com/hahnjo/root/tree/revert-clang-patches) branch agaisnt the [cms-sw/root](https://github.com/cms-sw/root) root master latest branch usd by ROOT6 IBs and then start the tests for ROOT6 IBs from that PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:22,testability,test,test,22,"> @smuzaffar, can you test this PR within cmssw? @iarspider , @aandvalenzuela can you please test this? You need to open a PR using [hahnjo:revert-clang-patches](https://github.com/hahnjo/root/tree/revert-clang-patches) branch agaisnt the [cms-sw/root](https://github.com/cms-sw/root) root master latest branch usd by ROOT6 IBs and then start the tests for ROOT6 IBs from that PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:93,testability,test,test,93,"> @smuzaffar, can you test this PR within cmssw? @iarspider , @aandvalenzuela can you please test this? You need to open a PR using [hahnjo:revert-clang-patches](https://github.com/hahnjo/root/tree/revert-clang-patches) branch agaisnt the [cms-sw/root](https://github.com/cms-sw/root) root master latest branch usd by ROOT6 IBs and then start the tests for ROOT6 IBs from that PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:347,testability,test,tests,347,"> @smuzaffar, can you test this PR within cmssw? @iarspider , @aandvalenzuela can you please test this? You need to open a PR using [hahnjo:revert-clang-patches](https://github.com/hahnjo/root/tree/revert-clang-patches) branch agaisnt the [cms-sw/root](https://github.com/cms-sw/root) root master latest branch usd by ROOT6 IBs and then start the tests for ROOT6 IBs from that PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:63,safety,test,tests,63,@aandvalenzuela can you interpret the results we got from your tests for us? Is this PR good to go from cmssw standpoint?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:63,testability,test,tests,63,@aandvalenzuela can you interpret the results we got from your tests for us? Is this PR good to go from cmssw standpoint?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:45,deployability,fail,failed,45,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:61,deployability,fail,failing,61,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:76,deployability,integr,integration,76,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:88,deployability,build,builds,88,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:76,integrability,integr,integration,76,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:76,interoperability,integr,integration,76,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:76,modifiability,integr,integration,76,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:45,reliability,fail,failed,45,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:61,reliability,fail,failing,61,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:76,reliability,integr,integration,76,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:34,safety,test,tests,34,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:188,safety,test,tests,188,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:76,security,integr,integration,76,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:34,testability,test,tests,34,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:76,testability,integr,integration,76,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:188,testability,test,tests,188,"Yes @vgvassilev, it is. The three tests that failed are also failing in our integration builds. See https://github.com/cms-sw/cmssw/pull/41964 (`DataFormatsScouting` are actually obsolete tests) and https://github.com/cms-sw/cmssw/issues/42206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/pull/13181:38,usability,confirm,confirmation,38,"@aandvalenzuela, thanks a lot for the confirmation!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13181
https://github.com/root-project/root/issues/13182:78,security,auth,author,78,"> @jalopezg-git Yes, can you open a PR? @ferdymercury as you are the original author of #13217, do you want to take care of the backport?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:86,security,auth,author,86,"> > @jalopezg-git Yes, can you open a PR? > . > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:209,usability,guid,guidelines,209,"> > @jalopezg-git Yes, can you open a PR? > . > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:511,deployability,patch,patches,511,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:528,deployability,patch,patches,528,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:588,deployability,patch,patches,588,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:807,deployability,patch,patches,807,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:855,deployability,manag,manage,855,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:855,energy efficiency,manag,manage,855,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:511,safety,patch,patches,511,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:528,safety,patch,patches,528,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:588,safety,patch,patches,588,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:807,safety,patch,patches,807,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:855,safety,manag,manage,855,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:98,security,auth,author,98,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:511,security,patch,patches,511,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:528,security,patch,patches,528,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:588,security,patch,patches,588,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:807,security,patch,patches,807,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:454,testability,simpl,simplest,454,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:227,usability,guid,guidelines,227,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:454,usability,simpl,simplest,454,"> > > @jalopezg-git Yes, can you open a PR? > > . > > . > > @ferdymercury as you are the original author of #13217, do you want to take care of the backport? > . > I could do it, but I have never done it before, so I need some guidelines. Should I use rebase on some XY branch and then cherry-picking only my commit or sth like that? Assuming that the remote `origin` refers to upstream and `ferdymercury` to `https://github.com/ferdymercury/root/`, the simplest way is to. ```bash. $ git fetch origin v6-28-00-patches:v6-28-00-patches. $ git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. $ git cherry-pick ... # your commit(s) here - I think it was 2 commits; mention them in order here. $ git push ferdymercury TDirectoryFile-ls-v6.28. ```. , and then open a PR to be merged against the `v6-28-00-patches` branch. I'll let you try; if you don't manage, I'll do it instead :slightly_smiling_face:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:420,deployability,patch,patches,420,"I did: (note to self). Thanks for the help! ```. git clone git@github.com:root-project/root. cd root. git remote add ferdymercury git@github.com:/ferdymercury/root. git remote -v. ferdymercury	git@github.com:ferdymercury/root.git (fetch). ferdymercury	git@github.com:ferdymercury/root.git (push). origin	git@github.com:root-project/root (fetch). origin	git@github.com:root-project/root (push). git fetch origin v6-28-00-patches:v6-28-00-patches. git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. git config user.name ""ferdymercury"". git config user.email ""ferdymercury@users.noreply.github.com"". git cherry-pick 18c847267b8651b7b392116767c5671f14c1c46e cb08bb7445a0b8db0a64a505399844c85ed048a4. git push ferdymercury TDirectoryFile-ls-v6.28. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:437,deployability,patch,patches,437,"I did: (note to self). Thanks for the help! ```. git clone git@github.com:root-project/root. cd root. git remote add ferdymercury git@github.com:/ferdymercury/root. git remote -v. ferdymercury	git@github.com:ferdymercury/root.git (fetch). ferdymercury	git@github.com:ferdymercury/root.git (push). origin	git@github.com:root-project/root (fetch). origin	git@github.com:root-project/root (push). git fetch origin v6-28-00-patches:v6-28-00-patches. git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. git config user.name ""ferdymercury"". git config user.email ""ferdymercury@users.noreply.github.com"". git cherry-pick 18c847267b8651b7b392116767c5671f14c1c46e cb08bb7445a0b8db0a64a505399844c85ed048a4. git push ferdymercury TDirectoryFile-ls-v6.28. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:495,deployability,patch,patches,495,"I did: (note to self). Thanks for the help! ```. git clone git@github.com:root-project/root. cd root. git remote add ferdymercury git@github.com:/ferdymercury/root. git remote -v. ferdymercury	git@github.com:ferdymercury/root.git (fetch). ferdymercury	git@github.com:ferdymercury/root.git (push). origin	git@github.com:root-project/root (fetch). origin	git@github.com:root-project/root (push). git fetch origin v6-28-00-patches:v6-28-00-patches. git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. git config user.name ""ferdymercury"". git config user.email ""ferdymercury@users.noreply.github.com"". git cherry-pick 18c847267b8651b7b392116767c5671f14c1c46e cb08bb7445a0b8db0a64a505399844c85ed048a4. git push ferdymercury TDirectoryFile-ls-v6.28. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:420,safety,patch,patches,420,"I did: (note to self). Thanks for the help! ```. git clone git@github.com:root-project/root. cd root. git remote add ferdymercury git@github.com:/ferdymercury/root. git remote -v. ferdymercury	git@github.com:ferdymercury/root.git (fetch). ferdymercury	git@github.com:ferdymercury/root.git (push). origin	git@github.com:root-project/root (fetch). origin	git@github.com:root-project/root (push). git fetch origin v6-28-00-patches:v6-28-00-patches. git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. git config user.name ""ferdymercury"". git config user.email ""ferdymercury@users.noreply.github.com"". git cherry-pick 18c847267b8651b7b392116767c5671f14c1c46e cb08bb7445a0b8db0a64a505399844c85ed048a4. git push ferdymercury TDirectoryFile-ls-v6.28. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:437,safety,patch,patches,437,"I did: (note to self). Thanks for the help! ```. git clone git@github.com:root-project/root. cd root. git remote add ferdymercury git@github.com:/ferdymercury/root. git remote -v. ferdymercury	git@github.com:ferdymercury/root.git (fetch). ferdymercury	git@github.com:ferdymercury/root.git (push). origin	git@github.com:root-project/root (fetch). origin	git@github.com:root-project/root (push). git fetch origin v6-28-00-patches:v6-28-00-patches. git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. git config user.name ""ferdymercury"". git config user.email ""ferdymercury@users.noreply.github.com"". git cherry-pick 18c847267b8651b7b392116767c5671f14c1c46e cb08bb7445a0b8db0a64a505399844c85ed048a4. git push ferdymercury TDirectoryFile-ls-v6.28. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:495,safety,patch,patches,495,"I did: (note to self). Thanks for the help! ```. git clone git@github.com:root-project/root. cd root. git remote add ferdymercury git@github.com:/ferdymercury/root. git remote -v. ferdymercury	git@github.com:ferdymercury/root.git (fetch). ferdymercury	git@github.com:ferdymercury/root.git (push). origin	git@github.com:root-project/root (fetch). origin	git@github.com:root-project/root (push). git fetch origin v6-28-00-patches:v6-28-00-patches. git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. git config user.name ""ferdymercury"". git config user.email ""ferdymercury@users.noreply.github.com"". git cherry-pick 18c847267b8651b7b392116767c5671f14c1c46e cb08bb7445a0b8db0a64a505399844c85ed048a4. git push ferdymercury TDirectoryFile-ls-v6.28. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:420,security,patch,patches,420,"I did: (note to self). Thanks for the help! ```. git clone git@github.com:root-project/root. cd root. git remote add ferdymercury git@github.com:/ferdymercury/root. git remote -v. ferdymercury	git@github.com:ferdymercury/root.git (fetch). ferdymercury	git@github.com:ferdymercury/root.git (push). origin	git@github.com:root-project/root (fetch). origin	git@github.com:root-project/root (push). git fetch origin v6-28-00-patches:v6-28-00-patches. git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. git config user.name ""ferdymercury"". git config user.email ""ferdymercury@users.noreply.github.com"". git cherry-pick 18c847267b8651b7b392116767c5671f14c1c46e cb08bb7445a0b8db0a64a505399844c85ed048a4. git push ferdymercury TDirectoryFile-ls-v6.28. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:437,security,patch,patches,437,"I did: (note to self). Thanks for the help! ```. git clone git@github.com:root-project/root. cd root. git remote add ferdymercury git@github.com:/ferdymercury/root. git remote -v. ferdymercury	git@github.com:ferdymercury/root.git (fetch). ferdymercury	git@github.com:ferdymercury/root.git (push). origin	git@github.com:root-project/root (fetch). origin	git@github.com:root-project/root (push). git fetch origin v6-28-00-patches:v6-28-00-patches. git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. git config user.name ""ferdymercury"". git config user.email ""ferdymercury@users.noreply.github.com"". git cherry-pick 18c847267b8651b7b392116767c5671f14c1c46e cb08bb7445a0b8db0a64a505399844c85ed048a4. git push ferdymercury TDirectoryFile-ls-v6.28. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:495,security,patch,patches,495,"I did: (note to self). Thanks for the help! ```. git clone git@github.com:root-project/root. cd root. git remote add ferdymercury git@github.com:/ferdymercury/root. git remote -v. ferdymercury	git@github.com:ferdymercury/root.git (fetch). ferdymercury	git@github.com:ferdymercury/root.git (push). origin	git@github.com:root-project/root (fetch). origin	git@github.com:root-project/root (push). git fetch origin v6-28-00-patches:v6-28-00-patches. git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. git config user.name ""ferdymercury"". git config user.email ""ferdymercury@users.noreply.github.com"". git cherry-pick 18c847267b8651b7b392116767c5671f14c1c46e cb08bb7445a0b8db0a64a505399844c85ed048a4. git push ferdymercury TDirectoryFile-ls-v6.28. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:38,usability,help,help,38,"I did: (note to self). Thanks for the help! ```. git clone git@github.com:root-project/root. cd root. git remote add ferdymercury git@github.com:/ferdymercury/root. git remote -v. ferdymercury	git@github.com:ferdymercury/root.git (fetch). ferdymercury	git@github.com:ferdymercury/root.git (push). origin	git@github.com:root-project/root (fetch). origin	git@github.com:root-project/root (push). git fetch origin v6-28-00-patches:v6-28-00-patches. git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. git config user.name ""ferdymercury"". git config user.email ""ferdymercury@users.noreply.github.com"". git cherry-pick 18c847267b8651b7b392116767c5671f14c1c46e cb08bb7445a0b8db0a64a505399844c85ed048a4. git push ferdymercury TDirectoryFile-ls-v6.28. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:515,usability,user,user,515,"I did: (note to self). Thanks for the help! ```. git clone git@github.com:root-project/root. cd root. git remote add ferdymercury git@github.com:/ferdymercury/root. git remote -v. ferdymercury	git@github.com:ferdymercury/root.git (fetch). ferdymercury	git@github.com:ferdymercury/root.git (push). origin	git@github.com:root-project/root (fetch). origin	git@github.com:root-project/root (push). git fetch origin v6-28-00-patches:v6-28-00-patches. git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. git config user.name ""ferdymercury"". git config user.email ""ferdymercury@users.noreply.github.com"". git cherry-pick 18c847267b8651b7b392116767c5671f14c1c46e cb08bb7445a0b8db0a64a505399844c85ed048a4. git push ferdymercury TDirectoryFile-ls-v6.28. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:552,usability,user,user,552,"I did: (note to self). Thanks for the help! ```. git clone git@github.com:root-project/root. cd root. git remote add ferdymercury git@github.com:/ferdymercury/root. git remote -v. ferdymercury	git@github.com:ferdymercury/root.git (fetch). ferdymercury	git@github.com:ferdymercury/root.git (push). origin	git@github.com:root-project/root (fetch). origin	git@github.com:root-project/root (push). git fetch origin v6-28-00-patches:v6-28-00-patches. git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. git config user.name ""ferdymercury"". git config user.email ""ferdymercury@users.noreply.github.com"". git cherry-pick 18c847267b8651b7b392116767c5671f14c1c46e cb08bb7445a0b8db0a64a505399844c85ed048a4. git push ferdymercury TDirectoryFile-ls-v6.28. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/issues/13182:577,usability,user,users,577,"I did: (note to self). Thanks for the help! ```. git clone git@github.com:root-project/root. cd root. git remote add ferdymercury git@github.com:/ferdymercury/root. git remote -v. ferdymercury	git@github.com:ferdymercury/root.git (fetch). ferdymercury	git@github.com:ferdymercury/root.git (push). origin	git@github.com:root-project/root (fetch). origin	git@github.com:root-project/root (push). git fetch origin v6-28-00-patches:v6-28-00-patches. git checkout -b TDirectoryFile-ls-v6.28 v6-28-00-patches. git config user.name ""ferdymercury"". git config user.email ""ferdymercury@users.noreply.github.com"". git cherry-pick 18c847267b8651b7b392116767c5671f14c1c46e cb08bb7445a0b8db0a64a505399844c85ed048a4. git push ferdymercury TDirectoryFile-ls-v6.28. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13182
https://github.com/root-project/root/pull/13183:15,safety,review,review,15,"Thanks for the review, @pcanal!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13183
https://github.com/root-project/root/pull/13183:15,testability,review,review,15,"Thanks for the review, @pcanal!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13183
https://github.com/root-project/root/issues/13185:1185,availability,error,errors,1185,"or this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1321,availability,state,staterror,1321,"/root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1402,availability,error,errors,1402,"rged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1539,availability,state,staterror,1539,"hown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:568,deployability,version,version,568,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:618,deployability,version,version,618,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:227,energy efficiency,model,models,227,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:839,energy efficiency,model,model,839,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:2790,energy efficiency,model,model,2790,"t1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1,. ""max"": 2. }. ],. ""contents"": [122, 112],. ""type"": ""binned"". }. ]. }. """""". ). # Both the model_channel1 and the observed_channel1 should be in the workspace now. ws.Print(). pdf = ws[""model_channel1""]. data = ws[""observed_channel1""]. # Fit the model pdf to the data to see if things work. result = pdf.fitTo(data, Save=True, PrintLevel=-1). result.Print(). ```. This workflow should be supported without string literals, meaning it would be good to also support the creation of binned datasets from dictionaries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:568,integrability,version,version,568,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:618,integrability,version,version,618,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1321,integrability,state,staterror,1321,"/root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1539,integrability,state,staterror,1539,"hown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:490,interoperability,specif,specification,490,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:824,interoperability,specif,specifying,824,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1641,interoperability,specif,specifying,1641,"SON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1,. ""max"": 2. }. ],. ""contents"": [122, 112],. ""type"": ""binned"". }. ]. }. """""". ). # Both the model_chann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1931,interoperability,specif,specification,1931," 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1,. ""max"": 2. }. ],. ""contents"": [122, 112],. ""type"": ""binned"". }. ]. }. """""". ). # Both the model_channel1 and the observed_channel1 should be in the workspace now. ws.Print(). pdf = ws[""model_channel1""]. data = ws[""observed_channel1""]. # Fit the model pdf to the data to see if things work. result = pdf.fitTo(data, Save=True, PrintLevel=-1). result.Print(). ```. This workflow should be suppor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:2039,interoperability,specif,specify,2039,"}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1,. ""max"": 2. }. ],. ""contents"": [122, 112],. ""type"": ""binned"". }. ]. }. """""". ). # Both the model_channel1 and the observed_channel1 should be in the workspace now. ws.Print(). pdf = ws[""model_channel1""]. data = ws[""observed_channel1""]. # Fit the model pdf to the data to see if things work. result = pdf.fitTo(data, Save=True, PrintLevel=-1). result.Print(). ```. This workflow should be supported without string literals, meaning it would be good to also support the creation of binned datasets fro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:2120,interoperability,specif,specify,2120,"t1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1,. ""max"": 2. }. ],. ""contents"": [122, 112],. ""type"": ""binned"". }. ]. }. """""". ). # Both the model_channel1 and the observed_channel1 should be in the workspace now. ws.Print(). pdf = ws[""model_channel1""]. data = ws[""observed_channel1""]. # Fit the model pdf to the data to see if things work. result = pdf.fitTo(data, Save=True, PrintLevel=-1). result.Print(). ```. This workflow should be supported without string literals, meaning it would be good to also support the creation of binned datasets from dictionaries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:2415,interoperability,distribut,distributions,2415,"t1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1,. ""max"": 2. }. ],. ""contents"": [122, 112],. ""type"": ""binned"". }. ]. }. """""". ). # Both the model_channel1 and the observed_channel1 should be in the workspace now. ws.Print(). pdf = ws[""model_channel1""]. data = ws[""observed_channel1""]. # Fit the model pdf to the data to see if things work. result = pdf.fitTo(data, Save=True, PrintLevel=-1). result.Print(). ```. This workflow should be supported without string literals, meaning it would be good to also support the creation of binned datasets from dictionaries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:568,modifiability,version,version,568,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:618,modifiability,version,version,618,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:972,performance,content,contents,972,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1163,performance,content,contents,1163,"ls. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelih",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1185,performance,error,errors,1185,"or this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1380,performance,content,contents,1380," that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1402,performance,error,errors,1402,"rged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1767,performance,content,contents,1767,"r of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1,. ""max"": 2. }. ],. ""contents"": [122, 112],. ""type"": ""binned"". }. ]. }. """""". ). # Both the model_channel1 and the observed_channel1 should be in the workspace now. ws.Print(). pdf = ws[""model_channel1""]. data = ws[""observed_cha",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:2565,performance,content,contents,2565,"t1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1,. ""max"": 2. }. ],. ""contents"": [122, 112],. ""type"": ""binned"". }. ]. }. """""". ). # Both the model_channel1 and the observed_channel1 should be in the workspace now. ws.Print(). pdf = ws[""model_channel1""]. data = ws[""observed_channel1""]. # Fit the model pdf to the data to see if things work. result = pdf.fitTo(data, Save=True, PrintLevel=-1). result.Print(). ```. This workflow should be supported without string literals, meaning it would be good to also support the creation of binned datasets from dictionaries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:2191,reliability,doe,doesn,2191,"t1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1,. ""max"": 2. }. ],. ""contents"": [122, 112],. ""type"": ""binned"". }. ]. }. """""". ). # Both the model_channel1 and the observed_channel1 should be in the workspace now. ws.Print(). pdf = ws[""model_channel1""]. data = ws[""observed_channel1""]. # Fit the model pdf to the data to see if things work. result = pdf.fitTo(data, Save=True, PrintLevel=-1). result.Print(). ```. This workflow should be supported without string literals, meaning it would be good to also support the creation of binned datasets from dictionaries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1185,safety,error,errors,1185,"or this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1402,safety,error,errors,1402,"rged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:227,security,model,models,227,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:839,security,model,model,839,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:996,security,modif,modifiers,996,"ne of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1136,security,sign,signal,1136,"bjects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1205,security,modif,modifiers,1205,"n of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1423,security,modif,modifiers,1423,"Factory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:2790,security,model,model,2790,"t1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1,. ""max"": 2. }. ],. ""contents"": [122, 112],. ""type"": ""binned"". }. ]. }. """""". ). # Both the model_channel1 and the observed_channel1 should be in the workspace now. ws.Print(). pdf = ws[""model_channel1""]. data = ws[""observed_channel1""]. # Fit the model pdf to the data to see if things work. result = pdf.fitTo(data, Save=True, PrintLevel=-1). result.Print(). ```. This workflow should be supported without string literals, meaning it would be good to also support the creation of binned datasets from dictionaries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:557,testability,simpl,simplified,557,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:607,testability,Simpl,Simplified,607,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:31,usability,support,support,31,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:557,usability,simpl,simplified,557,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:607,usability,Simpl,Simplified,607,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1185,usability,error,errors,1185,"or this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:. https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:1402,usability,error,errors,1402,"rged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python. # Simplified version of the HistFactory JSON IO tutorial:. # https://root.cern/doc/master/rf515__hfJSON_8py.html. # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf. model_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],. ""samples"": [. {. ""data"": {""contents"": [20, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:2025,usability,user,user,2025,"1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1,. ""max"": 2. }. ],. ""contents"": [122, 112],. ""type"": ""binned"". }. ]. }. """""". ). # Both the model_channel1 and the observed_channel1 should be in the workspace now. ws.Print(). pdf = ws[""model_channel1""]. data = ws[""observed_channel1""]. # Fit the model pdf to the data to see if things work. result = pdf.fitTo(data, Save=True, PrintLevel=-1). result.Print(). ```. This workflow should be supported without string literals, meaning it would be good to also support the creation of bin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:2913,usability,workflow,workflow,2913,"t1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1,. ""max"": 2. }. ],. ""contents"": [122, 112],. ""type"": ""binned"". }. ]. }. """""". ). # Both the model_channel1 and the observed_channel1 should be in the workspace now. ws.Print(). pdf = ws[""model_channel1""]. data = ws[""observed_channel1""]. # Fit the model pdf to the data to see if things work. result = pdf.fitTo(data, Save=True, PrintLevel=-1). result.Print(). ```. This workflow should be supported without string literals, meaning it would be good to also support the creation of binned datasets from dictionaries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:2932,usability,support,supported,2932,"t1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1,. ""max"": 2. }. ],. ""contents"": [122, 112],. ""type"": ""binned"". }. ]. }. """""". ). # Both the model_channel1 and the observed_channel1 should be in the workspace now. ws.Print(). pdf = ws[""model_channel1""]. data = ws[""observed_channel1""]. # Fit the model pdf to the data to see if things work. result = pdf.fitTo(data, Save=True, PrintLevel=-1). result.Print(). ```. This workflow should be supported without string literals, meaning it would be good to also support the creation of binned datasets from dictionaries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/issues/13185:3000,usability,support,support,3000,"t1"", ""type"": ""normsys""},. {""name"": ""mu"", ""type"": ""normfactor""},. ],. ""name"": ""signal"",. },. {. ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background1"",. },. {. ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},. ""modifiers"": [. {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},. {""name"": ""mcstat"", ""type"": ""staterror""},. ],. ""name"": ""background2"",. },. ],. ""type"": ""histfactory_dist"",. }. # Python dictionary specifying the binned dataset. observed_channel1 = {. ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],. ""contents"": [122, 112],. ""type"": ""binned"",. }. # Creating an empty workspace. ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works! ws[""model_channel1""] = model_channel1. # It would be nice if the user can also specify the datasets like this, such. # that no string literals are necessary to specify everything necessary for the. # likelihood analysis (note this doesn't work yet):. #. # ws[""observed_channel1""] = observed_channel1. # Right now, the only way to import dataset via the JSON IO is to read a full. # HS3 JSON:. ROOT.RooJSONFactoryWSTool(ws).importJSONfromString(. """""". {. ""distributions"": [. ],. ""data"": [. {. ""name"": ""observed_channel1"",. ""axes"": [. {. ""name"": ""obs_x_channel1"",. ""nbins"": 2,. ""min"": 1,. ""max"": 2. }. ],. ""contents"": [122, 112],. ""type"": ""binned"". }. ]. }. """""". ). # Both the model_channel1 and the observed_channel1 should be in the workspace now. ws.Print(). pdf = ws[""model_channel1""]. data = ws[""observed_channel1""]. # Fit the model pdf to the data to see if things work. result = pdf.fitTo(data, Save=True, PrintLevel=-1). result.Print(). ```. This workflow should be supported without string literals, meaning it would be good to also support the creation of binned datasets from dictionaries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13185
https://github.com/root-project/root/pull/13187:49,integrability,messag,message,49,"Before merging, could you also change the commit message to better represent the changes in this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13187
https://github.com/root-project/root/pull/13187:49,interoperability,messag,message,49,"Before merging, could you also change the commit message to better represent the changes in this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13187
https://github.com/root-project/root/pull/13188:65,availability,error,errors,65,"Jenkins build is fully green(!), GitHub actions have a couple of errors that seem unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13188
https://github.com/root-project/root/pull/13188:8,deployability,build,build,8,"Jenkins build is fully green(!), GitHub actions have a couple of errors that seem unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13188
https://github.com/root-project/root/pull/13188:23,energy efficiency,green,green,23,"Jenkins build is fully green(!), GitHub actions have a couple of errors that seem unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13188
https://github.com/root-project/root/pull/13188:55,integrability,coupl,couple,55,"Jenkins build is fully green(!), GitHub actions have a couple of errors that seem unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13188
https://github.com/root-project/root/pull/13188:55,modifiability,coupl,couple,55,"Jenkins build is fully green(!), GitHub actions have a couple of errors that seem unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13188
https://github.com/root-project/root/pull/13188:65,performance,error,errors,65,"Jenkins build is fully green(!), GitHub actions have a couple of errors that seem unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13188
https://github.com/root-project/root/pull/13188:65,safety,error,errors,65,"Jenkins build is fully green(!), GitHub actions have a couple of errors that seem unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13188
https://github.com/root-project/root/pull/13188:55,testability,coupl,couple,55,"Jenkins build is fully green(!), GitHub actions have a couple of errors that seem unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13188
https://github.com/root-project/root/pull/13188:65,usability,error,errors,65,"Jenkins build is fully green(!), GitHub actions have a couple of errors that seem unrelated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13188
https://github.com/root-project/root/pull/13193:20,interoperability,conflict,conflicts,20,Force-pushed to fix conflicts.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13193
https://github.com/root-project/root/issues/13194:59,deployability,scale,scaledSolid,59,"Indeed this needs to be done now that Geant4 supports the `scaledSolid` tag, I'll be looking into it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13194
https://github.com/root-project/root/issues/13194:59,energy efficiency,scale,scaledSolid,59,"Indeed this needs to be done now that Geant4 supports the `scaledSolid` tag, I'll be looking into it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13194
https://github.com/root-project/root/issues/13194:59,modifiability,scal,scaledSolid,59,"Indeed this needs to be done now that Geant4 supports the `scaledSolid` tag, I'll be looking into it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13194
https://github.com/root-project/root/issues/13194:59,performance,scale,scaledSolid,59,"Indeed this needs to be done now that Geant4 supports the `scaledSolid` tag, I'll be looking into it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13194
https://github.com/root-project/root/issues/13194:45,usability,support,supports,45,"Indeed this needs to be done now that Geant4 supports the `scaledSolid` tag, I'll be looking into it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13194
https://github.com/root-project/root/issues/13200:63,safety,valid,valid,63,"it craps out while removing class TBaseClass, all strings seem valid, segfaults somewhere in unordered_set",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13200
https://github.com/root-project/root/issues/13200:17,deployability,log,log,17,[valgrind_roofit.log](https://github.com/root-project/root/files/11972574/valgrind_roofit.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13200
https://github.com/root-project/root/issues/13200:90,deployability,log,log,90,[valgrind_roofit.log](https://github.com/root-project/root/files/11972574/valgrind_roofit.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13200
https://github.com/root-project/root/issues/13200:17,safety,log,log,17,[valgrind_roofit.log](https://github.com/root-project/root/files/11972574/valgrind_roofit.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13200
https://github.com/root-project/root/issues/13200:90,safety,log,log,90,[valgrind_roofit.log](https://github.com/root-project/root/files/11972574/valgrind_roofit.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13200
https://github.com/root-project/root/issues/13200:17,security,log,log,17,[valgrind_roofit.log](https://github.com/root-project/root/files/11972574/valgrind_roofit.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13200
https://github.com/root-project/root/issues/13200:90,security,log,log,90,[valgrind_roofit.log](https://github.com/root-project/root/files/11972574/valgrind_roofit.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13200
https://github.com/root-project/root/issues/13200:17,testability,log,log,17,[valgrind_roofit.log](https://github.com/root-project/root/files/11972574/valgrind_roofit.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13200
https://github.com/root-project/root/issues/13200:90,testability,log,log,90,[valgrind_roofit.log](https://github.com/root-project/root/files/11972574/valgrind_roofit.log).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13200
https://github.com/root-project/root/pull/13204:18,deployability,toggl,toggle,18,ESC also works to toggle to dark mode.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13204
https://github.com/root-project/root/pull/13205:43,safety,review,reviewed,43,"Many thanks, @atolosadelgado! This will be reviewed soon!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:43,testability,review,reviewed,43,"Many thanks, @atolosadelgado! This will be reviewed soon!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:226,deployability,build,building,226,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:649,deployability,fail,failing,649,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:172,integrability,configur,configure,172,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:192,integrability,configur,configure,192,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:512,integrability,topic,topic,512,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:103,interoperability,standard,standard,103,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:172,modifiability,configur,configure,172,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:192,modifiability,configur,configure,192,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:673,performance,time,time,673,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:649,reliability,fail,failing,649,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:172,security,configur,configure,172,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:192,security,configur,configure,192,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:62,usability,indicat,indications,62,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:321,usability,user,user-defined,321,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:454,usability,document,documentation,454,"Hi,. I implemented most of the changes, but I would need some indications for the rest:. 1. Is there a standard header for ROOT files? 2. Remove reference in CMakeLists to configure method to configure the ROOT project before building it? 3. `In general, let's also briefly describe here the steps required to read/write user-defined classes, i.e. why ROOT relies on dictionaries for class introspection, how to generate one, etc.` Is a link to the ROOT documentation enough? In addition, I am not expert on the topic, I can not expand your points. . 4. `std::unique_ptr<TTree>` seems to not work. Never used if before, do you have any idea what is failing? Thank for your time and effort,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:136,modifiability,exten,extending,136,"Hi,. I have already implemented all the changes proposed by P. Canal. . The only thing that remains is the proposal by @jalopezg-git of extending the README, but I am afraid that is beyond my knowledge. Best,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:50,safety,review,review,50,@atolosadelgado let me know when it needs another review by clicking on the Re-request review button in the 'Reviewers' section above.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:87,safety,review,review,87,@atolosadelgado let me know when it needs another review by clicking on the Re-request review button in the 'Reviewers' section above.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:109,safety,Review,Reviewers,109,@atolosadelgado let me know when it needs another review by clicking on the Re-request review button in the 'Reviewers' section above.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:50,testability,review,review,50,@atolosadelgado let me know when it needs another review by clicking on the Re-request review button in the 'Reviewers' section above.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:87,testability,review,review,87,@atolosadelgado let me know when it needs another review by clicking on the Re-request review button in the 'Reviewers' section above.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:109,testability,Review,Reviewers,109,@atolosadelgado let me know when it needs another review by clicking on the Re-request review button in the 'Reviewers' section above.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:350,availability,state,stated,350,"Hi @jalopezg-git et al :). Thank you for your comments and suggestions, I have learnt new things in this PR. In the last commits I implemented the changes suggested by @vepadulano. Note that I have added a new file with the two lines that print the contents of the TTree using a RDF. The topics that would remain open are:. * Extension of README, as stated [here](https://github.com/root-project/root/pull/13205#discussion_r1259443075). I am sorry but that is beyond my knowledge. Please feel free to complement the README of this tutorial or the ROOT documentation. * The dot at the end of the branch name is not documented, but it is discussed in some forum threads. I would suggest to add the comment from P. Canal [here](https://github.com/root-project/root/pull/13205#discussion_r1265655686) for sake of clarity. Thank you for your time. Best,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:288,integrability,topic,topics,288,"Hi @jalopezg-git et al :). Thank you for your comments and suggestions, I have learnt new things in this PR. In the last commits I implemented the changes suggested by @vepadulano. Note that I have added a new file with the two lines that print the contents of the TTree using a RDF. The topics that would remain open are:. * Extension of README, as stated [here](https://github.com/root-project/root/pull/13205#discussion_r1259443075). I am sorry but that is beyond my knowledge. Please feel free to complement the README of this tutorial or the ROOT documentation. * The dot at the end of the branch name is not documented, but it is discussed in some forum threads. I would suggest to add the comment from P. Canal [here](https://github.com/root-project/root/pull/13205#discussion_r1265655686) for sake of clarity. Thank you for your time. Best,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:350,integrability,state,stated,350,"Hi @jalopezg-git et al :). Thank you for your comments and suggestions, I have learnt new things in this PR. In the last commits I implemented the changes suggested by @vepadulano. Note that I have added a new file with the two lines that print the contents of the TTree using a RDF. The topics that would remain open are:. * Extension of README, as stated [here](https://github.com/root-project/root/pull/13205#discussion_r1259443075). I am sorry but that is beyond my knowledge. Please feel free to complement the README of this tutorial or the ROOT documentation. * The dot at the end of the branch name is not documented, but it is discussed in some forum threads. I would suggest to add the comment from P. Canal [here](https://github.com/root-project/root/pull/13205#discussion_r1265655686) for sake of clarity. Thank you for your time. Best,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:326,modifiability,Extens,Extension,326,"Hi @jalopezg-git et al :). Thank you for your comments and suggestions, I have learnt new things in this PR. In the last commits I implemented the changes suggested by @vepadulano. Note that I have added a new file with the two lines that print the contents of the TTree using a RDF. The topics that would remain open are:. * Extension of README, as stated [here](https://github.com/root-project/root/pull/13205#discussion_r1259443075). I am sorry but that is beyond my knowledge. Please feel free to complement the README of this tutorial or the ROOT documentation. * The dot at the end of the branch name is not documented, but it is discussed in some forum threads. I would suggest to add the comment from P. Canal [here](https://github.com/root-project/root/pull/13205#discussion_r1265655686) for sake of clarity. Thank you for your time. Best,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:249,performance,content,contents,249,"Hi @jalopezg-git et al :). Thank you for your comments and suggestions, I have learnt new things in this PR. In the last commits I implemented the changes suggested by @vepadulano. Note that I have added a new file with the two lines that print the contents of the TTree using a RDF. The topics that would remain open are:. * Extension of README, as stated [here](https://github.com/root-project/root/pull/13205#discussion_r1259443075). I am sorry but that is beyond my knowledge. Please feel free to complement the README of this tutorial or the ROOT documentation. * The dot at the end of the branch name is not documented, but it is discussed in some forum threads. I would suggest to add the comment from P. Canal [here](https://github.com/root-project/root/pull/13205#discussion_r1265655686) for sake of clarity. Thank you for your time. Best,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:837,performance,time,time,837,"Hi @jalopezg-git et al :). Thank you for your comments and suggestions, I have learnt new things in this PR. In the last commits I implemented the changes suggested by @vepadulano. Note that I have added a new file with the two lines that print the contents of the TTree using a RDF. The topics that would remain open are:. * Extension of README, as stated [here](https://github.com/root-project/root/pull/13205#discussion_r1259443075). I am sorry but that is beyond my knowledge. Please feel free to complement the README of this tutorial or the ROOT documentation. * The dot at the end of the branch name is not documented, but it is discussed in some forum threads. I would suggest to add the comment from P. Canal [here](https://github.com/root-project/root/pull/13205#discussion_r1265655686) for sake of clarity. Thank you for your time. Best,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:501,safety,compl,complement,501,"Hi @jalopezg-git et al :). Thank you for your comments and suggestions, I have learnt new things in this PR. In the last commits I implemented the changes suggested by @vepadulano. Note that I have added a new file with the two lines that print the contents of the TTree using a RDF. The topics that would remain open are:. * Extension of README, as stated [here](https://github.com/root-project/root/pull/13205#discussion_r1259443075). I am sorry but that is beyond my knowledge. Please feel free to complement the README of this tutorial or the ROOT documentation. * The dot at the end of the branch name is not documented, but it is discussed in some forum threads. I would suggest to add the comment from P. Canal [here](https://github.com/root-project/root/pull/13205#discussion_r1265655686) for sake of clarity. Thank you for your time. Best,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:501,security,compl,complement,501,"Hi @jalopezg-git et al :). Thank you for your comments and suggestions, I have learnt new things in this PR. In the last commits I implemented the changes suggested by @vepadulano. Note that I have added a new file with the two lines that print the contents of the TTree using a RDF. The topics that would remain open are:. * Extension of README, as stated [here](https://github.com/root-project/root/pull/13205#discussion_r1259443075). I am sorry but that is beyond my knowledge. Please feel free to complement the README of this tutorial or the ROOT documentation. * The dot at the end of the branch name is not documented, but it is discussed in some forum threads. I would suggest to add the comment from P. Canal [here](https://github.com/root-project/root/pull/13205#discussion_r1265655686) for sake of clarity. Thank you for your time. Best,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:79,usability,learn,learnt,79,"Hi @jalopezg-git et al :). Thank you for your comments and suggestions, I have learnt new things in this PR. In the last commits I implemented the changes suggested by @vepadulano. Note that I have added a new file with the two lines that print the contents of the TTree using a RDF. The topics that would remain open are:. * Extension of README, as stated [here](https://github.com/root-project/root/pull/13205#discussion_r1259443075). I am sorry but that is beyond my knowledge. Please feel free to complement the README of this tutorial or the ROOT documentation. * The dot at the end of the branch name is not documented, but it is discussed in some forum threads. I would suggest to add the comment from P. Canal [here](https://github.com/root-project/root/pull/13205#discussion_r1265655686) for sake of clarity. Thank you for your time. Best,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:552,usability,document,documentation,552,"Hi @jalopezg-git et al :). Thank you for your comments and suggestions, I have learnt new things in this PR. In the last commits I implemented the changes suggested by @vepadulano. Note that I have added a new file with the two lines that print the contents of the TTree using a RDF. The topics that would remain open are:. * Extension of README, as stated [here](https://github.com/root-project/root/pull/13205#discussion_r1259443075). I am sorry but that is beyond my knowledge. Please feel free to complement the README of this tutorial or the ROOT documentation. * The dot at the end of the branch name is not documented, but it is discussed in some forum threads. I would suggest to add the comment from P. Canal [here](https://github.com/root-project/root/pull/13205#discussion_r1265655686) for sake of clarity. Thank you for your time. Best,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:614,usability,document,documented,614,"Hi @jalopezg-git et al :). Thank you for your comments and suggestions, I have learnt new things in this PR. In the last commits I implemented the changes suggested by @vepadulano. Note that I have added a new file with the two lines that print the contents of the TTree using a RDF. The topics that would remain open are:. * Extension of README, as stated [here](https://github.com/root-project/root/pull/13205#discussion_r1259443075). I am sorry but that is beyond my knowledge. Please feel free to complement the README of this tutorial or the ROOT documentation. * The dot at the end of the branch name is not documented, but it is discussed in some forum threads. I would suggest to add the comment from P. Canal [here](https://github.com/root-project/root/pull/13205#discussion_r1265655686) for sake of clarity. Thank you for your time. Best,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:809,usability,clarit,clarity,809,"Hi @jalopezg-git et al :). Thank you for your comments and suggestions, I have learnt new things in this PR. In the last commits I implemented the changes suggested by @vepadulano. Note that I have added a new file with the two lines that print the contents of the TTree using a RDF. The topics that would remain open are:. * Extension of README, as stated [here](https://github.com/root-project/root/pull/13205#discussion_r1259443075). I am sorry but that is beyond my knowledge. Please feel free to complement the README of this tutorial or the ROOT documentation. * The dot at the end of the branch name is not documented, but it is discussed in some forum threads. I would suggest to add the comment from P. Canal [here](https://github.com/root-project/root/pull/13205#discussion_r1265655686) for sake of clarity. Thank you for your time. Best,. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:308,interoperability,format,format,308,"> Almost there +1! I have included some suggestions to apply before merging! I'll re-request review to @vepadulano and @bellenot. > . > Also note:. > . > * I didn't see the changes suggested in [this comment](https://github.com/root-project/root/pull/13205#discussion_r1265655686) by @pcanal. > . > * `clang-format` suggestions will have to be applied before merging. Hi Javier, thank you for your comments. . If I understood properly, the comment by P. Canal about the dot at the end of the branch name means that it is mandatory in this case to avoid degeneracy, and a good practice in general. For that reason the branch names in this tutorial end with a dot. Regarding the README file, I have added your suggestion about the linkdef file. Would you add something else? The files *.c* and *.h* now follow the clang-format style.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:818,interoperability,format,format,818,"> Almost there +1! I have included some suggestions to apply before merging! I'll re-request review to @vepadulano and @bellenot. > . > Also note:. > . > * I didn't see the changes suggested in [this comment](https://github.com/root-project/root/pull/13205#discussion_r1265655686) by @pcanal. > . > * `clang-format` suggestions will have to be applied before merging. Hi Javier, thank you for your comments. . If I understood properly, the comment by P. Canal about the dot at the end of the branch name means that it is mandatory in this case to avoid degeneracy, and a good practice in general. For that reason the branch names in this tutorial end with a dot. Regarding the README file, I have added your suggestion about the linkdef file. Would you add something else? The files *.c* and *.h* now follow the clang-format style.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:576,reliability,pra,practice,576,"> Almost there +1! I have included some suggestions to apply before merging! I'll re-request review to @vepadulano and @bellenot. > . > Also note:. > . > * I didn't see the changes suggested in [this comment](https://github.com/root-project/root/pull/13205#discussion_r1265655686) by @pcanal. > . > * `clang-format` suggestions will have to be applied before merging. Hi Javier, thank you for your comments. . If I understood properly, the comment by P. Canal about the dot at the end of the branch name means that it is mandatory in this case to avoid degeneracy, and a good practice in general. For that reason the branch names in this tutorial end with a dot. Regarding the README file, I have added your suggestion about the linkdef file. Would you add something else? The files *.c* and *.h* now follow the clang-format style.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:93,safety,review,review,93,"> Almost there +1! I have included some suggestions to apply before merging! I'll re-request review to @vepadulano and @bellenot. > . > Also note:. > . > * I didn't see the changes suggested in [this comment](https://github.com/root-project/root/pull/13205#discussion_r1265655686) by @pcanal. > . > * `clang-format` suggestions will have to be applied before merging. Hi Javier, thank you for your comments. . If I understood properly, the comment by P. Canal about the dot at the end of the branch name means that it is mandatory in this case to avoid degeneracy, and a good practice in general. For that reason the branch names in this tutorial end with a dot. Regarding the README file, I have added your suggestion about the linkdef file. Would you add something else? The files *.c* and *.h* now follow the clang-format style.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:547,safety,avoid,avoid,547,"> Almost there +1! I have included some suggestions to apply before merging! I'll re-request review to @vepadulano and @bellenot. > . > Also note:. > . > * I didn't see the changes suggested in [this comment](https://github.com/root-project/root/pull/13205#discussion_r1265655686) by @pcanal. > . > * `clang-format` suggestions will have to be applied before merging. Hi Javier, thank you for your comments. . If I understood properly, the comment by P. Canal about the dot at the end of the branch name means that it is mandatory in this case to avoid degeneracy, and a good practice in general. For that reason the branch names in this tutorial end with a dot. Regarding the README file, I have added your suggestion about the linkdef file. Would you add something else? The files *.c* and *.h* now follow the clang-format style.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:93,testability,review,review,93,"> Almost there +1! I have included some suggestions to apply before merging! I'll re-request review to @vepadulano and @bellenot. > . > Also note:. > . > * I didn't see the changes suggested in [this comment](https://github.com/root-project/root/pull/13205#discussion_r1265655686) by @pcanal. > . > * `clang-format` suggestions will have to be applied before merging. Hi Javier, thank you for your comments. . If I understood properly, the comment by P. Canal about the dot at the end of the branch name means that it is mandatory in this case to avoid degeneracy, and a good practice in general. For that reason the branch names in this tutorial end with a dot. Regarding the README file, I have added your suggestion about the linkdef file. Would you add something else? The files *.c* and *.h* now follow the clang-format style.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:32,deployability,build,builds,32,"> See comment. Also, I guess it builds and works out of the box, right? (didn't test it myself). > . > > Regarding the README file, I have added your suggestion about the linkdef file. Would you add something else? > . > As a first version, I think it's okay as-is, but let's also see what @vepadulano and @pcanal think. Hi Javier,. I have added some comments in the writeTree.cpp about the final dot in the branch name. In addition, I have added 2 sentences to the README. Thank you for your patience. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:232,deployability,version,version,232,"> See comment. Also, I guess it builds and works out of the box, right? (didn't test it myself). > . > > Regarding the README file, I have added your suggestion about the linkdef file. Would you add something else? > . > As a first version, I think it's okay as-is, but let's also see what @vepadulano and @pcanal think. Hi Javier,. I have added some comments in the writeTree.cpp about the final dot in the branch name. In addition, I have added 2 sentences to the README. Thank you for your patience. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:232,integrability,version,version,232,"> See comment. Also, I guess it builds and works out of the box, right? (didn't test it myself). > . > > Regarding the README file, I have added your suggestion about the linkdef file. Would you add something else? > . > As a first version, I think it's okay as-is, but let's also see what @vepadulano and @pcanal think. Hi Javier,. I have added some comments in the writeTree.cpp about the final dot in the branch name. In addition, I have added 2 sentences to the README. Thank you for your patience. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:232,modifiability,version,version,232,"> See comment. Also, I guess it builds and works out of the box, right? (didn't test it myself). > . > > Regarding the README file, I have added your suggestion about the linkdef file. Would you add something else? > . > As a first version, I think it's okay as-is, but let's also see what @vepadulano and @pcanal think. Hi Javier,. I have added some comments in the writeTree.cpp about the final dot in the branch name. In addition, I have added 2 sentences to the README. Thank you for your patience. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:80,safety,test,test,80,"> See comment. Also, I guess it builds and works out of the box, right? (didn't test it myself). > . > > Regarding the README file, I have added your suggestion about the linkdef file. Would you add something else? > . > As a first version, I think it's okay as-is, but let's also see what @vepadulano and @pcanal think. Hi Javier,. I have added some comments in the writeTree.cpp about the final dot in the branch name. In addition, I have added 2 sentences to the README. Thank you for your patience. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:80,testability,test,test,80,"> See comment. Also, I guess it builds and works out of the box, right? (didn't test it myself). > . > > Regarding the README file, I have added your suggestion about the linkdef file. Would you add something else? > . > As a first version, I think it's okay as-is, but let's also see what @vepadulano and @pcanal think. Hi Javier,. I have added some comments in the writeTree.cpp about the final dot in the branch name. In addition, I have added 2 sentences to the README. Thank you for your patience. Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:26,availability,sli,slipped,26,One other suggestion that slipped through my review. 45 commits is probably too much for this PR and they should be squashed into one or a few more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:26,reliability,sli,slipped,26,One other suggestion that slipped through my review. 45 commits is probably too much for this PR and they should be squashed into one or a few more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:45,safety,review,review,45,One other suggestion that slipped through my review. 45 commits is probably too much for this PR and they should be squashed into one or a few more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:45,testability,review,review,45,One other suggestion that slipped through my review. 45 commits is probably too much for this PR and they should be squashed into one or a few more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:28,availability,sli,slipped,28,"> One other suggestion that slipped through my review. 45 commits is probably too much for this PR and they should be squashed into one or a few more. Indeed, we could squash on merge into a single commit; what do you think, @atolosadelgado?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:28,reliability,sli,slipped,28,"> One other suggestion that slipped through my review. 45 commits is probably too much for this PR and they should be squashed into one or a few more. Indeed, we could squash on merge into a single commit; what do you think, @atolosadelgado?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:47,safety,review,review,47,"> One other suggestion that slipped through my review. 45 commits is probably too much for this PR and they should be squashed into one or a few more. Indeed, we could squash on merge into a single commit; what do you think, @atolosadelgado?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:47,testability,review,review,47,"> One other suggestion that slipped through my review. 45 commits is probably too much for this PR and they should be squashed into one or a few more. Indeed, we could squash on merge into a single commit; what do you think, @atolosadelgado?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13205:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13205
https://github.com/root-project/root/pull/13210:71,deployability,build,build,71,"> I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:114,security,auth,authors,114,"> I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:229,security,auth,authors,229,"> I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:462,security,auth,authors,462,"> I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:686,availability,sli,slightly,686,"> > I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. > . > I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ? You are right that the history is not ideal :slightly_frowning_face:... What about preserving some of the commits (perhaps in a slightly modified version)? E.g. one could think of separating the implementation part from the tests/changes to the tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:73,deployability,build,build,73,"> > I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. > . > I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ? You are right that the history is not ideal :slightly_frowning_face:... What about preserving some of the commits (perhaps in a slightly modified version)? E.g. one could think of separating the implementation part from the tests/changes to the tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:704,deployability,version,version,704,"> > I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. > . > I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ? You are right that the history is not ideal :slightly_frowning_face:... What about preserving some of the commits (perhaps in a slightly modified version)? E.g. one could think of separating the implementation part from the tests/changes to the tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:704,integrability,version,version,704,"> > I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. > . > I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ? You are right that the history is not ideal :slightly_frowning_face:... What about preserving some of the commits (perhaps in a slightly modified version)? E.g. one could think of separating the implementation part from the tests/changes to the tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:704,modifiability,version,version,704,"> > I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. > . > I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ? You are right that the history is not ideal :slightly_frowning_face:... What about preserving some of the commits (perhaps in a slightly modified version)? E.g. one could think of separating the implementation part from the tests/changes to the tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:686,reliability,sli,slightly,686,"> > I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. > . > I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ? You are right that the history is not ideal :slightly_frowning_face:... What about preserving some of the commits (perhaps in a slightly modified version)? E.g. one could think of separating the implementation part from the tests/changes to the tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:782,safety,test,tests,782,"> > I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. > . > I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ? You are right that the history is not ideal :slightly_frowning_face:... What about preserving some of the commits (perhaps in a slightly modified version)? E.g. one could think of separating the implementation part from the tests/changes to the tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:116,security,auth,authors,116,"> > I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. > . > I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ? You are right that the history is not ideal :slightly_frowning_face:... What about preserving some of the commits (perhaps in a slightly modified version)? E.g. one could think of separating the implementation part from the tests/changes to the tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:237,security,auth,authors,237,"> > I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. > . > I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ? You are right that the history is not ideal :slightly_frowning_face:... What about preserving some of the commits (perhaps in a slightly modified version)? E.g. one could think of separating the implementation part from the tests/changes to the tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:470,security,auth,authors,470,"> > I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. > . > I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ? You are right that the history is not ideal :slightly_frowning_face:... What about preserving some of the commits (perhaps in a slightly modified version)? E.g. one could think of separating the implementation part from the tests/changes to the tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:695,security,modif,modified,695,"> > I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. > . > I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ? You are right that the history is not ideal :slightly_frowning_face:... What about preserving some of the commits (perhaps in a slightly modified version)? E.g. one could think of separating the implementation part from the tests/changes to the tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:782,testability,test,tests,782,"> > I think would also be fair to preserve the original commits and then build changes on top, so that the original authors get credit for their contributions. > . > I totally agree that this PR should report contributions from previous authors of the feature. I also think that preserving the original commit history would not look that good (see it in the [last PR](https://github.com/root-project/root/pull/11377)). I believe that adding both Stephan and Julia as co-authors in the commit(s) of this PR should be enough. What do you think @jalopezg-git ? You are right that the history is not ideal :slightly_frowning_face:... What about preserving some of the commits (perhaps in a slightly modified version)? E.g. one could think of separating the implementation part from the tests/changes to the tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:76,safety,test,tests,76,"Well yes, the final commit history of this PR will show the implementation, tests, tutorials separately in different commits. All commits then can have Stephan and Julia as co-authors (or at the very least the commits that involve the implementation of the feature). Sounds good?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:176,security,auth,authors,176,"Well yes, the final commit history of this PR will show the implementation, tests, tutorials separately in different commits. All commits then can have Stephan and Julia as co-authors (or at the very least the commits that involve the implementation of the feature). Sounds good?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:76,testability,test,tests,76,"Well yes, the final commit history of this PR will show the implementation, tests, tutorials separately in different commits. All commits then can have Stephan and Julia as co-authors (or at the very least the commits that involve the implementation of the feature). Sounds good?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:78,safety,test,tests,78,"> Well yes, the final commit history of this PR will show the implementation, tests, tutorials separately in different commits. All commits then can have Stephan and Julia as co-authors (or at the very least the commits that involve the implementation of the feature). Sounds good? Sounds perfect, indeed!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:178,security,auth,authors,178,"> Well yes, the final commit history of this PR will show the implementation, tests, tutorials separately in different commits. All commits then can have Stephan and Julia as co-authors (or at the very least the commits that involve the implementation of the feature). Sounds good? Sounds perfect, indeed!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:78,testability,test,tests,78,"> Well yes, the final commit history of this PR will show the implementation, tests, tutorials separately in different commits. All commits then can have Stephan and Julia as co-authors (or at the very least the commits that involve the implementation of the feature). Sounds good? Sounds perfect, indeed!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:42,safety,test,tests,42,"Actually, before merging, let's rerun the tests once more, I see that there might be a compilation problem on Windows based on the last comment from Jenkins",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:42,testability,test,tests,42,"Actually, before merging, let's rerun the tests once more, I see that there might be a compilation problem on Windows based on the last comment from Jenkins",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:12,availability,failur,failure,12,The windows failure on jenkins might be spurious as the new CI doesn't report it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:12,deployability,fail,failure,12,The windows failure on jenkins might be spurious as the new CI doesn't report it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:12,performance,failur,failure,12,The windows failure on jenkins might be spurious as the new CI doesn't report it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:12,reliability,fail,failure,12,The windows failure on jenkins might be spurious as the new CI doesn't report it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13210:63,reliability,doe,doesn,63,The windows failure on jenkins might be spurious as the new CI doesn't report it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13210
https://github.com/root-project/root/pull/13211:18,integrability,sub,submit,18,"Hi @xKZL,. I just submit changes in the hist painters implementing Mollweide projection. https://github.com/root-project/root/pull/13206. If you want you can adjust code for projection function itself. Please submit for it new PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13211
https://github.com/root-project/root/pull/13211:209,integrability,sub,submit,209,"Hi @xKZL,. I just submit changes in the hist painters implementing Mollweide projection. https://github.com/root-project/root/pull/13206. If you want you can adjust code for projection function itself. Please submit for it new PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13211
https://github.com/root-project/root/pull/13211:43,integrability,sub,submitted,43,And any changes to JSROOT should be better submitted to jsroot repository.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13211
https://github.com/root-project/root/pull/13211:63,integrability,repositor,repository,63,And any changes to JSROOT should be better submitted to jsroot repository.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13211
https://github.com/root-project/root/pull/13211:63,interoperability,repositor,repository,63,And any changes to JSROOT should be better submitted to jsroot repository.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13211
https://github.com/root-project/root/pull/13212:151,deployability,contain,contained,151,"Hi @linev, here we are. Please let me know about JS. there is no button (from github interface) to PR in root-project/jsroot . So I just changed files contained in ./js/gpad here. maybe it needs to be rebuilt ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13212
https://github.com/root-project/root/pull/13212:85,integrability,interfac,interface,85,"Hi @linev, here we are. Please let me know about JS. there is no button (from github interface) to PR in root-project/jsroot . So I just changed files contained in ./js/gpad here. maybe it needs to be rebuilt ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13212
https://github.com/root-project/root/pull/13212:85,interoperability,interfac,interface,85,"Hi @linev, here we are. Please let me know about JS. there is no button (from github interface) to PR in root-project/jsroot . So I just changed files contained in ./js/gpad here. maybe it needs to be rebuilt ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13212
https://github.com/root-project/root/pull/13212:85,modifiability,interfac,interface,85,"Hi @linev, here we are. Please let me know about JS. there is no button (from github interface) to PR in root-project/jsroot . So I just changed files contained in ./js/gpad here. maybe it needs to be rebuilt ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13212
https://github.com/root-project/root/pull/13212:357,modifiability,scal,scaling,357,"Hi,. Your code in JSROOT was not working. . I add commit to JSROOT with proper implementation:. https://github.com/root-project/jsroot/commit/3fa5882ebb8aa17eaa704bcc7319a0dac4eb1258. I also used second variant of iteration mentioned in https://en.wikipedia.org/wiki/Mollweide_projection#cite_note-6. It avoids infinite values. . Also there are unnecessary scaling coefficients, which are vanishing at the end.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13212
https://github.com/root-project/root/pull/13212:304,safety,avoid,avoids,304,"Hi,. Your code in JSROOT was not working. . I add commit to JSROOT with proper implementation:. https://github.com/root-project/jsroot/commit/3fa5882ebb8aa17eaa704bcc7319a0dac4eb1258. I also used second variant of iteration mentioned in https://en.wikipedia.org/wiki/Mollweide_projection#cite_note-6. It avoids infinite values. . Also there are unnecessary scaling coefficients, which are vanishing at the end.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13212
https://github.com/root-project/root/pull/13212:27,deployability,rollback,rollback,27,"How should I proceed, just rollback or open a new PR again ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13212
https://github.com/root-project/root/pull/13212:27,reliability,rollback,rollback,27,"How should I proceed, just rollback or open a new PR again ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13212
https://github.com/root-project/root/pull/13212:27,security,rollback,rollback,27,"How should I proceed, just rollback or open a new PR again ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13212
https://github.com/root-project/root/pull/13212:60,security,modif,modified,60,And please adjust C++ implementation that it corresponds to modified JavaScript code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13212
https://github.com/root-project/root/pull/13212:29,deployability,rollback,rollback,29,"> How should I proceed, just rollback or open a new PR again ? You always can rebase your branch and do `git push --force`. For the future - it is better not to use `master` branch to create your PRs. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13212
https://github.com/root-project/root/pull/13212:29,reliability,rollback,rollback,29,"> How should I proceed, just rollback or open a new PR again ? You always can rebase your branch and do `git push --force`. For the future - it is better not to use `master` branch to create your PRs. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13212
https://github.com/root-project/root/pull/13212:29,security,rollback,rollback,29,"> How should I proceed, just rollback or open a new PR again ? You always can rebase your branch and do `git push --force`. For the future - it is better not to use `master` branch to create your PRs. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13212
https://github.com/root-project/root/pull/13213:10,availability,ping,ping,10,@bellenot ping. That addresses an issue discussed here https://root-forum.cern.ch/t/compilation-error-using-the-cxxmodule-option-with-root-generate-dictionary/55465/9. cc: @LukasBreitwieser.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13213
https://github.com/root-project/root/pull/13213:96,availability,error,error-using-the-cxxmodule-option-with-root-generate-dictionary,96,@bellenot ping. That addresses an issue discussed here https://root-forum.cern.ch/t/compilation-error-using-the-cxxmodule-option-with-root-generate-dictionary/55465/9. cc: @LukasBreitwieser.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13213
https://github.com/root-project/root/pull/13213:96,performance,error,error-using-the-cxxmodule-option-with-root-generate-dictionary,96,@bellenot ping. That addresses an issue discussed here https://root-forum.cern.ch/t/compilation-error-using-the-cxxmodule-option-with-root-generate-dictionary/55465/9. cc: @LukasBreitwieser.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13213
https://github.com/root-project/root/pull/13213:96,safety,error,error-using-the-cxxmodule-option-with-root-generate-dictionary,96,@bellenot ping. That addresses an issue discussed here https://root-forum.cern.ch/t/compilation-error-using-the-cxxmodule-option-with-root-generate-dictionary/55465/9. cc: @LukasBreitwieser.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13213
https://github.com/root-project/root/pull/13213:96,usability,error,error-using-the-cxxmodule-option-with-root-generate-dictionary,96,@bellenot ping. That addresses an issue discussed here https://root-forum.cern.ch/t/compilation-error-using-the-cxxmodule-option-with-root-generate-dictionary/55465/9. cc: @LukasBreitwieser.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13213
https://github.com/root-project/root/issues/13215:12,safety,test,test,12,"Hi, can you test changes from PR #13218?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13215
https://github.com/root-project/root/issues/13215:12,testability,test,test,12,"Hi, can you test changes from PR #13218?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13215
https://github.com/root-project/root/issues/13216:14,reliability,doe,does,14,"This probably does not help, but just in case:. https://github.com/openstreetmap/mod_tile/issues/201. https://root-forum.cern.ch/t/number-5-is-alive/52310. https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78969",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13216
https://github.com/root-project/root/issues/13216:23,usability,help,help,23,"This probably does not help, but just in case:. https://github.com/openstreetmap/mod_tile/issues/201. https://root-forum.cern.ch/t/number-5-is-alive/52310. https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78969",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13216
https://github.com/root-project/root/issues/13216:62,modifiability,maintain,maintained,62,"Thanks for reporting, @risicle! As you may know, ROOT5 is not maintained anymore. However, I have assigned @Axel-Naumann to see if further action is justified.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13216
https://github.com/root-project/root/issues/13216:62,safety,maintain,maintained,62,"Thanks for reporting, @risicle! As you may know, ROOT5 is not maintained anymore. However, I have assigned @Axel-Naumann to see if further action is justified.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13216
https://github.com/root-project/root/issues/13216:62,modifiability,maintain,maintained,62,"Thanks @risicle for the report! Javier is right, ROOT5 is not maintained anymore, and just for the sake of adding a highly outdated package to NixOS I would not do any action here. However, we are happy to get and address any report related to the latest ROOT 6, so feel free to re-open the issue should it also apply to ROOT 6 (or create a new one). Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13216
https://github.com/root-project/root/issues/13216:132,modifiability,pac,package,132,"Thanks @risicle for the report! Javier is right, ROOT5 is not maintained anymore, and just for the sake of adding a highly outdated package to NixOS I would not do any action here. However, we are happy to get and address any report related to the latest ROOT 6, so feel free to re-open the issue should it also apply to ROOT 6 (or create a new one). Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13216
https://github.com/root-project/root/issues/13216:62,safety,maintain,maintained,62,"Thanks @risicle for the report! Javier is right, ROOT5 is not maintained anymore, and just for the sake of adding a highly outdated package to NixOS I would not do any action here. However, we are happy to get and address any report related to the latest ROOT 6, so feel free to re-open the issue should it also apply to ROOT 6 (or create a new one). Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13216
https://github.com/root-project/root/pull/13219:67,availability,sli,slightly,67,"> @Nowakus: if this change is merged, you will most likely need to slightly adjust your code. . @jalopezg-git can you explain? Wouldn't framework code use the `RNTupleReader` and `RNTupleWriter`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13219
https://github.com/root-project/root/pull/13219:67,reliability,sli,slightly,67,"> @Nowakus: if this change is merged, you will most likely need to slightly adjust your code. . @jalopezg-git can you explain? Wouldn't framework code use the `RNTupleReader` and `RNTupleWriter`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13219
https://github.com/root-project/root/pull/13219:4,testability,understand,understand,4,"> I understand that this is to be dealt with in the follow-up PR, but I wonder whether it should actually be part of the same pull request. Yes, constructing and destroying values need some work, too. I'd prefer to keep that in a separate PR though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13219
https://github.com/root-project/root/pull/13219:205,usability,prefer,prefer,205,"> I understand that this is to be dealt with in the follow-up PR, but I wonder whether it should actually be part of the same pull request. Yes, constructing and destroying values need some work, too. I'd prefer to keep that in a separate PR though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13219
https://github.com/root-project/root/pull/13219:69,availability,sli,slightly,69,"> > @Nowakus: if this change is merged, you will most likely need to slightly adjust your code. > . > @jalopezg-git can you explain? Wouldn't framework code use the `RNTupleReader` and `RNTupleWriter`? Oh, apologies, I guess you are right! @Nowakus, please disregard my previous comment!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13219
https://github.com/root-project/root/pull/13219:69,reliability,sli,slightly,69,"> > @Nowakus: if this change is merged, you will most likely need to slightly adjust your code. > . > @jalopezg-git can you explain? Wouldn't framework code use the `RNTupleReader` and `RNTupleWriter`? Oh, apologies, I guess you are right! @Nowakus, please disregard my previous comment!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13219
https://github.com/root-project/root/pull/13219:71,availability,sli,slightly,71,"> > > @Nowakus: if this change is merged, you will most likely need to slightly adjust your code. Just to make it clear that there is absolutely no problem with adjusting my code to your changes for the time being. . (as long as I am able to make it still work that is 😄)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13219
https://github.com/root-project/root/pull/13219:203,performance,time,time,203,"> > > @Nowakus: if this change is merged, you will most likely need to slightly adjust your code. Just to make it clear that there is absolutely no problem with adjusting my code to your changes for the time being. . (as long as I am able to make it still work that is 😄)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13219
https://github.com/root-project/root/pull/13219:71,reliability,sli,slightly,71,"> > > @Nowakus: if this change is merged, you will most likely need to slightly adjust your code. Just to make it clear that there is absolutely no problem with adjusting my code to your changes for the time being. . (as long as I am able to make it still work that is 😄)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13219
https://github.com/root-project/root/pull/13219:114,usability,clear,clear,114,"> > > @Nowakus: if this change is merged, you will most likely need to slightly adjust your code. Just to make it clear that there is absolutely no problem with adjusting my code to your changes for the time being. . (as long as I am able to make it still work that is 😄)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13219
https://github.com/root-project/root/pull/13225:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13225
https://github.com/root-project/root/pull/13226:169,deployability,modul,modules,169,"Again - please adjust function to JSROOT. One can use other iteration algorithm, where `NaN` values are not possible. https://github.com/root-project/jsroot/blob/master/modules/gpad/TFramePainter.mjs#L59",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13226
https://github.com/root-project/root/pull/13226:169,modifiability,modul,modules,169,"Again - please adjust function to JSROOT. One can use other iteration algorithm, where `NaN` values are not possible. https://github.com/root-project/jsroot/blob/master/modules/gpad/TFramePainter.mjs#L59",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13226
https://github.com/root-project/root/pull/13226:169,safety,modul,modules,169,"Again - please adjust function to JSROOT. One can use other iteration algorithm, where `NaN` values are not possible. https://github.com/root-project/jsroot/blob/master/modules/gpad/TFramePainter.mjs#L59",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13226
https://github.com/root-project/root/pull/13226:68,integrability,repositor,repository,68,You should not try to change JSROOT in ROOT - I sync it from jsroot repository on regular basis. I was asking to provide C++ implementation which is identical with JSROOT one.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13226
https://github.com/root-project/root/pull/13226:68,interoperability,repositor,repository,68,You should not try to change JSROOT in ROOT - I sync it from jsroot repository on regular basis. I was asking to provide C++ implementation which is identical with JSROOT one.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13226
https://github.com/root-project/root/pull/13226:149,security,ident,identical,149,You should not try to change JSROOT in ROOT - I sync it from jsroot repository on regular basis. I was asking to provide C++ implementation which is identical with JSROOT one.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13226
https://github.com/root-project/root/pull/13226:86,energy efficiency,current,current,86,"Great, this is done & ready! We are good to go, you can merge the PR if fine with the current implementation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13226
https://github.com/root-project/root/pull/13226:2,deployability,rollback,rollbacked,2,I rollbacked the modifications for JSROOT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13226
https://github.com/root-project/root/pull/13226:2,reliability,rollback,rollbacked,2,I rollbacked the modifications for JSROOT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13226
https://github.com/root-project/root/pull/13226:2,security,rollback,rollbacked,2,I rollbacked the modifications for JSROOT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13226
https://github.com/root-project/root/pull/13226:17,security,modif,modifications,17,I rollbacked the modifications for JSROOT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13226
https://github.com/root-project/root/pull/13229:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13229
https://github.com/root-project/root/pull/13229:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13229
https://github.com/root-project/root/pull/13229:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13229
https://github.com/root-project/root/pull/13229:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13229
https://github.com/root-project/root/pull/13229:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13229
https://github.com/root-project/root/pull/13232:81,integrability,messag,message,81,"Thank you @eguiraud for the comment, I have added your main points to the commit message. I agree there are still potential performance penalties in DistRDF (although much less so than it used to be) and for now we can remove this dead part of the codebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13232
https://github.com/root-project/root/pull/13232:81,interoperability,messag,message,81,"Thank you @eguiraud for the comment, I have added your main points to the commit message. I agree there are still potential performance penalties in DistRDF (although much less so than it used to be) and for now we can remove this dead part of the codebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13232
https://github.com/root-project/root/pull/13232:124,performance,perform,performance,124,"Thank you @eguiraud for the comment, I have added your main points to the commit message. I agree there are still potential performance penalties in DistRDF (although much less so than it used to be) and for now we can remove this dead part of the codebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13232
https://github.com/root-project/root/pull/13232:124,usability,perform,performance,124,"Thank you @eguiraud for the comment, I have added your main points to the commit message. I agree there are still potential performance penalties in DistRDF (although much less so than it used to be) and for now we can remove this dead part of the codebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13232
https://github.com/root-project/root/issues/13233:319,integrability,filter,filter,319,"In fact it's an old issue with `TMethodBrowsable`... Maybe @pcanal could take a look and give some advice how to re-introduce the ability to browse a method, but without recursively adding methods in the browser, as described in the Jira issue [#ROOT-9260](https://sft.its.cern.ch/jira/browse/ROOT-9260)? I'm trying to filter which methods are browsable and which are not, but that's tedious...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13233
https://github.com/root-project/root/issues/13233:218,availability,operat,operators,218,"Apriori the infinite recursion is ""real"" as the result of an arbitrary depth of calls ""can"" be plotted. It feels that the only solution (in addition to filtering the function that are not callable from `Draw` like the operators and function that returns collections) is to delay the populating until the user actually click on the ""unfold"" button.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13233
https://github.com/root-project/root/issues/13233:203,energy efficiency,Draw,Draw,203,"Apriori the infinite recursion is ""real"" as the result of an arbitrary depth of calls ""can"" be plotted. It feels that the only solution (in addition to filtering the function that are not callable from `Draw` like the operators and function that returns collections) is to delay the populating until the user actually click on the ""unfold"" button.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13233
https://github.com/root-project/root/issues/13233:152,integrability,filter,filtering,152,"Apriori the infinite recursion is ""real"" as the result of an arbitrary depth of calls ""can"" be plotted. It feels that the only solution (in addition to filtering the function that are not callable from `Draw` like the operators and function that returns collections) is to delay the populating until the user actually click on the ""unfold"" button.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13233
https://github.com/root-project/root/issues/13233:304,usability,user,user,304,"Apriori the infinite recursion is ""real"" as the result of an arbitrary depth of calls ""can"" be plotted. It feels that the only solution (in addition to filtering the function that are not callable from `Draw` like the operators and function that returns collections) is to delay the populating until the user actually click on the ""unfold"" button.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13233
https://github.com/root-project/root/issues/13233:220,availability,operat,operators,220,"> Apriori the infinite recursion is ""real"" as the result of an arbitrary depth of calls ""can"" be plotted. It feels that the only solution (in addition to filtering the function that are not callable from `Draw` like the operators and function that returns collections) is to delay the populating until the user actually click on the ""unfold"" button. But this is already the case...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13233
https://github.com/root-project/root/issues/13233:205,energy efficiency,Draw,Draw,205,"> Apriori the infinite recursion is ""real"" as the result of an arbitrary depth of calls ""can"" be plotted. It feels that the only solution (in addition to filtering the function that are not callable from `Draw` like the operators and function that returns collections) is to delay the populating until the user actually click on the ""unfold"" button. But this is already the case...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13233
https://github.com/root-project/root/issues/13233:154,integrability,filter,filtering,154,"> Apriori the infinite recursion is ""real"" as the result of an arbitrary depth of calls ""can"" be plotted. It feels that the only solution (in addition to filtering the function that are not callable from `Draw` like the operators and function that returns collections) is to delay the populating until the user actually click on the ""unfold"" button. But this is already the case...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13233
https://github.com/root-project/root/issues/13233:306,usability,user,user,306,"> Apriori the infinite recursion is ""real"" as the result of an arbitrary depth of calls ""can"" be plotted. It feels that the only solution (in addition to filtering the function that are not callable from `Draw` like the operators and function that returns collections) is to delay the populating until the user actually click on the ""unfold"" button. But this is already the case...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13233
https://github.com/root-project/root/pull/13238:152,deployability,upgrad,upgrade,152,"As far as I can tell, this is the only occurrence of `pragma link enum` to a `typedef`. I found this because `rootcling` complained with the attempt to upgrade to LLVM 16 while it worked (maybe by chance) before. Do you think it would be ok to break this corner case? @pcanal @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:152,modifiability,upgrad,upgrade,152,"As far as I can tell, this is the only occurrence of `pragma link enum` to a `typedef`. I found this because `rootcling` complained with the attempt to upgrade to LLVM 16 while it worked (maybe by chance) before. Do you think it would be ok to break this corner case? @pcanal @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:54,reliability,pra,pragma,54,"As far as I can tell, this is the only occurrence of `pragma link enum` to a `typedef`. I found this because `rootcling` complained with the attempt to upgrade to LLVM 16 while it worked (maybe by chance) before. Do you think it would be ok to break this corner case? @pcanal @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:121,safety,compl,complained,121,"As far as I can tell, this is the only occurrence of `pragma link enum` to a `typedef`. I found this because `rootcling` complained with the attempt to upgrade to LLVM 16 while it worked (maybe by chance) before. Do you think it would be ok to break this corner case? @pcanal @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:121,security,compl,complained,121,"As far as I can tell, this is the only occurrence of `pragma link enum` to a `typedef`. I found this because `rootcling` complained with the attempt to upgrade to LLVM 16 while it worked (maybe by chance) before. Do you think it would be ok to break this corner case? @pcanal @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:451,availability,error,error,451,"> This is an idiom widely used in C. I suspect that will have quite a big impact to people's dictionaries and in particular when they request dictionaries of idiomatic C codes... Ha, it's actually the other way around and it fails with LLVM 16 because that one makes a bigger effort to ""see through"" `typedef`s and finally finds `PDG_t`. The reason we don't notice so far is that non-existing `enums` referenced in `LinkDef.h` files don't trigger any error / warning - just try `#pragma link C++ enum DOES_NOT_EXIST;`. @pcanal do you want an issue for that? tldr: this change actually *fixes* `PDG_t` to be included. Alternatively, we can also just remove it entirely as it's never been found so far...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:225,deployability,fail,fails,225,"> This is an idiom widely used in C. I suspect that will have quite a big impact to people's dictionaries and in particular when they request dictionaries of idiomatic C codes... Ha, it's actually the other way around and it fails with LLVM 16 because that one makes a bigger effort to ""see through"" `typedef`s and finally finds `PDG_t`. The reason we don't notice so far is that non-existing `enums` referenced in `LinkDef.h` files don't trigger any error / warning - just try `#pragma link C++ enum DOES_NOT_EXIST;`. @pcanal do you want an issue for that? tldr: this change actually *fixes* `PDG_t` to be included. Alternatively, we can also just remove it entirely as it's never been found so far...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:451,performance,error,error,451,"> This is an idiom widely used in C. I suspect that will have quite a big impact to people's dictionaries and in particular when they request dictionaries of idiomatic C codes... Ha, it's actually the other way around and it fails with LLVM 16 because that one makes a bigger effort to ""see through"" `typedef`s and finally finds `PDG_t`. The reason we don't notice so far is that non-existing `enums` referenced in `LinkDef.h` files don't trigger any error / warning - just try `#pragma link C++ enum DOES_NOT_EXIST;`. @pcanal do you want an issue for that? tldr: this change actually *fixes* `PDG_t` to be included. Alternatively, we can also just remove it entirely as it's never been found so far...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:225,reliability,fail,fails,225,"> This is an idiom widely used in C. I suspect that will have quite a big impact to people's dictionaries and in particular when they request dictionaries of idiomatic C codes... Ha, it's actually the other way around and it fails with LLVM 16 because that one makes a bigger effort to ""see through"" `typedef`s and finally finds `PDG_t`. The reason we don't notice so far is that non-existing `enums` referenced in `LinkDef.h` files don't trigger any error / warning - just try `#pragma link C++ enum DOES_NOT_EXIST;`. @pcanal do you want an issue for that? tldr: this change actually *fixes* `PDG_t` to be included. Alternatively, we can also just remove it entirely as it's never been found so far...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:480,reliability,pra,pragma,480,"> This is an idiom widely used in C. I suspect that will have quite a big impact to people's dictionaries and in particular when they request dictionaries of idiomatic C codes... Ha, it's actually the other way around and it fails with LLVM 16 because that one makes a bigger effort to ""see through"" `typedef`s and finally finds `PDG_t`. The reason we don't notice so far is that non-existing `enums` referenced in `LinkDef.h` files don't trigger any error / warning - just try `#pragma link C++ enum DOES_NOT_EXIST;`. @pcanal do you want an issue for that? tldr: this change actually *fixes* `PDG_t` to be included. Alternatively, we can also just remove it entirely as it's never been found so far...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:451,safety,error,error,451,"> This is an idiom widely used in C. I suspect that will have quite a big impact to people's dictionaries and in particular when they request dictionaries of idiomatic C codes... Ha, it's actually the other way around and it fails with LLVM 16 because that one makes a bigger effort to ""see through"" `typedef`s and finally finds `PDG_t`. The reason we don't notice so far is that non-existing `enums` referenced in `LinkDef.h` files don't trigger any error / warning - just try `#pragma link C++ enum DOES_NOT_EXIST;`. @pcanal do you want an issue for that? tldr: this change actually *fixes* `PDG_t` to be included. Alternatively, we can also just remove it entirely as it's never been found so far...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:451,usability,error,error,451,"> This is an idiom widely used in C. I suspect that will have quite a big impact to people's dictionaries and in particular when they request dictionaries of idiomatic C codes... Ha, it's actually the other way around and it fails with LLVM 16 because that one makes a bigger effort to ""see through"" `typedef`s and finally finds `PDG_t`. The reason we don't notice so far is that non-existing `enums` referenced in `LinkDef.h` files don't trigger any error / warning - just try `#pragma link C++ enum DOES_NOT_EXIST;`. @pcanal do you want an issue for that? tldr: this change actually *fixes* `PDG_t` to be included. Alternatively, we can also just remove it entirely as it's never been found so far...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:0,availability,ping,ping,0,"ping; as explained above, this is actually improving the situation. `typedef`s to anonymous `enum`s apparently never worked...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:145,availability,error,error,145,"I think we need to discuss:. - what the effect of a LinkDef entry of an enum is today, and what it is supposed to be. - whether we should warn / error out for LinkDef entries for non-existing enums. - whether LinkDef entries through typedef should work, in general. Maybe we use today's IO meeting for that, but it'd be good to have some of the answers ready by that time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:145,performance,error,error,145,"I think we need to discuss:. - what the effect of a LinkDef entry of an enum is today, and what it is supposed to be. - whether we should warn / error out for LinkDef entries for non-existing enums. - whether LinkDef entries through typedef should work, in general. Maybe we use today's IO meeting for that, but it'd be good to have some of the answers ready by that time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:367,performance,time,time,367,"I think we need to discuss:. - what the effect of a LinkDef entry of an enum is today, and what it is supposed to be. - whether we should warn / error out for LinkDef entries for non-existing enums. - whether LinkDef entries through typedef should work, in general. Maybe we use today's IO meeting for that, but it'd be good to have some of the answers ready by that time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:145,safety,error,error,145,"I think we need to discuss:. - what the effect of a LinkDef entry of an enum is today, and what it is supposed to be. - whether we should warn / error out for LinkDef entries for non-existing enums. - whether LinkDef entries through typedef should work, in general. Maybe we use today's IO meeting for that, but it'd be good to have some of the answers ready by that time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:145,usability,error,error,145,"I think we need to discuss:. - what the effect of a LinkDef entry of an enum is today, and what it is supposed to be. - whether we should warn / error out for LinkDef entries for non-existing enums. - whether LinkDef entries through typedef should work, in general. Maybe we use today's IO meeting for that, but it'd be good to have some of the answers ready by that time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:245,availability,error,error,245,"Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:251,integrability,messag,message,251,"Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:251,interoperability,messag,message,251,"Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:16,performance,I/O,I/O,16,"Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:245,performance,error,error,245,"Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:245,safety,error,error,245,"Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:206,usability,indicat,indicate,206,"Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:245,usability,error,error,245,"Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:247,availability,error,error,247,"> Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is. https://github.com/root-project/root/issues/13303",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:253,integrability,messag,message,253,"> Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is. https://github.com/root-project/root/issues/13303",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:253,interoperability,messag,message,253,"> Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is. https://github.com/root-project/root/issues/13303",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:18,performance,I/O,I/O,18,"> Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is. https://github.com/root-project/root/issues/13303",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:247,performance,error,error,247,"> Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is. https://github.com/root-project/root/issues/13303",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:247,safety,error,error,247,"> Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is. https://github.com/root-project/root/issues/13303",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:208,usability,indicat,indicate,208,"> Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is. https://github.com/root-project/root/issues/13303",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13238:247,usability,error,error,247,"> Agreed today at I/O meeting that we need to remind ourselves and investigate these questions. I'm okay with merging this PR if e.g. @hahnjo could create a new issue with the above questions - this seems to indicate a bug, whether it's a missing error message or an ignored linkdef entry or whatever it is. https://github.com/root-project/root/issues/13303",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13238
https://github.com/root-project/root/pull/13240:163,availability,servic,services,163,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:244,availability,Error,Errors,244,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:652,availability,error,error,652,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:2,deployability,Build,Build,2,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:8,deployability,fail,failed,8,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:87,deployability,build,build,87,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:121,deployability,build,build,121,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:163,deployability,servic,services,163,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:215,deployability,build,build,215,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:288,deployability,FAIL,FAILED,288,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:367,deployability,build,build,367,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:401,deployability,build,build,401,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:407,deployability,build,build,407,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:465,deployability,build,build,465,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:499,deployability,build,build,499,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:505,deployability,build,build,505,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:582,deployability,build,build,582,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:616,deployability,build,build,616,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:622,deployability,build,build,622,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:163,integrability,servic,services,163,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:163,modifiability,servic,services,163,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:244,performance,Error,Errors,244,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:652,performance,error,error,652,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:8,reliability,fail,failed,8,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:288,reliability,FAIL,FAILED,288,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:244,safety,Error,Errors,244,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:652,safety,error,error,652,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:72,usability,User,Users,72,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:244,usability,Error,Errors,244,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:352,usability,User,Users,352,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:450,usability,User,Users,450,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:567,usability,User,Users,567,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13240:652,usability,error,error,652,> Build failed on mac12arm/cxx20. Running on macphsft26.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179637/console). > ### Errors:. > . > * [2023-07-13T08:50:12.176Z] FAILED: roofit/roofitcore/G__RooFitCore.cxx lib/RooFitCore.pcm /Users/sftnight/build/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx /Users/sftnight/build/workspace/root-pullrequests-build/build/lib/RooFitCore.pcm. > . > * [2023-07-13T08:50:13.545Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/include/RooSpan.h:64:3: error: no matching constructor for initialization of 'std::span<const int>'. This will be addressed by https://github.com/root-project/root/pull/13242.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13240
https://github.com/root-project/root/pull/13241:70,interoperability,format,formatting,70,Can someone have a look and merge this? I don't want to enforce clang formatting for the modified code since this should be at some point done more globally for all the files within the geometry package,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13241
https://github.com/root-project/root/pull/13241:195,modifiability,pac,package,195,Can someone have a look and merge this? I don't want to enforce clang formatting for the modified code since this should be at some point done more globally for all the files within the geometry package,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13241
https://github.com/root-project/root/pull/13241:89,security,modif,modified,89,Can someone have a look and merge this? I don't want to enforce clang formatting for the modified code since this should be at some point done more globally for all the files within the geometry package,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13241
https://github.com/root-project/root/pull/13243:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:175,availability,servic,services,175,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:367,availability,servic,services,367,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:2,deployability,Build,Build,2,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:8,deployability,fail,failed,8,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:99,deployability,build,build,99,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:133,deployability,build,build,133,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:175,deployability,servic,services,175,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:227,deployability,build,build,227,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:256,deployability,Fail,Failing,256,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:367,deployability,servic,services,367,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:419,deployability,build,build,419,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:679,deployability,build,build,679,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:713,deployability,build,builds,713,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:760,deployability,updat,update,760,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:307,energy efficiency,core,core,307,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:469,energy efficiency,core,core,469,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:768,energy efficiency,core,core,768,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:175,integrability,servic,services,175,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:367,integrability,servic,services,367,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:175,modifiability,servic,services,175,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:367,modifiability,servic,services,367,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:8,reliability,fail,failed,8,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:256,reliability,Fail,Failing,256,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:264,safety,test,tests,264,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:432,safety,test,testReport,432,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:695,safety,avoid,avoid,695,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:760,safety,updat,update,760,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:760,security,updat,update,760,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:264,testability,test,tests,264,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:432,testability,test,testReport,432,"> Build failed on ROOT-ubuntu2204/nortcxxmod. Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/console). > ### Failing tests:. > . > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/179739/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This one is ~ known: https://github.com/root-project/root/issues/13058 (yes, that one *must* be solved before merging this PR). For `alma8`, I've added the ""clean build"" label to avoid incremental builds in the new CI. You should probably also update `core/foundation/inc/ROOT/RConfig.hxx` to check for C++17. Other than that, this looks really good, other cleanups can be taken care of in future PRs as we go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:81,deployability,build,builds,81,"Still can't understand what is forcing `CMAKE_CXX_STANDARD=14` in the default PR builds... `rootspi` doesnt' explicitly set it, nor could I find it in `jenkins-pipelines`... still investigating",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:160,deployability,pipelin,pipelines,160,"Still can't understand what is forcing `CMAKE_CXX_STANDARD=14` in the default PR builds... `rootspi` doesnt' explicitly set it, nor could I find it in `jenkins-pipelines`... still investigating",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:160,integrability,pipelin,pipelines,160,"Still can't understand what is forcing `CMAKE_CXX_STANDARD=14` in the default PR builds... `rootspi` doesnt' explicitly set it, nor could I find it in `jenkins-pipelines`... still investigating",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:101,reliability,doe,doesnt,101,"Still can't understand what is forcing `CMAKE_CXX_STANDARD=14` in the default PR builds... `rootspi` doesnt' explicitly set it, nor could I find it in `jenkins-pipelines`... still investigating",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:12,testability,understand,understand,12,"Still can't understand what is forcing `CMAKE_CXX_STANDARD=14` in the default PR builds... `rootspi` doesnt' explicitly set it, nor could I find it in `jenkins-pipelines`... still investigating",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:83,deployability,build,builds,83,"> Still can't understand what is forcing `CMAKE_CXX_STANDARD=14` in the default PR builds... `rootspi` doesnt' explicitly set it, nor could I find it in `jenkins-pipelines`... still investigating. This *should* be https://github.com/root-project/rootspi/blob/master/jenkins/root-build.cmake#L931 , no? We likely need a new case. ```groovy. elseif (ROOT_VERSION VERSION_GREATER_EQUAL 6.29). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=17). elseif (ROOT_VERSION VERSION_GREATER_EQUAL 6.25). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=14). else(). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=11). endif(). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:162,deployability,pipelin,pipelines,162,"> Still can't understand what is forcing `CMAKE_CXX_STANDARD=14` in the default PR builds... `rootspi` doesnt' explicitly set it, nor could I find it in `jenkins-pipelines`... still investigating. This *should* be https://github.com/root-project/rootspi/blob/master/jenkins/root-build.cmake#L931 , no? We likely need a new case. ```groovy. elseif (ROOT_VERSION VERSION_GREATER_EQUAL 6.29). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=17). elseif (ROOT_VERSION VERSION_GREATER_EQUAL 6.25). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=14). else(). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=11). endif(). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:279,deployability,build,build,279,"> Still can't understand what is forcing `CMAKE_CXX_STANDARD=14` in the default PR builds... `rootspi` doesnt' explicitly set it, nor could I find it in `jenkins-pipelines`... still investigating. This *should* be https://github.com/root-project/rootspi/blob/master/jenkins/root-build.cmake#L931 , no? We likely need a new case. ```groovy. elseif (ROOT_VERSION VERSION_GREATER_EQUAL 6.29). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=17). elseif (ROOT_VERSION VERSION_GREATER_EQUAL 6.25). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=14). else(). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=11). endif(). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:162,integrability,pipelin,pipelines,162,"> Still can't understand what is forcing `CMAKE_CXX_STANDARD=14` in the default PR builds... `rootspi` doesnt' explicitly set it, nor could I find it in `jenkins-pipelines`... still investigating. This *should* be https://github.com/root-project/rootspi/blob/master/jenkins/root-build.cmake#L931 , no? We likely need a new case. ```groovy. elseif (ROOT_VERSION VERSION_GREATER_EQUAL 6.29). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=17). elseif (ROOT_VERSION VERSION_GREATER_EQUAL 6.25). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=14). else(). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=11). endif(). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:103,reliability,doe,doesnt,103,"> Still can't understand what is forcing `CMAKE_CXX_STANDARD=14` in the default PR builds... `rootspi` doesnt' explicitly set it, nor could I find it in `jenkins-pipelines`... still investigating. This *should* be https://github.com/root-project/rootspi/blob/master/jenkins/root-build.cmake#L931 , no? We likely need a new case. ```groovy. elseif (ROOT_VERSION VERSION_GREATER_EQUAL 6.29). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=17). elseif (ROOT_VERSION VERSION_GREATER_EQUAL 6.25). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=14). else(). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=11). endif(). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:14,testability,understand,understand,14,"> Still can't understand what is forcing `CMAKE_CXX_STANDARD=14` in the default PR builds... `rootspi` doesnt' explicitly set it, nor could I find it in `jenkins-pipelines`... still investigating. This *should* be https://github.com/root-project/rootspi/blob/master/jenkins/root-build.cmake#L931 , no? We likely need a new case. ```groovy. elseif (ROOT_VERSION VERSION_GREATER_EQUAL 6.29). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=17). elseif (ROOT_VERSION VERSION_GREATER_EQUAL 6.25). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=14). else(). set(specflags ${specflags} -DCMAKE_CXX_STANDARD=11). endif(). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:82,deployability,build,build,82,"> This should be https://github.com/root-project/rootspi/blob/master/jenkins/root-build.cmake#L931 , no? We likely need a new case. Yes, thank you so much! Seems like it, how could I not see that yesterday, I only focused on the `cxx14` flag and didn't see anything setting that xD Anyway, probably we want to merge this PR before adding that new flag to the PR builds, otherwise every other PR will build with C++17.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:362,deployability,build,builds,362,"> This should be https://github.com/root-project/rootspi/blob/master/jenkins/root-build.cmake#L931 , no? We likely need a new case. Yes, thank you so much! Seems like it, how could I not see that yesterday, I only focused on the `cxx14` flag and didn't see anything setting that xD Anyway, probably we want to merge this PR before adding that new flag to the PR builds, otherwise every other PR will build with C++17.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:400,deployability,build,build,400,"> This should be https://github.com/root-project/rootspi/blob/master/jenkins/root-build.cmake#L931 , no? We likely need a new case. Yes, thank you so much! Seems like it, how could I not see that yesterday, I only focused on the `cxx14` flag and didn't see anything setting that xD Anyway, probably we want to merge this PR before adding that new flag to the PR builds, otherwise every other PR will build with C++17.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:82,deployability,build,builds,82,"> Anyway, probably we want to merge this PR before adding that new flag to the PR builds, otherwise every other PR will build with C++17. I think that would be fine though because it's decided that we go to C++14. IMHO losing that coverage before this PR is merged may be just fine and de-complicate things. It requires fixing https://github.com/root-project/root/issues/13058 first though; I can have another look in the afternoon, but this probably requires @pcanal to have a look...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:120,deployability,build,build,120,"> Anyway, probably we want to merge this PR before adding that new flag to the PR builds, otherwise every other PR will build with C++17. I think that would be fine though because it's decided that we go to C++14. IMHO losing that coverage before this PR is merged may be just fine and de-complicate things. It requires fixing https://github.com/root-project/root/issues/13058 first though; I can have another look in the afternoon, but this probably requires @pcanal to have a look...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:289,safety,compl,complicate,289,"> Anyway, probably we want to merge this PR before adding that new flag to the PR builds, otherwise every other PR will build with C++17. I think that would be fine though because it's decided that we go to C++14. IMHO losing that coverage before this PR is merged may be just fine and de-complicate things. It requires fixing https://github.com/root-project/root/issues/13058 first though; I can have another look in the afternoon, but this probably requires @pcanal to have a look...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:289,security,compl,complicate,289,"> Anyway, probably we want to merge this PR before adding that new flag to the PR builds, otherwise every other PR will build with C++17. I think that would be fine though because it's decided that we go to C++14. IMHO losing that coverage before this PR is merged may be just fine and de-complicate things. It requires fixing https://github.com/root-project/root/issues/13058 first though; I can have another look in the afternoon, but this probably requires @pcanal to have a look...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:231,testability,coverag,coverage,231,"> Anyway, probably we want to merge this PR before adding that new flag to the PR builds, otherwise every other PR will build with C++17. I think that would be fine though because it's decided that we go to C++14. IMHO losing that coverage before this PR is merged may be just fine and de-complicate things. It requires fixing https://github.com/root-project/root/issues/13058 first though; I can have another look in the afternoon, but this probably requires @pcanal to have a look...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:12,deployability,build,builds,12,"All jenkins builds are green, except for ubuntu22 nortcxxmod since we landed on the wrong machine, and for debian10 which always takes too long. I will restart the build on ubuntu22 hoping to land on a working machine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:164,deployability,build,build,164,"All jenkins builds are green, except for ubuntu22 nortcxxmod since we landed on the wrong machine, and for debian10 which always takes too long. I will restart the build on ubuntu22 hoping to land on a working machine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:23,energy efficiency,green,green,23,"All jenkins builds are green, except for ubuntu22 nortcxxmod since we landed on the wrong machine, and for debian10 which always takes too long. I will restart the build on ubuntu22 hoping to land on a working machine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:30,safety,except,except,30,"All jenkins builds are green, except for ubuntu22 nortcxxmod since we landed on the wrong machine, and for debian10 which always takes too long. I will restart the build on ubuntu22 hoping to land on a working machine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod, ROOT-debian10-i386/soversion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:17,availability,failur,failure,17,The windows test failure shows up also elsewhere (@bellenot FYI maybe you have a nice idea how to work around it). The ping test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:119,availability,ping,ping,119,The windows test failure shows up also elsewhere (@bellenot FYI maybe you have a nice idea how to work around it). The ping test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:129,availability,failur,failure,129,The windows test failure shows up also elsewhere (@bellenot FYI maybe you have a nice idea how to work around it). The ping test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:17,deployability,fail,failure,17,The windows test failure shows up also elsewhere (@bellenot FYI maybe you have a nice idea how to work around it). The ping test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:129,deployability,fail,failure,129,The windows test failure shows up also elsewhere (@bellenot FYI maybe you have a nice idea how to work around it). The ping test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:17,performance,failur,failure,17,The windows test failure shows up also elsewhere (@bellenot FYI maybe you have a nice idea how to work around it). The ping test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:129,performance,failur,failure,129,The windows test failure shows up also elsewhere (@bellenot FYI maybe you have a nice idea how to work around it). The ping test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:17,reliability,fail,failure,17,The windows test failure shows up also elsewhere (@bellenot FYI maybe you have a nice idea how to work around it). The ping test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:129,reliability,fail,failure,129,The windows test failure shows up also elsewhere (@bellenot FYI maybe you have a nice idea how to work around it). The ping test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:12,safety,test,test,12,The windows test failure shows up also elsewhere (@bellenot FYI maybe you have a nice idea how to work around it). The ping test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:124,safety,test,test,124,The windows test failure shows up also elsewhere (@bellenot FYI maybe you have a nice idea how to work around it). The ping test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:12,testability,test,test,12,The windows test failure shows up also elsewhere (@bellenot FYI maybe you have a nice idea how to work around it). The ping test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13243:124,testability,test,test,124,The windows test failure shows up also elsewhere (@bellenot FYI maybe you have a nice idea how to work around it). The ping test failure seems unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13243
https://github.com/root-project/root/pull/13246:37,availability,error,errors,37,"It's worrying that the new CI has no errors: without the missing `import ROOT`, that code is broken",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13246
https://github.com/root-project/root/pull/13246:37,performance,error,errors,37,"It's worrying that the new CI has no errors: without the missing `import ROOT`, that code is broken",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13246
https://github.com/root-project/root/pull/13246:37,safety,error,errors,37,"It's worrying that the new CI has no errors: without the missing `import ROOT`, that code is broken",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13246
https://github.com/root-project/root/pull/13246:37,usability,error,errors,37,"It's worrying that the new CI has no errors: without the missing `import ROOT`, that code is broken",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13246
https://github.com/root-project/root/pull/13246:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13246
https://github.com/root-project/root/pull/13247:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13247
https://github.com/root-project/root/pull/13248:425,availability,error,error,425,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:10,deployability,patch,patch,10,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:510,deployability,modul,module,510,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:649,deployability,build,build,649,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:655,deployability,instal,install,655,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:811,deployability,fail,failed,811,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:1080,deployability,Fail,Failed,1080,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:1191,deployability,patch,patching,1191,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:63,interoperability,distribut,distributed,63,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:242,interoperability,Distribut,Distributed,242,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:510,modifiability,modul,module,510,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:425,performance,error,error,425,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:811,reliability,fail,failed,811,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:1080,reliability,Fail,Failed,1080,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:10,safety,patch,patch,10,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:425,safety,error,error,425,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:510,safety,modul,module,510,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:1191,safety,patch,patching,1191,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:10,security,patch,patch,10,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:1191,security,patch,patching,1191,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:438,testability,Trace,Traceback,438,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:1233,testability,understand,understand,1233,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:425,usability,error,error,425,"With this patch, this code:. ```python. import ROOT. from dask.distributed import Client, LocalCluster. if __name__ == ""__main__"":. client = Client(LocalCluster(n_workers=1, processes=False, threads_per_worker=1)). df = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame(10, daskclient=client). df = ROOT.RDataFrame(10). c = df.Count(). cs = ROOT.RDF.Experimental.VariationsFor(c). print(cs[""nominal""]). ```. breaks with this error:. ```. Traceback (most recent call last):. File ""/tmp/distrdf.py"", line 9, in <module>. cs = ROOT.RDF.Experimental.VariationsFor(c). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/home/blue/ROOT/master-with-venv/cmake-build/install/lib/ROOT/_facade.py"", line 96, in variationsfor. return rdf_variationsfor(resptr). ^^^^^^^^^^^^^^^^^^^^^^^^^. TypeError: Template method resolution failed:. ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::Experimental::VariationsFor(ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > resPtr) =>. TypeError: could not convert argument 1. Failed to instantiate ""VariationsFor(ROOT::RDF::RResultPtr<ULong64_t>*)"". ```. Probably some issue with monkey-patching a template function, but I don't understand what goes wrong exactly or how to fix it. Needs debugging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:197,interoperability,distribut,distributed,197,"I opened a PR that practically supersedes this (https://github.com/root-project/root/pull/16681). It introduces the fixes necessary for the issues highlighted here, plus also unifies the local and distributed RDataFrame constructors. We can move further conversation over to the new PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:254,interoperability,convers,conversation,254,"I opened a PR that practically supersedes this (https://github.com/root-project/root/pull/16681). It introduces the fixes necessary for the issues highlighted here, plus also unifies the local and distributed RDataFrame constructors. We can move further conversation over to the new PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/pull/13248:19,reliability,pra,practically,19,"I opened a PR that practically supersedes this (https://github.com/root-project/root/pull/16681). It introduces the fixes necessary for the issues highlighted here, plus also unifies the local and distributed RDataFrame constructors. We can move further conversation over to the new PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13248
https://github.com/root-project/root/issues/13249:97,deployability,build,build,97,"For reference, I afterwards added the cmake gymnastics necessary to copy the Python files to the build directory also in incremental builds https://github.com/root-project/root/pull/13251. This may be the real culprit behind this issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13249
https://github.com/root-project/root/issues/13249:133,deployability,build,builds,133,"For reference, I afterwards added the cmake gymnastics necessary to copy the Python files to the build directory also in incremental builds https://github.com/root-project/root/pull/13251. This may be the real culprit behind this issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13249
https://github.com/root-project/root/issues/13249:40,usability,indicat,indication,40,Okay thanks - I have not seen any other indication of the behavior described here... Closing this until it resurfaces.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13249
https://github.com/root-project/root/issues/13249:58,usability,behavi,behavior,58,Okay thanks - I have not seen any other indication of the behavior described here... Closing this until it resurfaces.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13249
